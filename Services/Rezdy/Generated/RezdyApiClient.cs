////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
//// </auto-generated>
////----------------------

//#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
//#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
//#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
//#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
//#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
//#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
//#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
//#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
//#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
//#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
//#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
//#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
//#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
//#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
//#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

//namespace TourManagementApi.Services.Rezdy.Models
//{
//    using System = global::System;

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial interface IClient
//    {
//        /// <summary>
//        /// Search availability
//        /// </summary>
//        /// <remarks>
//        /// This service returns availability information for a specific date range. The service response contains a list of sessions, including their availability and pricing details.&lt;br&gt;
//        /// <br/>&lt;p&gt;Pricing in the session can be different than the pricing of the products, in a case of a dynamic pricing when a supplier overrides a price for a specific session or a ticket type.&lt;/p&gt;
//        /// <br/>&lt;p&gt;In case of multiple products sharing this session, a session will contain price overrides for all of the shared products. Therefore it is necessary to filer only the price options matching the chosen product code on the client side, when displaying available price options to a customer.&lt;/p&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345. You can request multiple products `productCode=P11111&amp;productCode=P22222&amp;productCode=P33333`, which belong to a single supplier.</param>
//        /// <param name="startTime">Start time in `ISO 8601` format. It is required to have either startTime or startTimeLocal to define the start of the time window.</param>
//        /// <param name="endTime">End time in `ISO 8601` format. It is required to have either endTime or endTimeLocal to define the end of the time window.</param>
//        /// <param name="startTimeLocal">Start time in supplier's local timezone, format is `yyyy-MM-dd HH:mm:ss`, for example `2014-03-01 00:00:00`. Local times are not supported when querying multiple products from different suppliers. It is required to have either startTime or startTimeLocal to define the start of the time window.</param>
//        /// <param name="endTimeLocal">End time in supplier's local timezone, format is `yyyy-MM-dd HH:mm:ss`, for example `2014-04-01 00:00:00`. Local times are not supported when querying multiple products from different suppliers. It is required to have either endTime or endTimeLocal to define the end of the time window.</param>
//        /// <param name="minAvailability">only load availability for that quantity</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSessionList> CheckAvailabilityAsync(System.Collections.Generic.IEnumerable<string> productCode, string startTime, string endTime, string startTimeLocal, string endTimeLocal, int? minAvailability, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search availability
//        /// </summary>
//        /// <remarks>
//        /// This service returns availability information for a specific date range. The service response contains a list of sessions, including their availability and pricing details.&lt;br&gt;
//        /// <br/>&lt;p&gt;Pricing in the session can be different than the pricing of the products, in a case of a dynamic pricing when a supplier overrides a price for a specific session or a ticket type.&lt;/p&gt;
//        /// <br/>&lt;p&gt;In case of multiple products sharing this session, a session will contain price overrides for all of the shared products. Therefore it is necessary to filer only the price options matching the chosen product code on the client side, when displaying available price options to a customer.&lt;/p&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345. You can request multiple products `productCode=P11111&amp;productCode=P22222&amp;productCode=P33333`, which belong to a single supplier.</param>
//        /// <param name="startTime">Start time in `ISO 8601` format. It is required to have either startTime or startTimeLocal to define the start of the time window.</param>
//        /// <param name="endTime">End time in `ISO 8601` format. It is required to have either endTime or endTimeLocal to define the end of the time window.</param>
//        /// <param name="startTimeLocal">Start time in supplier's local timezone, format is `yyyy-MM-dd HH:mm:ss`, for example `2014-03-01 00:00:00`. Local times are not supported when querying multiple products from different suppliers. It is required to have either startTime or startTimeLocal to define the start of the time window.</param>
//        /// <param name="endTimeLocal">End time in supplier's local timezone, format is `yyyy-MM-dd HH:mm:ss`, for example `2014-04-01 00:00:00`. Local times are not supported when querying multiple products from different suppliers. It is required to have either endTime or endTimeLocal to define the end of the time window.</param>
//        /// <param name="minAvailability">only load availability for that quantity</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSessionList> CheckAvailabilityAsync(System.Collections.Generic.IEnumerable<string> productCode, string startTime, string endTime, string startTimeLocal, string endTimeLocal, int? minAvailability, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Create availability
//        /// </summary>
//        /// <remarks>
//        /// Create a new session - creates availability for a specific startTime. Sessions can be created only for INVENTORY mode
//        /// <br/>products.&lt;br&gt;
//        /// <br/>The endTime, if not specified, will be calculated based on selected product default duration, and the current product
//        /// <br/>price options will be used (if not specified). Does not support resources yet&lt;br&gt;
//        /// <br/>&lt;p&gt;Response is the newly created Session&lt;/p&gt;
//        /// </remarks>
//        /// <returns>newly created Session</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSession> CreateAvailabilityAsync(SessionCreateRequest body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create availability
//        /// </summary>
//        /// <remarks>
//        /// Create a new session - creates availability for a specific startTime. Sessions can be created only for INVENTORY mode
//        /// <br/>products.&lt;br&gt;
//        /// <br/>The endTime, if not specified, will be calculated based on selected product default duration, and the current product
//        /// <br/>price options will be used (if not specified). Does not support resources yet&lt;br&gt;
//        /// <br/>&lt;p&gt;Response is the newly created Session&lt;/p&gt;
//        /// </remarks>
//        /// <returns>newly created Session</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSession> CreateAvailabilityAsync(SessionCreateRequest body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Update availability batch
//        /// </summary>
//        /// <remarks>
//        /// Batch Update availability for a specific product and time period.  
//        /// <br/>This will update availability for all the sessions that start in that time range. &lt;br&gt;
//        /// <br/>Product code is optional, all sessions for all products will be updated if it is empty.
//        /// <br/>You can use this service to blackout periods (I.e. set availability to 0 for a full day).
//        /// <br/>
//        /// <br/>Maximum range is one week.
//        /// <br/>
//        /// <br/>This can only update sessions from products with InventoryMode = SESSION_SEATS. 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    seatsAvailable: 0 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/>OR 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    seats: 30 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/>OR 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    priceOptions: [ 
//        /// <br/>       { 
//        /// <br/>         price: 90, 
//        /// <br/>         label: Adult 
//        /// <br/>       } 
//        /// <br/>     ] 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/> 
//        /// <br/>If you send `seatsAvailable`, sessions will be updated for the current availability to become this number. &lt;br&gt;
//        /// <br/>
//        /// <br/>If you send `seats`, the total seats capacity of sessions will be updated, regardless of how many are already booked. &lt;br&gt;
//        /// <br/>
//        /// <br/>If you send both, only `seatsAvailable` will be used. &lt;br&gt;
//        /// <br/>If you send priceOptions, they will override the default price options of the existing session.
//        /// </remarks>
//        /// <returns>List of updated sessions</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSessionList> BatchUpdateAvailabilityAsync(SessionUpdateBatchRequest body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update availability batch
//        /// </summary>
//        /// <remarks>
//        /// Batch Update availability for a specific product and time period.  
//        /// <br/>This will update availability for all the sessions that start in that time range. &lt;br&gt;
//        /// <br/>Product code is optional, all sessions for all products will be updated if it is empty.
//        /// <br/>You can use this service to blackout periods (I.e. set availability to 0 for a full day).
//        /// <br/>
//        /// <br/>Maximum range is one week.
//        /// <br/>
//        /// <br/>This can only update sessions from products with InventoryMode = SESSION_SEATS. 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    seatsAvailable: 0 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/>OR 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    seats: 30 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/>OR 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    priceOptions: [ 
//        /// <br/>       { 
//        /// <br/>         price: 90, 
//        /// <br/>         label: Adult 
//        /// <br/>       } 
//        /// <br/>     ] 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/> 
//        /// <br/>If you send `seatsAvailable`, sessions will be updated for the current availability to become this number. &lt;br&gt;
//        /// <br/>
//        /// <br/>If you send `seats`, the total seats capacity of sessions will be updated, regardless of how many are already booked. &lt;br&gt;
//        /// <br/>
//        /// <br/>If you send both, only `seatsAvailable` will be used. &lt;br&gt;
//        /// <br/>If you send priceOptions, they will override the default price options of the existing session.
//        /// </remarks>
//        /// <returns>List of updated sessions</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSessionList> BatchUpdateAvailabilityAsync(SessionUpdateBatchRequest body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Update availability
//        /// </summary>
//        /// <remarks>
//        /// Update availability a session starting at a specific local date time
//        /// </remarks>
//        /// <param name="startTimeLocal">Session to update local start time</param>
//        /// <param name="productCode">Product session</param>
//        /// <returns>Updated session</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSession> UpdateAvailabilityStartingAtAsync(string startTimeLocal, string productCode, SessionUpdateRequest body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update availability
//        /// </summary>
//        /// <remarks>
//        /// Update availability a session starting at a specific local date time
//        /// </remarks>
//        /// <param name="startTimeLocal">Session to update local start time</param>
//        /// <param name="productCode">Product session</param>
//        /// <returns>Updated session</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSession> UpdateAvailabilityStartingAtAsync(string startTimeLocal, string productCode, SessionUpdateRequest body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Delete availability
//        /// </summary>
//        /// <remarks>
//        /// Delete a single session starting at a specific local date time
//        /// </remarks>
//        /// <param name="startTimeLocal">Session to delete local start time</param>
//        /// <param name="productCode">Product session</param>
//        /// <returns>Request status</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteSessionStartingAtAsync(string startTimeLocal, string productCode);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete availability
//        /// </summary>
//        /// <remarks>
//        /// Delete a single session starting at a specific local date time
//        /// </remarks>
//        /// <param name="startTimeLocal">Session to delete local start time</param>
//        /// <param name="productCode">Product session</param>
//        /// <returns>Request status</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteSessionStartingAtAsync(string startTimeLocal, string productCode, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Search bookings
//        /// </summary>
//        /// <remarks>
//        /// Search bookings in your account
//        /// </remarks>
//        /// <param name="orderStatus">Order status to filter results</param>
//        /// <param name="search">String to search for. It will be searched in Order number, Customer name, Agent code and payment transaction codes (I.e. voucher Code).</param>
//        /// <param name="productCode">Product code, to only load bookings for a specific product. Multiple values allowed: &amp;productCode=P11111&amp;productCode=P22222</param>
//        /// <param name="minTourStartTime">Only load bookings with a booked time that starts on or after this time. This is not the booking creation date, it is the booked date. `ISO 8601` format</param>
//        /// <param name="maxTourStartTime">Only load bookings with a booked time that starts before or on this time. This is not the booking creation date, it is the booked date. `ISO 8601` format</param>
//        /// <param name="updatedSince">Only load bookings updated after this time. `ISO 8601` format. When an order is created, the dateCreated field is set to the current date and the dateUpdated field is empty. &lt;br/&gt;Thus using updatedSince will return results of orders that have been updated since the specified date/time, but will not include orders that have been created and not updated.</param>
//        /// <param name="minDateCreated">Only load bookings created on or after this date, whether they have been updated or not. `ISO 8601` format</param>
//        /// <param name="maxDateCreated">Only load bookings created on or before this date, whether they have been updated or not. `ISO 8601` format.</param>
//        /// <param name="resellerReference">Only load bookings with specified resellerReference</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBookingList> SearchBookingsAsync(OrderStatus? orderStatus, string search, System.Collections.Generic.IEnumerable<string> productCode, string minTourStartTime, string maxTourStartTime, string updatedSince, string minDateCreated, string maxDateCreated, string resellerReference, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search bookings
//        /// </summary>
//        /// <remarks>
//        /// Search bookings in your account
//        /// </remarks>
//        /// <param name="orderStatus">Order status to filter results</param>
//        /// <param name="search">String to search for. It will be searched in Order number, Customer name, Agent code and payment transaction codes (I.e. voucher Code).</param>
//        /// <param name="productCode">Product code, to only load bookings for a specific product. Multiple values allowed: &amp;productCode=P11111&amp;productCode=P22222</param>
//        /// <param name="minTourStartTime">Only load bookings with a booked time that starts on or after this time. This is not the booking creation date, it is the booked date. `ISO 8601` format</param>
//        /// <param name="maxTourStartTime">Only load bookings with a booked time that starts before or on this time. This is not the booking creation date, it is the booked date. `ISO 8601` format</param>
//        /// <param name="updatedSince">Only load bookings updated after this time. `ISO 8601` format. When an order is created, the dateCreated field is set to the current date and the dateUpdated field is empty. &lt;br/&gt;Thus using updatedSince will return results of orders that have been updated since the specified date/time, but will not include orders that have been created and not updated.</param>
//        /// <param name="minDateCreated">Only load bookings created on or after this date, whether they have been updated or not. `ISO 8601` format</param>
//        /// <param name="maxDateCreated">Only load bookings created on or before this date, whether they have been updated or not. `ISO 8601` format.</param>
//        /// <param name="resellerReference">Only load bookings with specified resellerReference</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBookingList> SearchBookingsAsync(OrderStatus? orderStatus, string search, System.Collections.Generic.IEnumerable<string> productCode, string minTourStartTime, string maxTourStartTime, string updatedSince, string minDateCreated, string maxDateCreated, string resellerReference, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Create booking
//        /// </summary>
//        /// <remarks>
//        /// Create a new booking. Many of payload fields are not required and will be calculated if not specified. Please check the example request payloads for different booking scenarios.
//        /// </remarks>
//        /// <returns>Created booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> CreateBookingAsync(BookingCreate body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create booking
//        /// </summary>
//        /// <remarks>
//        /// Create a new booking. Many of payload fields are not required and will be calculated if not specified. Please check the example request payloads for different booking scenarios.
//        /// </remarks>
//        /// <returns>Created booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> CreateBookingAsync(BookingCreate body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Quote booking
//        /// </summary>
//        /// <remarks>
//        /// Get a quote for a booking. Use this service to validate your Booking object before making the actual booking.  
//        /// <br/>Business rules will be validated, and all amounts and totals will be populated.  
//        /// <br/>It is not a Booking: It does not have any status or booking number. A Quote does not reserve any seat.
//        /// </remarks>
//        /// <returns>Quote booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> QuoteBookingAsync(BookingUpdate body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Quote booking
//        /// </summary>
//        /// <remarks>
//        /// Get a quote for a booking. Use this service to validate your Booking object before making the actual booking.  
//        /// <br/>Business rules will be validated, and all amounts and totals will be populated.  
//        /// <br/>It is not a Booking: It does not have any status or booking number. A Quote does not reserve any seat.
//        /// </remarks>
//        /// <returns>Quote booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> QuoteBookingAsync(BookingUpdate body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get booking
//        /// </summary>
//        /// <remarks>
//        /// Load an existing booking by Order Number
//        /// </remarks>
//        /// <param name="orderNumber">Order number to search</param>
//        /// <returns>Get booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> GetBookingAsync(string orderNumber);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get booking
//        /// </summary>
//        /// <remarks>
//        /// Load an existing booking by Order Number
//        /// </remarks>
//        /// <param name="orderNumber">Order number to search</param>
//        /// <returns>Get booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> GetBookingAsync(string orderNumber, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Update booking
//        /// </summary>
//        /// <remarks>
//        /// When implementing booking update take into consideration below:
//        /// <br/>
//        /// <br/>- only certain fields can currently be updated using API
//        /// <br/>- only manual payment bookings can be updated
//        /// <br/>- update booking in API triggers webhooks and e-mail notifications in the same way as the order update through UI
//        /// <br/>- good practice is to retrieve the full booking object either from create or get booking response, update the necessary fields and pass it whole back to the booking update service. In the future we might support updates of additional fields e.g. add and delete of participants. If you don't send the participants array in the request, we will recognize it as the participants deletion and remove the participant from the existing order
//        /// <br/>- order of the items in arrays have to be preserved for the following fields "items", "participants", since no ids are exposed in the API and thus are matched based on the position in the array again the existing booking object
//        /// <br/>- agent can update supplier orders only if the supplier allow them to *edit orders* when sharing their products
//        /// <br/>
//        /// <br/>The service method does not support a partial update, **full booking object, as it was retrieved from the booking create or search services**, has to be send back to the request payload.
//        /// <br/> Otherwise, the properties or relations which &lt;i&gt;are currently supported (see below)&lt;/i&gt; and they are not sent, will be deleted. 
//        /// <br/> **Order of the items in arrays have to be preserved for the following fields 'items', 'participants'.**
//        /// <br/> 
//        /// <br/>**Currently supported** fields are:
//        /// <br/>
//        /// <br/>- Booking.customer - all customer data can be updated
//        /// <br/>- Booking.field - all 'per booking' booking fields values
//        /// <br/>- Booking.item.participant.field - all 'per participant' booking fields values
//        /// <br/>- Booking.resellerComments - both the booking agent and the supplier can update the booking resellerComments
//        /// <br/>- Booking.resellerReference - both the booking agent and the supplier can update the booking resellerReference
//        /// <br/>- Booking.items.pickupLocation.locationName - both the booking agent and the supplier can update the booking pickup location
//        /// <br/>
//        /// <br/>For the sample requests provided in the right panel, consider the booking object below being retrieved from a POST order or GET order methods:
//        /// <br/>
//        /// <br/>```
//        /// <br/>{
//        /// <br/>	"requestStatus": {
//        /// <br/>		"success": true,
//        /// <br/>		"version": "v1"
//        /// <br/>	},
//        /// <br/>	"booking": {
//        /// <br/>		"orderNumber": "RSKCJ1K",
//        /// <br/>		"status": "CONFIRMED",
//        /// <br/>		"supplierId": 61,
//        /// <br/>		"supplierName": "SUPPLIER_PREMIUM_AU",
//        /// <br/>		"customer": {
//        /// <br/>			"id": 2,
//        /// <br/>			"firstName": "Dusan",
//        /// <br/>			"lastName": "Zahoransky",
//        /// <br/>			"name": "Dusan Zahoransky",
//        /// <br/>			"email": "sample@test.com"
//        /// <br/>		},
//        /// <br/>		"items": [
//        /// <br/>			{
//        /// <br/>				"productName": "activity i session seats pp adult 100f",
//        /// <br/>				"productCode": "P123456",
//        /// <br/>				"startTime": "2017-01-19T09:00:00Z",
//        /// <br/>				"endTime": "2017-01-19T11:00:00Z",
//        /// <br/>				"startTimeLocal": "2017-01-19 20:00:00",
//        /// <br/>				"endTimeLocal": "2017-01-19 22:00:00",
//        /// <br/>				"quantities": [
//        /// <br/>					{
//        /// <br/>						"optionLabel": "Adult",
//        /// <br/>						"optionPrice": 100,
//        /// <br/>						"value": 1
//        /// <br/>					}
//        /// <br/>				],
//        /// <br/>				"totalQuantity": 1,
//        /// <br/>				"amount": 100,
//        /// <br/>				"extras": [
//        /// <br/>				],
//        /// <br/>				"participants": [
//        /// <br/>					{
//        /// <br/>						"fields": [
//        /// <br/>							{
//        /// <br/>								"label": "First Name",
//        /// <br/>								"value": "Janko",
//        /// <br/>								"requiredPerParticipant": false,
//        /// <br/>								"requiredPerBooking": false,
//        /// <br/>								"visiblePerParticipant": false,
//        /// <br/>								"visiblePerBooking": false
//        /// <br/>							},
//        /// <br/>							{
//        /// <br/>								"label": "Last Name",
//        /// <br/>								"value": "Hrasko",
//        /// <br/>								"requiredPerParticipant": false,
//        /// <br/>								"requiredPerBooking": false,
//        /// <br/>								"visiblePerParticipant": false,
//        /// <br/>								"visiblePerBooking": false
//        /// <br/>							}
//        /// <br/>						]
//        /// <br/>					}
//        /// <br/>				],
//        /// <br/>				"subtotal": 100,
//        /// <br/>				"vouchers": [
//        /// <br/>				]
//        /// <br/>			}
//        /// <br/>		],
//        /// <br/>		"totalAmount": 100,
//        /// <br/>		"totalCurrency": "AUD",
//        /// <br/>		"totalPaid": 0,
//        /// <br/>		"totalDue": 100,
//        /// <br/>		"dateCreated": "2017-01-19T03:36:18.462Z",
//        /// <br/>		"dateConfirmed": "2017-01-19T03:36:18.462Z",
//        /// <br/>		"payments": [
//        /// <br/>		],
//        /// <br/>		"fields": [
//        /// <br/>			{
//        /// <br/>				"label": "Special Requirements",
//        /// <br/>				"value": "No meat meal option",
//        /// <br/>				"requiredPerParticipant": false,
//        /// <br/>				"requiredPerBooking": false,
//        /// <br/>				"visiblePerParticipant": false,
//        /// <br/>				"visiblePerBooking": false
//        /// <br/>			}
//        /// <br/>		],
//        /// <br/>		"source": "API",
//        /// <br/>		"vouchers": [
//        /// <br/>		]
//        /// <br/>	}
//        /// <br/>}
//        /// <br/>```
//        /// </remarks>
//        /// <param name="orderNumber">order number of the booking</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> UpdateBookingAsync(string orderNumber, BookingUpdate body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update booking
//        /// </summary>
//        /// <remarks>
//        /// When implementing booking update take into consideration below:
//        /// <br/>
//        /// <br/>- only certain fields can currently be updated using API
//        /// <br/>- only manual payment bookings can be updated
//        /// <br/>- update booking in API triggers webhooks and e-mail notifications in the same way as the order update through UI
//        /// <br/>- good practice is to retrieve the full booking object either from create or get booking response, update the necessary fields and pass it whole back to the booking update service. In the future we might support updates of additional fields e.g. add and delete of participants. If you don't send the participants array in the request, we will recognize it as the participants deletion and remove the participant from the existing order
//        /// <br/>- order of the items in arrays have to be preserved for the following fields "items", "participants", since no ids are exposed in the API and thus are matched based on the position in the array again the existing booking object
//        /// <br/>- agent can update supplier orders only if the supplier allow them to *edit orders* when sharing their products
//        /// <br/>
//        /// <br/>The service method does not support a partial update, **full booking object, as it was retrieved from the booking create or search services**, has to be send back to the request payload.
//        /// <br/> Otherwise, the properties or relations which &lt;i&gt;are currently supported (see below)&lt;/i&gt; and they are not sent, will be deleted. 
//        /// <br/> **Order of the items in arrays have to be preserved for the following fields 'items', 'participants'.**
//        /// <br/> 
//        /// <br/>**Currently supported** fields are:
//        /// <br/>
//        /// <br/>- Booking.customer - all customer data can be updated
//        /// <br/>- Booking.field - all 'per booking' booking fields values
//        /// <br/>- Booking.item.participant.field - all 'per participant' booking fields values
//        /// <br/>- Booking.resellerComments - both the booking agent and the supplier can update the booking resellerComments
//        /// <br/>- Booking.resellerReference - both the booking agent and the supplier can update the booking resellerReference
//        /// <br/>- Booking.items.pickupLocation.locationName - both the booking agent and the supplier can update the booking pickup location
//        /// <br/>
//        /// <br/>For the sample requests provided in the right panel, consider the booking object below being retrieved from a POST order or GET order methods:
//        /// <br/>
//        /// <br/>```
//        /// <br/>{
//        /// <br/>	"requestStatus": {
//        /// <br/>		"success": true,
//        /// <br/>		"version": "v1"
//        /// <br/>	},
//        /// <br/>	"booking": {
//        /// <br/>		"orderNumber": "RSKCJ1K",
//        /// <br/>		"status": "CONFIRMED",
//        /// <br/>		"supplierId": 61,
//        /// <br/>		"supplierName": "SUPPLIER_PREMIUM_AU",
//        /// <br/>		"customer": {
//        /// <br/>			"id": 2,
//        /// <br/>			"firstName": "Dusan",
//        /// <br/>			"lastName": "Zahoransky",
//        /// <br/>			"name": "Dusan Zahoransky",
//        /// <br/>			"email": "sample@test.com"
//        /// <br/>		},
//        /// <br/>		"items": [
//        /// <br/>			{
//        /// <br/>				"productName": "activity i session seats pp adult 100f",
//        /// <br/>				"productCode": "P123456",
//        /// <br/>				"startTime": "2017-01-19T09:00:00Z",
//        /// <br/>				"endTime": "2017-01-19T11:00:00Z",
//        /// <br/>				"startTimeLocal": "2017-01-19 20:00:00",
//        /// <br/>				"endTimeLocal": "2017-01-19 22:00:00",
//        /// <br/>				"quantities": [
//        /// <br/>					{
//        /// <br/>						"optionLabel": "Adult",
//        /// <br/>						"optionPrice": 100,
//        /// <br/>						"value": 1
//        /// <br/>					}
//        /// <br/>				],
//        /// <br/>				"totalQuantity": 1,
//        /// <br/>				"amount": 100,
//        /// <br/>				"extras": [
//        /// <br/>				],
//        /// <br/>				"participants": [
//        /// <br/>					{
//        /// <br/>						"fields": [
//        /// <br/>							{
//        /// <br/>								"label": "First Name",
//        /// <br/>								"value": "Janko",
//        /// <br/>								"requiredPerParticipant": false,
//        /// <br/>								"requiredPerBooking": false,
//        /// <br/>								"visiblePerParticipant": false,
//        /// <br/>								"visiblePerBooking": false
//        /// <br/>							},
//        /// <br/>							{
//        /// <br/>								"label": "Last Name",
//        /// <br/>								"value": "Hrasko",
//        /// <br/>								"requiredPerParticipant": false,
//        /// <br/>								"requiredPerBooking": false,
//        /// <br/>								"visiblePerParticipant": false,
//        /// <br/>								"visiblePerBooking": false
//        /// <br/>							}
//        /// <br/>						]
//        /// <br/>					}
//        /// <br/>				],
//        /// <br/>				"subtotal": 100,
//        /// <br/>				"vouchers": [
//        /// <br/>				]
//        /// <br/>			}
//        /// <br/>		],
//        /// <br/>		"totalAmount": 100,
//        /// <br/>		"totalCurrency": "AUD",
//        /// <br/>		"totalPaid": 0,
//        /// <br/>		"totalDue": 100,
//        /// <br/>		"dateCreated": "2017-01-19T03:36:18.462Z",
//        /// <br/>		"dateConfirmed": "2017-01-19T03:36:18.462Z",
//        /// <br/>		"payments": [
//        /// <br/>		],
//        /// <br/>		"fields": [
//        /// <br/>			{
//        /// <br/>				"label": "Special Requirements",
//        /// <br/>				"value": "No meat meal option",
//        /// <br/>				"requiredPerParticipant": false,
//        /// <br/>				"requiredPerBooking": false,
//        /// <br/>				"visiblePerParticipant": false,
//        /// <br/>				"visiblePerBooking": false
//        /// <br/>			}
//        /// <br/>		],
//        /// <br/>		"source": "API",
//        /// <br/>		"vouchers": [
//        /// <br/>		]
//        /// <br/>	}
//        /// <br/>}
//        /// <br/>```
//        /// </remarks>
//        /// <param name="orderNumber">order number of the booking</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> UpdateBookingAsync(string orderNumber, BookingUpdate body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Cancel booking
//        /// </summary>
//        /// <remarks>
//        /// Cancel an existing booking and send notifications about the cancellation. In case of an Automated Payment booking, will also refund payment.
//        /// </remarks>
//        /// <param name="orderNumber">Order number to cancel</param>
//        /// <param name="sendNotifications">Flag to control if a booking confirmation email should be send to the customer after this booking is canceled. Default (if not specified) is true.</param>
//        /// <returns>Cancel booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> CancelBookingAsync(string orderNumber, bool? sendNotifications);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Cancel booking
//        /// </summary>
//        /// <remarks>
//        /// Cancel an existing booking and send notifications about the cancellation. In case of an Automated Payment booking, will also refund payment.
//        /// </remarks>
//        /// <param name="orderNumber">Order number to cancel</param>
//        /// <param name="sendNotifications">Flag to control if a booking confirmation email should be send to the customer after this booking is canceled. Default (if not specified) is true.</param>
//        /// <returns>Cancel booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseBooking> CancelBookingAsync(string orderNumber, bool? sendNotifications, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Search categories
//        /// </summary>
//        /// <remarks>
//        /// Load all categories matching a search string. If the search string is empty, all categories will be returned.
//        /// <br/>This will only return categories that belong to the company identified from the request's apiKey.
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in category name</param>
//        /// <param name="visible">Return only public categories if it is set to true, only private if it is set to false, or both if it not set.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>Search categories</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCategoryList> SearchCategoriesAsync(string search, bool? visible, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search categories
//        /// </summary>
//        /// <remarks>
//        /// Load all categories matching a search string. If the search string is empty, all categories will be returned.
//        /// <br/>This will only return categories that belong to the company identified from the request's apiKey.
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in category name</param>
//        /// <param name="visible">Return only public categories if it is set to true, only private if it is set to false, or both if it not set.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>Search categories</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCategoryList> SearchCategoriesAsync(string search, bool? visible, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get category
//        /// </summary>
//        /// <remarks>
//        /// Load an existing category by Id
//        /// </remarks>
//        /// <param name="categoryId">Category ID</param>
//        /// <returns>Get category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCategory> GetCategoryAsync(long categoryId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get category
//        /// </summary>
//        /// <remarks>
//        /// Load an existing category by Id
//        /// </remarks>
//        /// <param name="categoryId">Category ID</param>
//        /// <returns>Get category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCategory> GetCategoryAsync(long categoryId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// List category products
//        /// </summary>
//        /// <remarks>
//        /// Load all products within a category.
//        /// </remarks>
//        /// <param name="categoryId">The category id.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>List category products</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProductList> GetCategoryProductsAsync(long categoryId, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// List category products
//        /// </summary>
//        /// <remarks>
//        /// Load all products within a category.
//        /// </remarks>
//        /// <param name="categoryId">The category id.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>List category products</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProductList> GetCategoryProductsAsync(long categoryId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get company by alias
//        /// </summary>
//        /// <remarks>
//        /// Load an existing Company by it's alias in Rezdy. Company alias is not a permanent identifier and can change over time.
//        /// </remarks>
//        /// <param name="companyAlias">Company alias to search for</param>
//        /// <returns>Get company</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCompany> GetCompanyByAliasAsync(string companyAlias);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get company by alias
//        /// </summary>
//        /// <remarks>
//        /// Load an existing Company by it's alias in Rezdy. Company alias is not a permanent identifier and can change over time.
//        /// </remarks>
//        /// <param name="companyAlias">Company alias to search for</param>
//        /// <returns>Get company</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCompany> GetCompanyByAliasAsync(string companyAlias, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get company by name
//        /// </summary>
//        /// <remarks>
//        /// Load an existing Company by it's name in Rezdy. Company name must be given in full name.
//        /// </remarks>
//        /// <param name="companyName">Company name to search for</param>
//        /// <returns>Get company</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCompany> GetCompanyByNameAsync(string companyName);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get company by name
//        /// </summary>
//        /// <remarks>
//        /// Load an existing Company by it's name in Rezdy. Company name must be given in full name.
//        /// </remarks>
//        /// <param name="companyName">Company name to search for</param>
//        /// <returns>Get company</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCompany> GetCompanyByNameAsync(string companyName, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Search customers
//        /// </summary>
//        /// <remarks>
//        /// Search customers in your account
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in First &amp; Last name, company name and email.</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>Search customers</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCustomerList> SearchCustomersAsync(string search, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search customers
//        /// </summary>
//        /// <remarks>
//        /// Search customers in your account
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in First &amp; Last name, company name and email.</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>Search customers</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCustomerList> SearchCustomersAsync(string search, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Create customer
//        /// </summary>
//        /// <remarks>
//        /// Create a new customer
//        /// </remarks>
//        /// <returns>Create customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCustomer> CreateCustomerAsync(Customer body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create customer
//        /// </summary>
//        /// <remarks>
//        /// Create a new customer
//        /// </remarks>
//        /// <returns>Create customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCustomer> CreateCustomerAsync(Customer body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get customer
//        /// </summary>
//        /// <remarks>
//        /// Load an existing customer by Id
//        /// </remarks>
//        /// <param name="customerId">Id to search for</param>
//        /// <returns>Get customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCustomer> GetCustomerAsync(long customerId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get customer
//        /// </summary>
//        /// <remarks>
//        /// Load an existing customer by Id
//        /// </remarks>
//        /// <param name="customerId">Id to search for</param>
//        /// <returns>Get customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCustomer> GetCustomerAsync(long customerId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Delete customer
//        /// </summary>
//        /// <remarks>
//        /// Delete a customer
//        /// </remarks>
//        /// <param name="customerId">Customer Id to delete</param>
//        /// <returns>Delete customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteCustomerAsync(string customerId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete customer
//        /// </summary>
//        /// <remarks>
//        /// Delete a customer
//        /// </remarks>
//        /// <param name="customerId">Customer Id to delete</param>
//        /// <returns>Delete customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteCustomerAsync(string customerId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Search extra
//        /// </summary>
//        /// <remarks>
//        /// Searches extra. To retrieve all extras, omit the searchString parameter
//        /// </remarks>
//        /// <param name="searchString">Search string of extra name</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseExtraList> SearchExtrasAsync(string searchString);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search extra
//        /// </summary>
//        /// <remarks>
//        /// Searches extra. To retrieve all extras, omit the searchString parameter
//        /// </remarks>
//        /// <param name="searchString">Search string of extra name</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseExtraList> SearchExtrasAsync(string searchString, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Create extra
//        /// </summary>
//        /// <remarks>
//        /// Creates a new extra.
//        /// </remarks>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseExtra> CreateExtraAsync(ExtraCreateRequest body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create extra
//        /// </summary>
//        /// <remarks>
//        /// Creates a new extra.
//        /// </remarks>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseExtra> CreateExtraAsync(ExtraCreateRequest body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Retrieve an extra
//        /// </summary>
//        /// <remarks>
//        /// Retrieve an extra by Id
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseExtra> GetExtraByIdAsync(long extraId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Retrieve an extra
//        /// </summary>
//        /// <remarks>
//        /// Retrieve an extra by Id
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseExtra> GetExtraByIdAsync(long extraId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Update extra
//        /// </summary>
//        /// <remarks>
//        /// Updates an extra. The extra ID can change when updating it, since there are business rules to protect the Order and Product consistency.
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseExtra> UpdateExtraByIdAsync(long extraId, ExtraRequest body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update extra
//        /// </summary>
//        /// <remarks>
//        /// Updates an extra. The extra ID can change when updating it, since there are business rules to protect the Order and Product consistency.
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseExtra> UpdateExtraByIdAsync(long extraId, ExtraRequest body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Delete extra
//        /// </summary>
//        /// <remarks>
//        /// Deletes an extra
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteExtraAsync(long extraId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete extra
//        /// </summary>
//        /// <remarks>
//        /// Deletes an extra
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteExtraAsync(long extraId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get order item check-in status
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number : optional, is specified, only the status of the order item session from the specified order will be retrieved.</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCheckIn> CheckinOrderSessionStatusAsync(string orderNumber, string productCode, string startTime, string startTimeLocal);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get order item check-in status
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number : optional, is specified, only the status of the order item session from the specified order will be retrieved.</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCheckIn> CheckinOrderSessionStatusAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Check-in order item
//        /// </summary>
//        /// <remarks>
//        /// Place Check-in a / No show flag for the specified order item. The order item is identified by order number, product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> CheckinOrderSessionAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, bool? checkin);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Check-in order item
//        /// </summary>
//        /// <remarks>
//        /// Place Check-in a / No show flag for the specified order item. The order item is identified by order number, product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> CheckinOrderSessionAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, bool? checkin, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Remove order item check-in
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> CancelCheckinOrderSessionAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, bool? checkin);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove order item check-in
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> CancelCheckinOrderSessionAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, bool? checkin, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get session check-in status
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCheckIn> CheckinSessionStatusAsync(string productCode, string startTime, string startTimeLocal);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get session check-in status
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseCheckIn> CheckinSessionStatusAsync(string productCode, string startTime, string startTimeLocal, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Check-in session
//        /// </summary>
//        /// <remarks>
//        /// Store Check-in / No show flag for everyone in a specified session. The session is identified by product code and start time (or start time local).
//        /// <br/>&lt;br&gt;Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">productCode Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> CheckinSessionAsync(string productCode, string startTime, string startTimeLocal, bool? checkin);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Check-in session
//        /// </summary>
//        /// <remarks>
//        /// Store Check-in / No show flag for everyone in a specified session. The session is identified by product code and start time (or start time local).
//        /// <br/>&lt;br&gt;Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">productCode Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> CheckinSessionAsync(string productCode, string startTime, string startTimeLocal, bool? checkin, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Remove session check-in
//        /// </summary>
//        /// <remarks>
//        /// Remove Check-in / No show flag from everyone in the whole session. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> CancelCheckinSessionAsync(string productCode, string startTime, string startTimeLocal);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove session check-in
//        /// </summary>
//        /// <remarks>
//        /// Remove Check-in / No show flag from everyone in the whole session. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> CancelCheckinSessionAsync(string productCode, string startTime, string startTimeLocal, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Search pickup list
//        /// </summary>
//        /// <remarks>
//        /// Searches pickup lists. To retrieve all pick up lists, omit the searchString parameter
//        /// </remarks>
//        /// <param name="searchString">Search string of pickup list name or location name</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupListList> SearchPickupListsAsync(string searchString);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search pickup list
//        /// </summary>
//        /// <remarks>
//        /// Searches pickup lists. To retrieve all pick up lists, omit the searchString parameter
//        /// </remarks>
//        /// <param name="searchString">Search string of pickup list name or location name</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupListList> SearchPickupListsAsync(string searchString, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Create pickup list
//        /// </summary>
//        /// <remarks>
//        /// Creates a new pickup list
//        /// </remarks>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupList> CreatePickupListAsync(PickupList body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create pickup list
//        /// </summary>
//        /// <remarks>
//        /// Creates a new pickup list
//        /// </remarks>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupList> CreatePickupListAsync(PickupList body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Retrieve pickup list
//        /// </summary>
//        /// <remarks>
//        /// Retrieves a pickup list
//        /// </remarks>
//        /// <param name="pickupListId">Pickup list ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupList> GetPickupListAsync(long pickupListId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Retrieve pickup list
//        /// </summary>
//        /// <remarks>
//        /// Retrieves a pickup list
//        /// </remarks>
//        /// <param name="pickupListId">Pickup list ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupList> GetPickupListAsync(long pickupListId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Update pickup list
//        /// </summary>
//        /// <remarks>
//        /// Updates a pickup list. This service should not be used for partial updates. A full pickup list object with the desired pick up locations should be passed as input
//        /// </remarks>
//        /// <param name="pickupListId">Pickup list ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupList> UpdatePickupListAsync(long pickupListId, PickupList body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update pickup list
//        /// </summary>
//        /// <remarks>
//        /// Updates a pickup list. This service should not be used for partial updates. A full pickup list object with the desired pick up locations should be passed as input
//        /// </remarks>
//        /// <param name="pickupListId">Pickup list ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupList> UpdatePickupListAsync(long pickupListId, PickupList body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Delete pickup list
//        /// </summary>
//        /// <remarks>
//        /// Deletes a pickup list
//        /// </remarks>
//        /// <param name="pickupListId">Pickup ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeletePickupListAsync(long pickupListId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete pickup list
//        /// </summary>
//        /// <remarks>
//        /// Deletes a pickup list
//        /// </remarks>
//        /// <param name="pickupListId">Pickup ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeletePickupListAsync(long pickupListId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Search products
//        /// </summary>
//        /// <remarks>
//        /// Searches a product that matches a search string.&lt;br&gt; Load all products matching a search string. If the search string is empty, all your products will be returned.&lt;br&gt;
//        /// <br/>Use this service when acting as a supplier, to load your own products.&lt;br&gt;
//        /// <br/>If you're acting as an agent, use the /products/marketplace service&lt;br&gt;
//        /// </remarks>
//        /// <param name="search">search String to search for. It will be searched in product name, product code and internal code.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProductList> SearchProductsAsync(string search, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search products
//        /// </summary>
//        /// <remarks>
//        /// Searches a product that matches a search string.&lt;br&gt; Load all products matching a search string. If the search string is empty, all your products will be returned.&lt;br&gt;
//        /// <br/>Use this service when acting as a supplier, to load your own products.&lt;br&gt;
//        /// <br/>If you're acting as an agent, use the /products/marketplace service&lt;br&gt;
//        /// </remarks>
//        /// <param name="search">search String to search for. It will be searched in product name, product code and internal code.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProductList> SearchProductsAsync(string search, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Create product
//        /// </summary>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProduct> CreateProductAsync(ProductCreateRequest body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create product
//        /// </summary>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProduct> CreateProductAsync(ProductCreateRequest body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get product
//        /// </summary>
//        /// <remarks>
//        /// Load an existing product by Product Code
//        /// </remarks>
//        /// <param name="productCode">Product Code to search for</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProduct> GetProductAsync(string productCode);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get product
//        /// </summary>
//        /// <remarks>
//        /// Load an existing product by Product Code
//        /// </remarks>
//        /// <param name="productCode">Product Code to search for</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProduct> GetProductAsync(string productCode, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Update product
//        /// </summary>
//        /// <remarks>
//        /// Updates a product.
//        /// <br/>
//        /// <br/>When updating price options, the full list of existing price options must be supplied in the update. Otherwise the system will remove any missing price options in the request from the product.
//        /// <br/>
//        /// <br/>For instance, if a product has 2 price options Adult and Child but the update request only contains Adult, the Child price option will be removed from the product.&lt;br&gt;
//        /// <br/>Adding a price option works the same way. If the update request contains an extra price option, it will be added to the product.
//        /// <br/>
//        /// <br/>When price option values are updated via API, this will override all existing price in availability (session) to reflect the product price. 
//        /// <br/>If a different price in calendar/session is required to the product price, please make the changes to the product directly in your Rezdy account and select `do not change session price` in the page that follows after saving your changes.,
//        /// </remarks>
//        /// <param name="productCode">product's product code to be updated</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProduct> UpdateProductAsync(string productCode, ProductUpdateRequest body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update product
//        /// </summary>
//        /// <remarks>
//        /// Updates a product.
//        /// <br/>
//        /// <br/>When updating price options, the full list of existing price options must be supplied in the update. Otherwise the system will remove any missing price options in the request from the product.
//        /// <br/>
//        /// <br/>For instance, if a product has 2 price options Adult and Child but the update request only contains Adult, the Child price option will be removed from the product.&lt;br&gt;
//        /// <br/>Adding a price option works the same way. If the update request contains an extra price option, it will be added to the product.
//        /// <br/>
//        /// <br/>When price option values are updated via API, this will override all existing price in availability (session) to reflect the product price. 
//        /// <br/>If a different price in calendar/session is required to the product price, please make the changes to the product directly in your Rezdy account and select `do not change session price` in the page that follows after saving your changes.,
//        /// </remarks>
//        /// <param name="productCode">product's product code to be updated</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseProduct> UpdateProductAsync(string productCode, ProductUpdateRequest body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Delete product
//        /// </summary>
//        /// <remarks>
//        /// Deletes a product.
//        /// </remarks>
//        /// <param name="productCode">product's product code to be deleted</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteProductAsync(string productCode);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete product
//        /// </summary>
//        /// <remarks>
//        /// Deletes a product.
//        /// </remarks>
//        /// <param name="productCode">product's product code to be deleted</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteProductAsync(string productCode, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Add product image
//        /// </summary>
//        /// <remarks>
//        /// First, a product has to be created using```POST /products```, the response contain a product object upon a successful creation. Use the product code to for the add/delete images URLs.
//        /// <br/>
//        /// <br/>Use a standard file upload request (multipart form data) with a file attachment, parameter name is `file` as the call payload, and also a mandatory filename. If you have multiple images, you need to make one separate call for each image.
//        /// <br/>
//        /// <br/>A successful response contains generated image URLs including different image dimension and the image Id. Use the image Id to delete the image, if you want to remove it from the product.
//        /// <br/>
//        /// <br/>### Request example
//        /// <br/>
//        /// <br/>File has to be specified either in the attachment, part of the form-data parameter 'file', or in the attachment, as a form-data parameter 'filename', which is common format for PHP frameworks, which are sending an array of attachments.
//        /// <br/>
//        /// <br/>Request:
//        /// <br/>```
//        /// <br/>POST https://api.rezdy.com/latest/products/P12345/images?apiKey=123456789XYZ
//        /// <br/>```
//        /// <br/>content-type=[multipart/form-data; boundary=----WebKitFormBoundarymDtt4W0lhmAsKFkZ]
//        /// <br/>
//        /// <br/>```
//        /// <br/>------WebKitFormBoundarymDtt4W0lhmAsKFkZ
//        /// <br/>Content-Disposition: form-data; name="file"; filename="myImage.png"
//        /// <br/>Content-Type: image/png
//        /// <br/>...
//        /// <br/>IMAGE BINARY DATA
//        /// <br/>...
//        /// <br/>------WebKitFormBoundarymDtt4W0lhmAsKFkZ--
//        /// <br/>```
//        /// </remarks>
//        /// <param name="productCode">product to add the image to</param>
//        /// <param name="file">Image file to be uploaded</param>
//        /// <param name="filename">Optional image name override</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseImage> AddProductImageAsync(string productCode, object file, string filename);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Add product image
//        /// </summary>
//        /// <remarks>
//        /// First, a product has to be created using```POST /products```, the response contain a product object upon a successful creation. Use the product code to for the add/delete images URLs.
//        /// <br/>
//        /// <br/>Use a standard file upload request (multipart form data) with a file attachment, parameter name is `file` as the call payload, and also a mandatory filename. If you have multiple images, you need to make one separate call for each image.
//        /// <br/>
//        /// <br/>A successful response contains generated image URLs including different image dimension and the image Id. Use the image Id to delete the image, if you want to remove it from the product.
//        /// <br/>
//        /// <br/>### Request example
//        /// <br/>
//        /// <br/>File has to be specified either in the attachment, part of the form-data parameter 'file', or in the attachment, as a form-data parameter 'filename', which is common format for PHP frameworks, which are sending an array of attachments.
//        /// <br/>
//        /// <br/>Request:
//        /// <br/>```
//        /// <br/>POST https://api.rezdy.com/latest/products/P12345/images?apiKey=123456789XYZ
//        /// <br/>```
//        /// <br/>content-type=[multipart/form-data; boundary=----WebKitFormBoundarymDtt4W0lhmAsKFkZ]
//        /// <br/>
//        /// <br/>```
//        /// <br/>------WebKitFormBoundarymDtt4W0lhmAsKFkZ
//        /// <br/>Content-Disposition: form-data; name="file"; filename="myImage.png"
//        /// <br/>Content-Type: image/png
//        /// <br/>...
//        /// <br/>IMAGE BINARY DATA
//        /// <br/>...
//        /// <br/>------WebKitFormBoundarymDtt4W0lhmAsKFkZ--
//        /// <br/>```
//        /// </remarks>
//        /// <param name="productCode">product to add the image to</param>
//        /// <param name="file">Image file to be uploaded</param>
//        /// <param name="filename">Optional image name override</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseImage> AddProductImageAsync(string productCode, object file, string filename, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Remove product Image
//        /// </summary>
//        /// <remarks>
//        /// Removes product Image. Filename is mandatory. It has to be specified either in the attachment, part of the form-data parameter 'file', or in the attachment, as a form-data parameter 'filename', which is common format for PHP frameworks, which are sending an array of attachments.
//        /// </remarks>
//        /// <param name="productCode">product's product code for the image to be uploaded to</param>
//        /// <param name="mediaId">image's id to be uploaded</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteProductImageAsync(string productCode, long mediaId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove product Image
//        /// </summary>
//        /// <remarks>
//        /// Removes product Image. Filename is mandatory. It has to be specified either in the attachment, part of the form-data parameter 'file', or in the attachment, as a form-data parameter 'filename', which is common format for PHP frameworks, which are sending an array of attachments.
//        /// </remarks>
//        /// <param name="productCode">product's product code for the image to be uploaded to</param>
//        /// <param name="mediaId">image's id to be uploaded</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseNoData> DeleteProductImageAsync(string productCode, long mediaId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get product pickups
//        /// </summary>
//        /// <remarks>
//        /// Gets a list of pickup locations configured for this product.
//        /// </remarks>
//        /// <param name="productCode">productCode Product Code to search for</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupLocationList> GetProductPickupLocationsAsync(string productCode, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get product pickups
//        /// </summary>
//        /// <remarks>
//        /// Gets a list of pickup locations configured for this product.
//        /// </remarks>
//        /// <param name="productCode">productCode Product Code to search for</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponsePickupLocationList> GetProductPickupLocationsAsync(string productCode, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Search rates
//        /// </summary>
//        /// <remarks>
//        /// Searches rates based on rate name and product code. If rateName and productCode are not specified, then it will return all rates belonging to the supplier
//        /// </remarks>
//        /// <param name="rateName">Rate name</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRateList> SearchRatesByNameAndProductCodeAsync(string rateName, string productCode);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search rates
//        /// </summary>
//        /// <remarks>
//        /// Searches rates based on rate name and product code. If rateName and productCode are not specified, then it will return all rates belonging to the supplier
//        /// </remarks>
//        /// <param name="rateName">Rate name</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRateList> SearchRatesByNameAndProductCodeAsync(string rateName, string productCode, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get rate
//        /// </summary>
//        /// <remarks>
//        /// Retrieves a rate based on its ID
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> GetRatesByIdAsync(long rateId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get rate
//        /// </summary>
//        /// <remarks>
//        /// Retrieves a rate based on its ID
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> GetRatesByIdAsync(long rateId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Add product
//        /// </summary>
//        /// <remarks>
//        /// Adds a product to the specified rate
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> AddProductAsync(long rateId, string productCode, ProductRate body);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Add product
//        /// </summary>
//        /// <remarks>
//        /// Adds a product to the specified rate
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> AddProductAsync(long rateId, string productCode, ProductRate body, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Remove product
//        /// </summary>
//        /// <remarks>
//        /// Removes a product from the specified rate
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> RemoveProductAsync(long rateId, string productCode);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove product
//        /// </summary>
//        /// <remarks>
//        /// Removes a product from the specified rate
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> RemoveProductAsync(long rateId, string productCode, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// List resources
//        /// </summary>
//        /// <remarks>
//        /// Retrieve all supplier resources. Pagination using limit and offset is applied to the result list.
//        /// </remarks>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseResourceList> GetAllSupplierResourcesAsync(int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// List resources
//        /// </summary>
//        /// <remarks>
//        /// Retrieve all supplier resources. Pagination using limit and offset is applied to the result list.
//        /// </remarks>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseResourceList> GetAllSupplierResourcesAsync(int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get session resources
//        /// </summary>
//        /// <remarks>
//        /// Retrieve resources assigned to the session. Session has to be specified either by sessionId or by product code and start time (or start time local).
//        /// </remarks>
//        /// <param name="sessionId">Session ID</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseResourceList> GetResourcesForSessionAsync(long? sessionId, string productCode, string startTime, string startTimeLocal, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get session resources
//        /// </summary>
//        /// <remarks>
//        /// Retrieve resources assigned to the session. Session has to be specified either by sessionId or by product code and start time (or start time local).
//        /// </remarks>
//        /// <param name="sessionId">Session ID</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseResourceList> GetResourcesForSessionAsync(long? sessionId, string productCode, string startTime, string startTimeLocal, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Add session resource
//        /// </summary>
//        /// <remarks>
//        /// Add the resource to the session.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="sessionId">Session ID</param>
//        /// <param name="resourceOrder">Order of the resource in the session. Optional, if not specified, will by calculated by the system to fill the first gap if gap is found, or the highest number among existing resources.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseResource> AddToSessionAsync(long resourceId, long sessionId, int? resourceOrder);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Add session resource
//        /// </summary>
//        /// <remarks>
//        /// Add the resource to the session.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="sessionId">Session ID</param>
//        /// <param name="resourceOrder">Order of the resource in the session. Optional, if not specified, will by calculated by the system to fill the first gap if gap is found, or the highest number among existing resources.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseResource> AddToSessionAsync(long resourceId, long sessionId, int? resourceOrder, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Remove session resource
//        /// </summary>
//        /// <remarks>
//        /// Removes the resource from the session.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="sessionId">Session ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseResource> RemoveFromSessionAsync(long resourceId, long sessionId);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove session resource
//        /// </summary>
//        /// <remarks>
//        /// Removes the resource from the session.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="sessionId">Session ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseResource> RemoveFromSessionAsync(long resourceId, long sessionId, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get resource sessions
//        /// </summary>
//        /// <remarks>
//        /// Retrieves all sessions for the specified resource within the start/end datetime range. Pagination using limit and offset is applied to the result list.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="endTime">Session end time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="endTimeLocal">Session end time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSessionList> GetSessionsForResourceAsync(long resourceId, string startTime, string endTime, string startTimeLocal, string endTimeLocal, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get resource sessions
//        /// </summary>
//        /// <remarks>
//        /// Retrieves all sessions for the specified resource within the start/end datetime range. Pagination using limit and offset is applied to the result list.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="endTime">Session end time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="endTimeLocal">Session end time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseSessionList> GetSessionsForResourceAsync(long resourceId, string startTime, string endTime, string startTimeLocal, string endTimeLocal, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Search vouchers
//        /// </summary>
//        /// <remarks>
//        /// Search vouchers in your account
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in voucher codes</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseVoucherList> SearchVouchersAsync(string search, int? limit, int? offset);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search vouchers
//        /// </summary>
//        /// <remarks>
//        /// Search vouchers in your account
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in voucher codes</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseVoucherList> SearchVouchersAsync(string search, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

//        /// <summary>
//        /// Get voucher
//        /// </summary>
//        /// <remarks>
//        /// Load an existing voucher by Voucher Code
//        /// </remarks>
//        /// <param name="voucherCode">Voucher code to search for.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseVoucher> GetVoucherAsync(string voucherCode);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get voucher
//        /// </summary>
//        /// <remarks>
//        /// Load an existing voucher by Voucher Code
//        /// </remarks>
//        /// <param name="voucherCode">Voucher code to search for.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseVoucher> GetVoucherAsync(string voucherCode, System.Threading.CancellationToken cancellationToken);

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Client : IClient
//    {
//        #pragma warning disable 8618
//        private string _baseUrl;
//        #pragma warning restore 8618

//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public Client(System.Net.Http.HttpClient httpClient)
//    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            BaseUrl = "https://api.rezdy.com";
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        public string BaseUrl
//        {
//            get { return _baseUrl; }
//            set
//            {
//                _baseUrl = value;
//                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                    _baseUrl += '/';
//            }
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Search availability
//        /// </summary>
//        /// <remarks>
//        /// This service returns availability information for a specific date range. The service response contains a list of sessions, including their availability and pricing details.&lt;br&gt;
//        /// <br/>&lt;p&gt;Pricing in the session can be different than the pricing of the products, in a case of a dynamic pricing when a supplier overrides a price for a specific session or a ticket type.&lt;/p&gt;
//        /// <br/>&lt;p&gt;In case of multiple products sharing this session, a session will contain price overrides for all of the shared products. Therefore it is necessary to filer only the price options matching the chosen product code on the client side, when displaying available price options to a customer.&lt;/p&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345. You can request multiple products `productCode=P11111&amp;productCode=P22222&amp;productCode=P33333`, which belong to a single supplier.</param>
//        /// <param name="startTime">Start time in `ISO 8601` format. It is required to have either startTime or startTimeLocal to define the start of the time window.</param>
//        /// <param name="endTime">End time in `ISO 8601` format. It is required to have either endTime or endTimeLocal to define the end of the time window.</param>
//        /// <param name="startTimeLocal">Start time in supplier's local timezone, format is `yyyy-MM-dd HH:mm:ss`, for example `2014-03-01 00:00:00`. Local times are not supported when querying multiple products from different suppliers. It is required to have either startTime or startTimeLocal to define the start of the time window.</param>
//        /// <param name="endTimeLocal">End time in supplier's local timezone, format is `yyyy-MM-dd HH:mm:ss`, for example `2014-04-01 00:00:00`. Local times are not supported when querying multiple products from different suppliers. It is required to have either endTime or endTimeLocal to define the end of the time window.</param>
//        /// <param name="minAvailability">only load availability for that quantity</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseSessionList> CheckAvailabilityAsync(System.Collections.Generic.IEnumerable<string> productCode, string startTime, string endTime, string startTimeLocal, string endTimeLocal, int? minAvailability, int? limit, int? offset)
//        {
//            return CheckAvailabilityAsync(productCode, startTime, endTime, startTimeLocal, endTimeLocal, minAvailability, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search availability
//        /// </summary>
//        /// <remarks>
//        /// This service returns availability information for a specific date range. The service response contains a list of sessions, including their availability and pricing details.&lt;br&gt;
//        /// <br/>&lt;p&gt;Pricing in the session can be different than the pricing of the products, in a case of a dynamic pricing when a supplier overrides a price for a specific session or a ticket type.&lt;/p&gt;
//        /// <br/>&lt;p&gt;In case of multiple products sharing this session, a session will contain price overrides for all of the shared products. Therefore it is necessary to filer only the price options matching the chosen product code on the client side, when displaying available price options to a customer.&lt;/p&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345. You can request multiple products `productCode=P11111&amp;productCode=P22222&amp;productCode=P33333`, which belong to a single supplier.</param>
//        /// <param name="startTime">Start time in `ISO 8601` format. It is required to have either startTime or startTimeLocal to define the start of the time window.</param>
//        /// <param name="endTime">End time in `ISO 8601` format. It is required to have either endTime or endTimeLocal to define the end of the time window.</param>
//        /// <param name="startTimeLocal">Start time in supplier's local timezone, format is `yyyy-MM-dd HH:mm:ss`, for example `2014-03-01 00:00:00`. Local times are not supported when querying multiple products from different suppliers. It is required to have either startTime or startTimeLocal to define the start of the time window.</param>
//        /// <param name="endTimeLocal">End time in supplier's local timezone, format is `yyyy-MM-dd HH:mm:ss`, for example `2014-04-01 00:00:00`. Local times are not supported when querying multiple products from different suppliers. It is required to have either endTime or endTimeLocal to define the end of the time window.</param>
//        /// <param name="minAvailability">only load availability for that quantity</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseSessionList> CheckAvailabilityAsync(System.Collections.Generic.IEnumerable<string> productCode, string startTime, string endTime, string startTimeLocal, string endTimeLocal, int? minAvailability, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/availability"
//                    urlBuilder_.Append("v1/availability");
//                    urlBuilder_.Append('?');
//                    urlBuilder_.Append(System.Uri.EscapeDataString("productCode") + "=");
//                    foreach (var item_ in productCode)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(",");
//                    }
//                    urlBuilder_.Length--;
//                    urlBuilder_.Append("&");
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (endTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("endTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (endTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("endTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (minAvailability != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("minAvailability")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minAvailability, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseSessionList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create availability
//        /// </summary>
//        /// <remarks>
//        /// Create a new session - creates availability for a specific startTime. Sessions can be created only for INVENTORY mode
//        /// <br/>products.&lt;br&gt;
//        /// <br/>The endTime, if not specified, will be calculated based on selected product default duration, and the current product
//        /// <br/>price options will be used (if not specified). Does not support resources yet&lt;br&gt;
//        /// <br/>&lt;p&gt;Response is the newly created Session&lt;/p&gt;
//        /// </remarks>
//        /// <returns>newly created Session</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseSession> CreateAvailabilityAsync(SessionCreateRequest body)
//        {
//            return CreateAvailabilityAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create availability
//        /// </summary>
//        /// <remarks>
//        /// Create a new session - creates availability for a specific startTime. Sessions can be created only for INVENTORY mode
//        /// <br/>products.&lt;br&gt;
//        /// <br/>The endTime, if not specified, will be calculated based on selected product default duration, and the current product
//        /// <br/>price options will be used (if not specified). Does not support resources yet&lt;br&gt;
//        /// <br/>&lt;p&gt;Response is the newly created Session&lt;/p&gt;
//        /// </remarks>
//        /// <returns>newly created Session</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseSession> CreateAvailabilityAsync(SessionCreateRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/availability"
//                    urlBuilder_.Append("v1/availability");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseSession>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update availability batch
//        /// </summary>
//        /// <remarks>
//        /// Batch Update availability for a specific product and time period.  
//        /// <br/>This will update availability for all the sessions that start in that time range. &lt;br&gt;
//        /// <br/>Product code is optional, all sessions for all products will be updated if it is empty.
//        /// <br/>You can use this service to blackout periods (I.e. set availability to 0 for a full day).
//        /// <br/>
//        /// <br/>Maximum range is one week.
//        /// <br/>
//        /// <br/>This can only update sessions from products with InventoryMode = SESSION_SEATS. 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    seatsAvailable: 0 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/>OR 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    seats: 30 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/>OR 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    priceOptions: [ 
//        /// <br/>       { 
//        /// <br/>         price: 90, 
//        /// <br/>         label: Adult 
//        /// <br/>       } 
//        /// <br/>     ] 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/> 
//        /// <br/>If you send `seatsAvailable`, sessions will be updated for the current availability to become this number. &lt;br&gt;
//        /// <br/>
//        /// <br/>If you send `seats`, the total seats capacity of sessions will be updated, regardless of how many are already booked. &lt;br&gt;
//        /// <br/>
//        /// <br/>If you send both, only `seatsAvailable` will be used. &lt;br&gt;
//        /// <br/>If you send priceOptions, they will override the default price options of the existing session.
//        /// </remarks>
//        /// <returns>List of updated sessions</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseSessionList> BatchUpdateAvailabilityAsync(SessionUpdateBatchRequest body)
//        {
//            return BatchUpdateAvailabilityAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update availability batch
//        /// </summary>
//        /// <remarks>
//        /// Batch Update availability for a specific product and time period.  
//        /// <br/>This will update availability for all the sessions that start in that time range. &lt;br&gt;
//        /// <br/>Product code is optional, all sessions for all products will be updated if it is empty.
//        /// <br/>You can use this service to blackout periods (I.e. set availability to 0 for a full day).
//        /// <br/>
//        /// <br/>Maximum range is one week.
//        /// <br/>
//        /// <br/>This can only update sessions from products with InventoryMode = SESSION_SEATS. 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    seatsAvailable: 0 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/>OR 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    seats: 30 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/>OR 
//        /// <br/>```
//        /// <br/>{ 
//        /// <br/>    startTime: 2014-11-11T00:00:00Z, 
//        /// <br/>    endTime: 2014-11-11T23:59:59Z, 
//        /// <br/>    productCode: P123456, 
//        /// <br/>    priceOptions: [ 
//        /// <br/>       { 
//        /// <br/>         price: 90, 
//        /// <br/>         label: Adult 
//        /// <br/>       } 
//        /// <br/>     ] 
//        /// <br/>} 
//        /// <br/>```
//        /// <br/> 
//        /// <br/>If you send `seatsAvailable`, sessions will be updated for the current availability to become this number. &lt;br&gt;
//        /// <br/>
//        /// <br/>If you send `seats`, the total seats capacity of sessions will be updated, regardless of how many are already booked. &lt;br&gt;
//        /// <br/>
//        /// <br/>If you send both, only `seatsAvailable` will be used. &lt;br&gt;
//        /// <br/>If you send priceOptions, they will override the default price options of the existing session.
//        /// </remarks>
//        /// <returns>List of updated sessions</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseSessionList> BatchUpdateAvailabilityAsync(SessionUpdateBatchRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/availability/batch"
//                    urlBuilder_.Append("v1/availability/batch");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseSessionList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update availability
//        /// </summary>
//        /// <remarks>
//        /// Update availability a session starting at a specific local date time
//        /// </remarks>
//        /// <param name="startTimeLocal">Session to update local start time</param>
//        /// <param name="productCode">Product session</param>
//        /// <returns>Updated session</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseSession> UpdateAvailabilityStartingAtAsync(string startTimeLocal, string productCode, SessionUpdateRequest body)
//        {
//            return UpdateAvailabilityStartingAtAsync(startTimeLocal, productCode, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update availability
//        /// </summary>
//        /// <remarks>
//        /// Update availability a session starting at a specific local date time
//        /// </remarks>
//        /// <param name="startTimeLocal">Session to update local start time</param>
//        /// <param name="productCode">Product session</param>
//        /// <returns>Updated session</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseSession> UpdateAvailabilityStartingAtAsync(string startTimeLocal, string productCode, SessionUpdateRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (startTimeLocal == null)
//                throw new System.ArgumentNullException("startTimeLocal");

//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/availability/product/{productCode}/startTimeLocal/{startTimeLocal}"
//                    urlBuilder_.Append("v1/availability/product/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/startTimeLocal/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseSession>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete availability
//        /// </summary>
//        /// <remarks>
//        /// Delete a single session starting at a specific local date time
//        /// </remarks>
//        /// <param name="startTimeLocal">Session to delete local start time</param>
//        /// <param name="productCode">Product session</param>
//        /// <returns>Request status</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> DeleteSessionStartingAtAsync(string startTimeLocal, string productCode)
//        {
//            return DeleteSessionStartingAtAsync(startTimeLocal, productCode, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete availability
//        /// </summary>
//        /// <remarks>
//        /// Delete a single session starting at a specific local date time
//        /// </remarks>
//        /// <param name="startTimeLocal">Session to delete local start time</param>
//        /// <param name="productCode">Product session</param>
//        /// <returns>Request status</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> DeleteSessionStartingAtAsync(string startTimeLocal, string productCode, System.Threading.CancellationToken cancellationToken)
//        {
//            if (startTimeLocal == null)
//                throw new System.ArgumentNullException("startTimeLocal");

//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/availability/product/{productCode}/startTimeLocal/{startTimeLocal}"
//                    urlBuilder_.Append("v1/availability/product/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/startTimeLocal/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Search bookings
//        /// </summary>
//        /// <remarks>
//        /// Search bookings in your account
//        /// </remarks>
//        /// <param name="orderStatus">Order status to filter results</param>
//        /// <param name="search">String to search for. It will be searched in Order number, Customer name, Agent code and payment transaction codes (I.e. voucher Code).</param>
//        /// <param name="productCode">Product code, to only load bookings for a specific product. Multiple values allowed: &amp;productCode=P11111&amp;productCode=P22222</param>
//        /// <param name="minTourStartTime">Only load bookings with a booked time that starts on or after this time. This is not the booking creation date, it is the booked date. `ISO 8601` format</param>
//        /// <param name="maxTourStartTime">Only load bookings with a booked time that starts before or on this time. This is not the booking creation date, it is the booked date. `ISO 8601` format</param>
//        /// <param name="updatedSince">Only load bookings updated after this time. `ISO 8601` format. When an order is created, the dateCreated field is set to the current date and the dateUpdated field is empty. &lt;br/&gt;Thus using updatedSince will return results of orders that have been updated since the specified date/time, but will not include orders that have been created and not updated.</param>
//        /// <param name="minDateCreated">Only load bookings created on or after this date, whether they have been updated or not. `ISO 8601` format</param>
//        /// <param name="maxDateCreated">Only load bookings created on or before this date, whether they have been updated or not. `ISO 8601` format.</param>
//        /// <param name="resellerReference">Only load bookings with specified resellerReference</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseBookingList> SearchBookingsAsync(OrderStatus? orderStatus, string search, System.Collections.Generic.IEnumerable<string> productCode, string minTourStartTime, string maxTourStartTime, string updatedSince, string minDateCreated, string maxDateCreated, string resellerReference, int? limit, int? offset)
//        {
//            return SearchBookingsAsync(orderStatus, search, productCode, minTourStartTime, maxTourStartTime, updatedSince, minDateCreated, maxDateCreated, resellerReference, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search bookings
//        /// </summary>
//        /// <remarks>
//        /// Search bookings in your account
//        /// </remarks>
//        /// <param name="orderStatus">Order status to filter results</param>
//        /// <param name="search">String to search for. It will be searched in Order number, Customer name, Agent code and payment transaction codes (I.e. voucher Code).</param>
//        /// <param name="productCode">Product code, to only load bookings for a specific product. Multiple values allowed: &amp;productCode=P11111&amp;productCode=P22222</param>
//        /// <param name="minTourStartTime">Only load bookings with a booked time that starts on or after this time. This is not the booking creation date, it is the booked date. `ISO 8601` format</param>
//        /// <param name="maxTourStartTime">Only load bookings with a booked time that starts before or on this time. This is not the booking creation date, it is the booked date. `ISO 8601` format</param>
//        /// <param name="updatedSince">Only load bookings updated after this time. `ISO 8601` format. When an order is created, the dateCreated field is set to the current date and the dateUpdated field is empty. &lt;br/&gt;Thus using updatedSince will return results of orders that have been updated since the specified date/time, but will not include orders that have been created and not updated.</param>
//        /// <param name="minDateCreated">Only load bookings created on or after this date, whether they have been updated or not. `ISO 8601` format</param>
//        /// <param name="maxDateCreated">Only load bookings created on or before this date, whether they have been updated or not. `ISO 8601` format.</param>
//        /// <param name="resellerReference">Only load bookings with specified resellerReference</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseBookingList> SearchBookingsAsync(OrderStatus? orderStatus, string search, System.Collections.Generic.IEnumerable<string> productCode, string minTourStartTime, string maxTourStartTime, string updatedSince, string minDateCreated, string maxDateCreated, string resellerReference, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/bookings"
//                    urlBuilder_.Append("v1/bookings");
//                    urlBuilder_.Append('?');
//                    if (orderStatus != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("orderStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (search != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (productCode != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("productCode") + "=");
//                        foreach (var item_ in productCode)
//                        {
//                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(",");
//                        }
//                        urlBuilder_.Length--;
//                        urlBuilder_.Append("&");
//                    }
//                    if (minTourStartTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("minTourStartTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minTourStartTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (maxTourStartTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("maxTourStartTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxTourStartTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (updatedSince != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedSince")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(updatedSince, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (minDateCreated != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("minDateCreated")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minDateCreated, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (maxDateCreated != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("maxDateCreated")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxDateCreated, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (resellerReference != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("resellerReference")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resellerReference, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBookingList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create booking
//        /// </summary>
//        /// <remarks>
//        /// Create a new booking. Many of payload fields are not required and will be calculated if not specified. Please check the example request payloads for different booking scenarios.
//        /// </remarks>
//        /// <returns>Created booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseBooking> CreateBookingAsync(BookingCreate body)
//        {
//            return CreateBookingAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create booking
//        /// </summary>
//        /// <remarks>
//        /// Create a new booking. Many of payload fields are not required and will be calculated if not specified. Please check the example request payloads for different booking scenarios.
//        /// </remarks>
//        /// <returns>Created booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseBooking> CreateBookingAsync(BookingCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/bookings"
//                    urlBuilder_.Append("v1/bookings");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBooking>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Quote booking
//        /// </summary>
//        /// <remarks>
//        /// Get a quote for a booking. Use this service to validate your Booking object before making the actual booking.  
//        /// <br/>Business rules will be validated, and all amounts and totals will be populated.  
//        /// <br/>It is not a Booking: It does not have any status or booking number. A Quote does not reserve any seat.
//        /// </remarks>
//        /// <returns>Quote booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseBooking> QuoteBookingAsync(BookingUpdate body)
//        {
//            return QuoteBookingAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Quote booking
//        /// </summary>
//        /// <remarks>
//        /// Get a quote for a booking. Use this service to validate your Booking object before making the actual booking.  
//        /// <br/>Business rules will be validated, and all amounts and totals will be populated.  
//        /// <br/>It is not a Booking: It does not have any status or booking number. A Quote does not reserve any seat.
//        /// </remarks>
//        /// <returns>Quote booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseBooking> QuoteBookingAsync(BookingUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/bookings/quote"
//                    urlBuilder_.Append("v1/bookings/quote");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBooking>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get booking
//        /// </summary>
//        /// <remarks>
//        /// Load an existing booking by Order Number
//        /// </remarks>
//        /// <param name="orderNumber">Order number to search</param>
//        /// <returns>Get booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseBooking> GetBookingAsync(string orderNumber)
//        {
//            return GetBookingAsync(orderNumber, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get booking
//        /// </summary>
//        /// <remarks>
//        /// Load an existing booking by Order Number
//        /// </remarks>
//        /// <param name="orderNumber">Order number to search</param>
//        /// <returns>Get booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseBooking> GetBookingAsync(string orderNumber, System.Threading.CancellationToken cancellationToken)
//        {
//            if (orderNumber == null)
//                throw new System.ArgumentNullException("orderNumber");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/bookings/{orderNumber}"
//                    urlBuilder_.Append("v1/bookings/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBooking>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update booking
//        /// </summary>
//        /// <remarks>
//        /// When implementing booking update take into consideration below:
//        /// <br/>
//        /// <br/>- only certain fields can currently be updated using API
//        /// <br/>- only manual payment bookings can be updated
//        /// <br/>- update booking in API triggers webhooks and e-mail notifications in the same way as the order update through UI
//        /// <br/>- good practice is to retrieve the full booking object either from create or get booking response, update the necessary fields and pass it whole back to the booking update service. In the future we might support updates of additional fields e.g. add and delete of participants. If you don't send the participants array in the request, we will recognize it as the participants deletion and remove the participant from the existing order
//        /// <br/>- order of the items in arrays have to be preserved for the following fields "items", "participants", since no ids are exposed in the API and thus are matched based on the position in the array again the existing booking object
//        /// <br/>- agent can update supplier orders only if the supplier allow them to *edit orders* when sharing their products
//        /// <br/>
//        /// <br/>The service method does not support a partial update, **full booking object, as it was retrieved from the booking create or search services**, has to be send back to the request payload.
//        /// <br/> Otherwise, the properties or relations which &lt;i&gt;are currently supported (see below)&lt;/i&gt; and they are not sent, will be deleted. 
//        /// <br/> **Order of the items in arrays have to be preserved for the following fields 'items', 'participants'.**
//        /// <br/> 
//        /// <br/>**Currently supported** fields are:
//        /// <br/>
//        /// <br/>- Booking.customer - all customer data can be updated
//        /// <br/>- Booking.field - all 'per booking' booking fields values
//        /// <br/>- Booking.item.participant.field - all 'per participant' booking fields values
//        /// <br/>- Booking.resellerComments - both the booking agent and the supplier can update the booking resellerComments
//        /// <br/>- Booking.resellerReference - both the booking agent and the supplier can update the booking resellerReference
//        /// <br/>- Booking.items.pickupLocation.locationName - both the booking agent and the supplier can update the booking pickup location
//        /// <br/>
//        /// <br/>For the sample requests provided in the right panel, consider the booking object below being retrieved from a POST order or GET order methods:
//        /// <br/>
//        /// <br/>```
//        /// <br/>{
//        /// <br/>	"requestStatus": {
//        /// <br/>		"success": true,
//        /// <br/>		"version": "v1"
//        /// <br/>	},
//        /// <br/>	"booking": {
//        /// <br/>		"orderNumber": "RSKCJ1K",
//        /// <br/>		"status": "CONFIRMED",
//        /// <br/>		"supplierId": 61,
//        /// <br/>		"supplierName": "SUPPLIER_PREMIUM_AU",
//        /// <br/>		"customer": {
//        /// <br/>			"id": 2,
//        /// <br/>			"firstName": "Dusan",
//        /// <br/>			"lastName": "Zahoransky",
//        /// <br/>			"name": "Dusan Zahoransky",
//        /// <br/>			"email": "sample@test.com"
//        /// <br/>		},
//        /// <br/>		"items": [
//        /// <br/>			{
//        /// <br/>				"productName": "activity i session seats pp adult 100f",
//        /// <br/>				"productCode": "P123456",
//        /// <br/>				"startTime": "2017-01-19T09:00:00Z",
//        /// <br/>				"endTime": "2017-01-19T11:00:00Z",
//        /// <br/>				"startTimeLocal": "2017-01-19 20:00:00",
//        /// <br/>				"endTimeLocal": "2017-01-19 22:00:00",
//        /// <br/>				"quantities": [
//        /// <br/>					{
//        /// <br/>						"optionLabel": "Adult",
//        /// <br/>						"optionPrice": 100,
//        /// <br/>						"value": 1
//        /// <br/>					}
//        /// <br/>				],
//        /// <br/>				"totalQuantity": 1,
//        /// <br/>				"amount": 100,
//        /// <br/>				"extras": [
//        /// <br/>				],
//        /// <br/>				"participants": [
//        /// <br/>					{
//        /// <br/>						"fields": [
//        /// <br/>							{
//        /// <br/>								"label": "First Name",
//        /// <br/>								"value": "Janko",
//        /// <br/>								"requiredPerParticipant": false,
//        /// <br/>								"requiredPerBooking": false,
//        /// <br/>								"visiblePerParticipant": false,
//        /// <br/>								"visiblePerBooking": false
//        /// <br/>							},
//        /// <br/>							{
//        /// <br/>								"label": "Last Name",
//        /// <br/>								"value": "Hrasko",
//        /// <br/>								"requiredPerParticipant": false,
//        /// <br/>								"requiredPerBooking": false,
//        /// <br/>								"visiblePerParticipant": false,
//        /// <br/>								"visiblePerBooking": false
//        /// <br/>							}
//        /// <br/>						]
//        /// <br/>					}
//        /// <br/>				],
//        /// <br/>				"subtotal": 100,
//        /// <br/>				"vouchers": [
//        /// <br/>				]
//        /// <br/>			}
//        /// <br/>		],
//        /// <br/>		"totalAmount": 100,
//        /// <br/>		"totalCurrency": "AUD",
//        /// <br/>		"totalPaid": 0,
//        /// <br/>		"totalDue": 100,
//        /// <br/>		"dateCreated": "2017-01-19T03:36:18.462Z",
//        /// <br/>		"dateConfirmed": "2017-01-19T03:36:18.462Z",
//        /// <br/>		"payments": [
//        /// <br/>		],
//        /// <br/>		"fields": [
//        /// <br/>			{
//        /// <br/>				"label": "Special Requirements",
//        /// <br/>				"value": "No meat meal option",
//        /// <br/>				"requiredPerParticipant": false,
//        /// <br/>				"requiredPerBooking": false,
//        /// <br/>				"visiblePerParticipant": false,
//        /// <br/>				"visiblePerBooking": false
//        /// <br/>			}
//        /// <br/>		],
//        /// <br/>		"source": "API",
//        /// <br/>		"vouchers": [
//        /// <br/>		]
//        /// <br/>	}
//        /// <br/>}
//        /// <br/>```
//        /// </remarks>
//        /// <param name="orderNumber">order number of the booking</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseBooking> UpdateBookingAsync(string orderNumber, BookingUpdate body)
//        {
//            return UpdateBookingAsync(orderNumber, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update booking
//        /// </summary>
//        /// <remarks>
//        /// When implementing booking update take into consideration below:
//        /// <br/>
//        /// <br/>- only certain fields can currently be updated using API
//        /// <br/>- only manual payment bookings can be updated
//        /// <br/>- update booking in API triggers webhooks and e-mail notifications in the same way as the order update through UI
//        /// <br/>- good practice is to retrieve the full booking object either from create or get booking response, update the necessary fields and pass it whole back to the booking update service. In the future we might support updates of additional fields e.g. add and delete of participants. If you don't send the participants array in the request, we will recognize it as the participants deletion and remove the participant from the existing order
//        /// <br/>- order of the items in arrays have to be preserved for the following fields "items", "participants", since no ids are exposed in the API and thus are matched based on the position in the array again the existing booking object
//        /// <br/>- agent can update supplier orders only if the supplier allow them to *edit orders* when sharing their products
//        /// <br/>
//        /// <br/>The service method does not support a partial update, **full booking object, as it was retrieved from the booking create or search services**, has to be send back to the request payload.
//        /// <br/> Otherwise, the properties or relations which &lt;i&gt;are currently supported (see below)&lt;/i&gt; and they are not sent, will be deleted. 
//        /// <br/> **Order of the items in arrays have to be preserved for the following fields 'items', 'participants'.**
//        /// <br/> 
//        /// <br/>**Currently supported** fields are:
//        /// <br/>
//        /// <br/>- Booking.customer - all customer data can be updated
//        /// <br/>- Booking.field - all 'per booking' booking fields values
//        /// <br/>- Booking.item.participant.field - all 'per participant' booking fields values
//        /// <br/>- Booking.resellerComments - both the booking agent and the supplier can update the booking resellerComments
//        /// <br/>- Booking.resellerReference - both the booking agent and the supplier can update the booking resellerReference
//        /// <br/>- Booking.items.pickupLocation.locationName - both the booking agent and the supplier can update the booking pickup location
//        /// <br/>
//        /// <br/>For the sample requests provided in the right panel, consider the booking object below being retrieved from a POST order or GET order methods:
//        /// <br/>
//        /// <br/>```
//        /// <br/>{
//        /// <br/>	"requestStatus": {
//        /// <br/>		"success": true,
//        /// <br/>		"version": "v1"
//        /// <br/>	},
//        /// <br/>	"booking": {
//        /// <br/>		"orderNumber": "RSKCJ1K",
//        /// <br/>		"status": "CONFIRMED",
//        /// <br/>		"supplierId": 61,
//        /// <br/>		"supplierName": "SUPPLIER_PREMIUM_AU",
//        /// <br/>		"customer": {
//        /// <br/>			"id": 2,
//        /// <br/>			"firstName": "Dusan",
//        /// <br/>			"lastName": "Zahoransky",
//        /// <br/>			"name": "Dusan Zahoransky",
//        /// <br/>			"email": "sample@test.com"
//        /// <br/>		},
//        /// <br/>		"items": [
//        /// <br/>			{
//        /// <br/>				"productName": "activity i session seats pp adult 100f",
//        /// <br/>				"productCode": "P123456",
//        /// <br/>				"startTime": "2017-01-19T09:00:00Z",
//        /// <br/>				"endTime": "2017-01-19T11:00:00Z",
//        /// <br/>				"startTimeLocal": "2017-01-19 20:00:00",
//        /// <br/>				"endTimeLocal": "2017-01-19 22:00:00",
//        /// <br/>				"quantities": [
//        /// <br/>					{
//        /// <br/>						"optionLabel": "Adult",
//        /// <br/>						"optionPrice": 100,
//        /// <br/>						"value": 1
//        /// <br/>					}
//        /// <br/>				],
//        /// <br/>				"totalQuantity": 1,
//        /// <br/>				"amount": 100,
//        /// <br/>				"extras": [
//        /// <br/>				],
//        /// <br/>				"participants": [
//        /// <br/>					{
//        /// <br/>						"fields": [
//        /// <br/>							{
//        /// <br/>								"label": "First Name",
//        /// <br/>								"value": "Janko",
//        /// <br/>								"requiredPerParticipant": false,
//        /// <br/>								"requiredPerBooking": false,
//        /// <br/>								"visiblePerParticipant": false,
//        /// <br/>								"visiblePerBooking": false
//        /// <br/>							},
//        /// <br/>							{
//        /// <br/>								"label": "Last Name",
//        /// <br/>								"value": "Hrasko",
//        /// <br/>								"requiredPerParticipant": false,
//        /// <br/>								"requiredPerBooking": false,
//        /// <br/>								"visiblePerParticipant": false,
//        /// <br/>								"visiblePerBooking": false
//        /// <br/>							}
//        /// <br/>						]
//        /// <br/>					}
//        /// <br/>				],
//        /// <br/>				"subtotal": 100,
//        /// <br/>				"vouchers": [
//        /// <br/>				]
//        /// <br/>			}
//        /// <br/>		],
//        /// <br/>		"totalAmount": 100,
//        /// <br/>		"totalCurrency": "AUD",
//        /// <br/>		"totalPaid": 0,
//        /// <br/>		"totalDue": 100,
//        /// <br/>		"dateCreated": "2017-01-19T03:36:18.462Z",
//        /// <br/>		"dateConfirmed": "2017-01-19T03:36:18.462Z",
//        /// <br/>		"payments": [
//        /// <br/>		],
//        /// <br/>		"fields": [
//        /// <br/>			{
//        /// <br/>				"label": "Special Requirements",
//        /// <br/>				"value": "No meat meal option",
//        /// <br/>				"requiredPerParticipant": false,
//        /// <br/>				"requiredPerBooking": false,
//        /// <br/>				"visiblePerParticipant": false,
//        /// <br/>				"visiblePerBooking": false
//        /// <br/>			}
//        /// <br/>		],
//        /// <br/>		"source": "API",
//        /// <br/>		"vouchers": [
//        /// <br/>		]
//        /// <br/>	}
//        /// <br/>}
//        /// <br/>```
//        /// </remarks>
//        /// <param name="orderNumber">order number of the booking</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseBooking> UpdateBookingAsync(string orderNumber, BookingUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (orderNumber == null)
//                throw new System.ArgumentNullException("orderNumber");

//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/bookings/{orderNumber}"
//                    urlBuilder_.Append("v1/bookings/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBooking>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Cancel booking
//        /// </summary>
//        /// <remarks>
//        /// Cancel an existing booking and send notifications about the cancellation. In case of an Automated Payment booking, will also refund payment.
//        /// </remarks>
//        /// <param name="orderNumber">Order number to cancel</param>
//        /// <param name="sendNotifications">Flag to control if a booking confirmation email should be send to the customer after this booking is canceled. Default (if not specified) is true.</param>
//        /// <returns>Cancel booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseBooking> CancelBookingAsync(string orderNumber, bool? sendNotifications)
//        {
//            return CancelBookingAsync(orderNumber, sendNotifications, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Cancel booking
//        /// </summary>
//        /// <remarks>
//        /// Cancel an existing booking and send notifications about the cancellation. In case of an Automated Payment booking, will also refund payment.
//        /// </remarks>
//        /// <param name="orderNumber">Order number to cancel</param>
//        /// <param name="sendNotifications">Flag to control if a booking confirmation email should be send to the customer after this booking is canceled. Default (if not specified) is true.</param>
//        /// <returns>Cancel booking</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseBooking> CancelBookingAsync(string orderNumber, bool? sendNotifications, System.Threading.CancellationToken cancellationToken)
//        {
//            if (orderNumber == null)
//                throw new System.ArgumentNullException("orderNumber");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/bookings/{orderNumber}"
//                    urlBuilder_.Append("v1/bookings/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append('?');
//                    if (sendNotifications != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("sendNotifications")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sendNotifications, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseBooking>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Search categories
//        /// </summary>
//        /// <remarks>
//        /// Load all categories matching a search string. If the search string is empty, all categories will be returned.
//        /// <br/>This will only return categories that belong to the company identified from the request's apiKey.
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in category name</param>
//        /// <param name="visible">Return only public categories if it is set to true, only private if it is set to false, or both if it not set.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>Search categories</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCategoryList> SearchCategoriesAsync(string search, bool? visible, int? limit, int? offset)
//        {
//            return SearchCategoriesAsync(search, visible, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search categories
//        /// </summary>
//        /// <remarks>
//        /// Load all categories matching a search string. If the search string is empty, all categories will be returned.
//        /// <br/>This will only return categories that belong to the company identified from the request's apiKey.
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in category name</param>
//        /// <param name="visible">Return only public categories if it is set to true, only private if it is set to false, or both if it not set.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>Search categories</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCategoryList> SearchCategoriesAsync(string search, bool? visible, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/categories"
//                    urlBuilder_.Append("v1/categories");
//                    urlBuilder_.Append('?');
//                    if (search != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (visible != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("visible")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(visible, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCategoryList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get category
//        /// </summary>
//        /// <remarks>
//        /// Load an existing category by Id
//        /// </remarks>
//        /// <param name="categoryId">Category ID</param>
//        /// <returns>Get category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCategory> GetCategoryAsync(long categoryId)
//        {
//            return GetCategoryAsync(categoryId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get category
//        /// </summary>
//        /// <remarks>
//        /// Load an existing category by Id
//        /// </remarks>
//        /// <param name="categoryId">Category ID</param>
//        /// <returns>Get category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCategory> GetCategoryAsync(long categoryId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (categoryId == null)
//                throw new System.ArgumentNullException("categoryId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/categories/{categoryId}"
//                    urlBuilder_.Append("v1/categories/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCategory>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// List category products
//        /// </summary>
//        /// <remarks>
//        /// Load all products within a category.
//        /// </remarks>
//        /// <param name="categoryId">The category id.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>List category products</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseProductList> GetCategoryProductsAsync(long categoryId, int? limit, int? offset)
//        {
//            return GetCategoryProductsAsync(categoryId, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// List category products
//        /// </summary>
//        /// <remarks>
//        /// Load all products within a category.
//        /// </remarks>
//        /// <param name="categoryId">The category id.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>List category products</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseProductList> GetCategoryProductsAsync(long categoryId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            if (categoryId == null)
//                throw new System.ArgumentNullException("categoryId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/categories/{categoryId}/products"
//                    urlBuilder_.Append("v1/categories/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/products");
//                    urlBuilder_.Append('?');
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseProductList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get company by alias
//        /// </summary>
//        /// <remarks>
//        /// Load an existing Company by it's alias in Rezdy. Company alias is not a permanent identifier and can change over time.
//        /// </remarks>
//        /// <param name="companyAlias">Company alias to search for</param>
//        /// <returns>Get company</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCompany> GetCompanyByAliasAsync(string companyAlias)
//        {
//            return GetCompanyByAliasAsync(companyAlias, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get company by alias
//        /// </summary>
//        /// <remarks>
//        /// Load an existing Company by it's alias in Rezdy. Company alias is not a permanent identifier and can change over time.
//        /// </remarks>
//        /// <param name="companyAlias">Company alias to search for</param>
//        /// <returns>Get company</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCompany> GetCompanyByAliasAsync(string companyAlias, System.Threading.CancellationToken cancellationToken)
//        {
//            if (companyAlias == null)
//                throw new System.ArgumentNullException("companyAlias");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/companies/alias/{companyAlias}"
//                    urlBuilder_.Append("v1/companies/alias/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companyAlias, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCompany>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get company by name
//        /// </summary>
//        /// <remarks>
//        /// Load an existing Company by it's name in Rezdy. Company name must be given in full name.
//        /// </remarks>
//        /// <param name="companyName">Company name to search for</param>
//        /// <returns>Get company</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCompany> GetCompanyByNameAsync(string companyName)
//        {
//            return GetCompanyByNameAsync(companyName, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get company by name
//        /// </summary>
//        /// <remarks>
//        /// Load an existing Company by it's name in Rezdy. Company name must be given in full name.
//        /// </remarks>
//        /// <param name="companyName">Company name to search for</param>
//        /// <returns>Get company</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCompany> GetCompanyByNameAsync(string companyName, System.Threading.CancellationToken cancellationToken)
//        {
//            if (companyName == null)
//                throw new System.ArgumentNullException("companyName");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/companies/name/{companyName}"
//                    urlBuilder_.Append("v1/companies/name/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCompany>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Search customers
//        /// </summary>
//        /// <remarks>
//        /// Search customers in your account
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in First &amp; Last name, company name and email.</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>Search customers</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCustomerList> SearchCustomersAsync(string search, int? limit, int? offset)
//        {
//            return SearchCustomersAsync(search, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search customers
//        /// </summary>
//        /// <remarks>
//        /// Search customers in your account
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in First &amp; Last name, company name and email.</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>Search customers</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCustomerList> SearchCustomersAsync(string search, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/customers"
//                    urlBuilder_.Append("v1/customers");
//                    urlBuilder_.Append('?');
//                    if (search != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCustomerList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create customer
//        /// </summary>
//        /// <remarks>
//        /// Create a new customer
//        /// </remarks>
//        /// <returns>Create customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCustomer> CreateCustomerAsync(Customer body)
//        {
//            return CreateCustomerAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create customer
//        /// </summary>
//        /// <remarks>
//        /// Create a new customer
//        /// </remarks>
//        /// <returns>Create customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCustomer> CreateCustomerAsync(Customer body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/customers"
//                    urlBuilder_.Append("v1/customers");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCustomer>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get customer
//        /// </summary>
//        /// <remarks>
//        /// Load an existing customer by Id
//        /// </remarks>
//        /// <param name="customerId">Id to search for</param>
//        /// <returns>Get customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCustomer> GetCustomerAsync(long customerId)
//        {
//            return GetCustomerAsync(customerId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get customer
//        /// </summary>
//        /// <remarks>
//        /// Load an existing customer by Id
//        /// </remarks>
//        /// <param name="customerId">Id to search for</param>
//        /// <returns>Get customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCustomer> GetCustomerAsync(long customerId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (customerId == null)
//                throw new System.ArgumentNullException("customerId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/customers/{customerId}"
//                    urlBuilder_.Append("v1/customers/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCustomer>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete customer
//        /// </summary>
//        /// <remarks>
//        /// Delete a customer
//        /// </remarks>
//        /// <param name="customerId">Customer Id to delete</param>
//        /// <returns>Delete customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> DeleteCustomerAsync(string customerId)
//        {
//            return DeleteCustomerAsync(customerId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete customer
//        /// </summary>
//        /// <remarks>
//        /// Delete a customer
//        /// </remarks>
//        /// <param name="customerId">Customer Id to delete</param>
//        /// <returns>Delete customer</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> DeleteCustomerAsync(string customerId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (customerId == null)
//                throw new System.ArgumentNullException("customerId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/customers/{customerId}"
//                    urlBuilder_.Append("v1/customers/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Search extra
//        /// </summary>
//        /// <remarks>
//        /// Searches extra. To retrieve all extras, omit the searchString parameter
//        /// </remarks>
//        /// <param name="searchString">Search string of extra name</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseExtraList> SearchExtrasAsync(string searchString)
//        {
//            return SearchExtrasAsync(searchString, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search extra
//        /// </summary>
//        /// <remarks>
//        /// Searches extra. To retrieve all extras, omit the searchString parameter
//        /// </remarks>
//        /// <param name="searchString">Search string of extra name</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseExtraList> SearchExtrasAsync(string searchString, System.Threading.CancellationToken cancellationToken)
//        {
//            if (searchString == null)
//                throw new System.ArgumentNullException("searchString");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/extra"
//                    urlBuilder_.Append("v1/extra");
//                    urlBuilder_.Append('?');
//                    urlBuilder_.Append(System.Uri.EscapeDataString("searchString")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseExtraList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create extra
//        /// </summary>
//        /// <remarks>
//        /// Creates a new extra.
//        /// </remarks>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseExtra> CreateExtraAsync(ExtraCreateRequest body)
//        {
//            return CreateExtraAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create extra
//        /// </summary>
//        /// <remarks>
//        /// Creates a new extra.
//        /// </remarks>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseExtra> CreateExtraAsync(ExtraCreateRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/extra"
//                    urlBuilder_.Append("v1/extra");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseExtra>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Retrieve an extra
//        /// </summary>
//        /// <remarks>
//        /// Retrieve an extra by Id
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseExtra> GetExtraByIdAsync(long extraId)
//        {
//            return GetExtraByIdAsync(extraId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Retrieve an extra
//        /// </summary>
//        /// <remarks>
//        /// Retrieve an extra by Id
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseExtra> GetExtraByIdAsync(long extraId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (extraId == null)
//                throw new System.ArgumentNullException("extraId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/extra/{extraId}"
//                    urlBuilder_.Append("v1/extra/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(extraId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseExtra>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update extra
//        /// </summary>
//        /// <remarks>
//        /// Updates an extra. The extra ID can change when updating it, since there are business rules to protect the Order and Product consistency.
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseExtra> UpdateExtraByIdAsync(long extraId, ExtraRequest body)
//        {
//            return UpdateExtraByIdAsync(extraId, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update extra
//        /// </summary>
//        /// <remarks>
//        /// Updates an extra. The extra ID can change when updating it, since there are business rules to protect the Order and Product consistency.
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseExtra> UpdateExtraByIdAsync(long extraId, ExtraRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (extraId == null)
//                throw new System.ArgumentNullException("extraId");

//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/extra/{extraId}"
//                    urlBuilder_.Append("v1/extra/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(extraId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseExtra>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete extra
//        /// </summary>
//        /// <remarks>
//        /// Deletes an extra
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> DeleteExtraAsync(long extraId)
//        {
//            return DeleteExtraAsync(extraId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete extra
//        /// </summary>
//        /// <remarks>
//        /// Deletes an extra
//        /// </remarks>
//        /// <param name="extraId">Extra ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> DeleteExtraAsync(long extraId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (extraId == null)
//                throw new System.ArgumentNullException("extraId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/extra/{extraId}"
//                    urlBuilder_.Append("v1/extra/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(extraId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get order item check-in status
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number : optional, is specified, only the status of the order item session from the specified order will be retrieved.</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCheckIn> CheckinOrderSessionStatusAsync(string orderNumber, string productCode, string startTime, string startTimeLocal)
//        {
//            return CheckinOrderSessionStatusAsync(orderNumber, productCode, startTime, startTimeLocal, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get order item check-in status
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number : optional, is specified, only the status of the order item session from the specified order will be retrieved.</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCheckIn> CheckinOrderSessionStatusAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/manifest/checkinOrderSession"
//                    urlBuilder_.Append("v1/manifest/checkinOrderSession");
//                    urlBuilder_.Append('?');
//                    if (orderNumber != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Append(System.Uri.EscapeDataString("productCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCheckIn>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Check-in order item
//        /// </summary>
//        /// <remarks>
//        /// Place Check-in a / No show flag for the specified order item. The order item is identified by order number, product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> CheckinOrderSessionAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, bool? checkin)
//        {
//            return CheckinOrderSessionAsync(orderNumber, productCode, startTime, startTimeLocal, checkin, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Check-in order item
//        /// </summary>
//        /// <remarks>
//        /// Place Check-in a / No show flag for the specified order item. The order item is identified by order number, product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> CheckinOrderSessionAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, bool? checkin, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/manifest/checkinOrderSession"
//                    urlBuilder_.Append("v1/manifest/checkinOrderSession");
//                    urlBuilder_.Append('?');
//                    if (orderNumber != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Append(System.Uri.EscapeDataString("productCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (checkin != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("checkin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checkin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Remove order item check-in
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> CancelCheckinOrderSessionAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, bool? checkin)
//        {
//            return CancelCheckinOrderSessionAsync(orderNumber, productCode, startTime, startTimeLocal, checkin, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove order item check-in
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="orderNumber">Order number</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> CancelCheckinOrderSessionAsync(string orderNumber, string productCode, string startTime, string startTimeLocal, bool? checkin, System.Threading.CancellationToken cancellationToken)
//        {
//            if (orderNumber == null)
//                throw new System.ArgumentNullException("orderNumber");

//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/manifest/checkinOrderSession"
//                    urlBuilder_.Append("v1/manifest/checkinOrderSession");
//                    urlBuilder_.Append('?');
//                    urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    urlBuilder_.Append(System.Uri.EscapeDataString("productCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (checkin != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("checkin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checkin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get session check-in status
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseCheckIn> CheckinSessionStatusAsync(string productCode, string startTime, string startTimeLocal)
//        {
//            return CheckinSessionStatusAsync(productCode, startTime, startTimeLocal, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get session check-in status
//        /// </summary>
//        /// <remarks>
//        /// Retrieves the Check-in status. Checks if everyone in the whole session was checked in. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseCheckIn> CheckinSessionStatusAsync(string productCode, string startTime, string startTimeLocal, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/manifest/checkinSession"
//                    urlBuilder_.Append("v1/manifest/checkinSession");
//                    urlBuilder_.Append('?');
//                    urlBuilder_.Append(System.Uri.EscapeDataString("productCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseCheckIn>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Check-in session
//        /// </summary>
//        /// <remarks>
//        /// Store Check-in / No show flag for everyone in a specified session. The session is identified by product code and start time (or start time local).
//        /// <br/>&lt;br&gt;Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">productCode Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> CheckinSessionAsync(string productCode, string startTime, string startTimeLocal, bool? checkin)
//        {
//            return CheckinSessionAsync(productCode, startTime, startTimeLocal, checkin, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Check-in session
//        /// </summary>
//        /// <remarks>
//        /// Store Check-in / No show flag for everyone in a specified session. The session is identified by product code and start time (or start time local).
//        /// <br/>&lt;br&gt;Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">productCode Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="checkin">Specifies a Check-in (true) or No show (false) flag to use</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> CheckinSessionAsync(string productCode, string startTime, string startTimeLocal, bool? checkin, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/manifest/checkinSession"
//                    urlBuilder_.Append("v1/manifest/checkinSession");
//                    urlBuilder_.Append('?');
//                    urlBuilder_.Append(System.Uri.EscapeDataString("productCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (checkin != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("checkin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checkin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Remove session check-in
//        /// </summary>
//        /// <remarks>
//        /// Remove Check-in / No show flag from everyone in the whole session. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> CancelCheckinSessionAsync(string productCode, string startTime, string startTimeLocal)
//        {
//            return CancelCheckinSessionAsync(productCode, startTime, startTimeLocal, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove session check-in
//        /// </summary>
//        /// <remarks>
//        /// Remove Check-in / No show flag from everyone in the whole session. The session is identified by product code and start time (or start time local).&lt;br&gt;
//        /// <br/>Only available for the supplier API.&lt;br&gt;
//        /// </remarks>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00. It is required to have either startTime or startTimeLocal defined.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> CancelCheckinSessionAsync(string productCode, string startTime, string startTimeLocal, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/manifest/checkinSession"
//                    urlBuilder_.Append("v1/manifest/checkinSession");
//                    urlBuilder_.Append('?');
//                    urlBuilder_.Append(System.Uri.EscapeDataString("productCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Search pickup list
//        /// </summary>
//        /// <remarks>
//        /// Searches pickup lists. To retrieve all pick up lists, omit the searchString parameter
//        /// </remarks>
//        /// <param name="searchString">Search string of pickup list name or location name</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponsePickupListList> SearchPickupListsAsync(string searchString)
//        {
//            return SearchPickupListsAsync(searchString, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search pickup list
//        /// </summary>
//        /// <remarks>
//        /// Searches pickup lists. To retrieve all pick up lists, omit the searchString parameter
//        /// </remarks>
//        /// <param name="searchString">Search string of pickup list name or location name</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponsePickupListList> SearchPickupListsAsync(string searchString, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/pickups"
//                    urlBuilder_.Append("v1/pickups");
//                    urlBuilder_.Append('?');
//                    if (searchString != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("searchString")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponsePickupListList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create pickup list
//        /// </summary>
//        /// <remarks>
//        /// Creates a new pickup list
//        /// </remarks>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponsePickupList> CreatePickupListAsync(PickupList body)
//        {
//            return CreatePickupListAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create pickup list
//        /// </summary>
//        /// <remarks>
//        /// Creates a new pickup list
//        /// </remarks>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponsePickupList> CreatePickupListAsync(PickupList body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/pickups"
//                    urlBuilder_.Append("v1/pickups");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponsePickupList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Retrieve pickup list
//        /// </summary>
//        /// <remarks>
//        /// Retrieves a pickup list
//        /// </remarks>
//        /// <param name="pickupListId">Pickup list ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponsePickupList> GetPickupListAsync(long pickupListId)
//        {
//            return GetPickupListAsync(pickupListId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Retrieve pickup list
//        /// </summary>
//        /// <remarks>
//        /// Retrieves a pickup list
//        /// </remarks>
//        /// <param name="pickupListId">Pickup list ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponsePickupList> GetPickupListAsync(long pickupListId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (pickupListId == null)
//                throw new System.ArgumentNullException("pickupListId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/pickups/{pickupListId}"
//                    urlBuilder_.Append("v1/pickups/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(pickupListId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponsePickupList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update pickup list
//        /// </summary>
//        /// <remarks>
//        /// Updates a pickup list. This service should not be used for partial updates. A full pickup list object with the desired pick up locations should be passed as input
//        /// </remarks>
//        /// <param name="pickupListId">Pickup list ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponsePickupList> UpdatePickupListAsync(long pickupListId, PickupList body)
//        {
//            return UpdatePickupListAsync(pickupListId, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update pickup list
//        /// </summary>
//        /// <remarks>
//        /// Updates a pickup list. This service should not be used for partial updates. A full pickup list object with the desired pick up locations should be passed as input
//        /// </remarks>
//        /// <param name="pickupListId">Pickup list ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponsePickupList> UpdatePickupListAsync(long pickupListId, PickupList body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (pickupListId == null)
//                throw new System.ArgumentNullException("pickupListId");

//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/pickups/{pickupListId}"
//                    urlBuilder_.Append("v1/pickups/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(pickupListId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponsePickupList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete pickup list
//        /// </summary>
//        /// <remarks>
//        /// Deletes a pickup list
//        /// </remarks>
//        /// <param name="pickupListId">Pickup ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> DeletePickupListAsync(long pickupListId)
//        {
//            return DeletePickupListAsync(pickupListId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete pickup list
//        /// </summary>
//        /// <remarks>
//        /// Deletes a pickup list
//        /// </remarks>
//        /// <param name="pickupListId">Pickup ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> DeletePickupListAsync(long pickupListId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (pickupListId == null)
//                throw new System.ArgumentNullException("pickupListId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/pickups/{pickupListId}"
//                    urlBuilder_.Append("v1/pickups/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(pickupListId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Search products
//        /// </summary>
//        /// <remarks>
//        /// Searches a product that matches a search string.&lt;br&gt; Load all products matching a search string. If the search string is empty, all your products will be returned.&lt;br&gt;
//        /// <br/>Use this service when acting as a supplier, to load your own products.&lt;br&gt;
//        /// <br/>If you're acting as an agent, use the /products/marketplace service&lt;br&gt;
//        /// </remarks>
//        /// <param name="search">search String to search for. It will be searched in product name, product code and internal code.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseProductList> SearchProductsAsync(string search, int? limit, int? offset)
//        {
//            return SearchProductsAsync(search, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search products
//        /// </summary>
//        /// <remarks>
//        /// Searches a product that matches a search string.&lt;br&gt; Load all products matching a search string. If the search string is empty, all your products will be returned.&lt;br&gt;
//        /// <br/>Use this service when acting as a supplier, to load your own products.&lt;br&gt;
//        /// <br/>If you're acting as an agent, use the /products/marketplace service&lt;br&gt;
//        /// </remarks>
//        /// <param name="search">search String to search for. It will be searched in product name, product code and internal code.</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseProductList> SearchProductsAsync(string search, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/products"
//                    urlBuilder_.Append("v1/products");
//                    urlBuilder_.Append('?');
//                    if (search != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseProductList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create product
//        /// </summary>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseProduct> CreateProductAsync(ProductCreateRequest body)
//        {
//            return CreateProductAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create product
//        /// </summary>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseProduct> CreateProductAsync(ProductCreateRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/products"
//                    urlBuilder_.Append("v1/products");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get product
//        /// </summary>
//        /// <remarks>
//        /// Load an existing product by Product Code
//        /// </remarks>
//        /// <param name="productCode">Product Code to search for</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseProduct> GetProductAsync(string productCode)
//        {
//            return GetProductAsync(productCode, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get product
//        /// </summary>
//        /// <remarks>
//        /// Load an existing product by Product Code
//        /// </remarks>
//        /// <param name="productCode">Product Code to search for</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseProduct> GetProductAsync(string productCode, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/products/{productCode}"
//                    urlBuilder_.Append("v1/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update product
//        /// </summary>
//        /// <remarks>
//        /// Updates a product.
//        /// <br/>
//        /// <br/>When updating price options, the full list of existing price options must be supplied in the update. Otherwise the system will remove any missing price options in the request from the product.
//        /// <br/>
//        /// <br/>For instance, if a product has 2 price options Adult and Child but the update request only contains Adult, the Child price option will be removed from the product.&lt;br&gt;
//        /// <br/>Adding a price option works the same way. If the update request contains an extra price option, it will be added to the product.
//        /// <br/>
//        /// <br/>When price option values are updated via API, this will override all existing price in availability (session) to reflect the product price. 
//        /// <br/>If a different price in calendar/session is required to the product price, please make the changes to the product directly in your Rezdy account and select `do not change session price` in the page that follows after saving your changes.,
//        /// </remarks>
//        /// <param name="productCode">product's product code to be updated</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseProduct> UpdateProductAsync(string productCode, ProductUpdateRequest body)
//        {
//            return UpdateProductAsync(productCode, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update product
//        /// </summary>
//        /// <remarks>
//        /// Updates a product.
//        /// <br/>
//        /// <br/>When updating price options, the full list of existing price options must be supplied in the update. Otherwise the system will remove any missing price options in the request from the product.
//        /// <br/>
//        /// <br/>For instance, if a product has 2 price options Adult and Child but the update request only contains Adult, the Child price option will be removed from the product.&lt;br&gt;
//        /// <br/>Adding a price option works the same way. If the update request contains an extra price option, it will be added to the product.
//        /// <br/>
//        /// <br/>When price option values are updated via API, this will override all existing price in availability (session) to reflect the product price. 
//        /// <br/>If a different price in calendar/session is required to the product price, please make the changes to the product directly in your Rezdy account and select `do not change session price` in the page that follows after saving your changes.,
//        /// </remarks>
//        /// <param name="productCode">product's product code to be updated</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseProduct> UpdateProductAsync(string productCode, ProductUpdateRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/products/{productCode}"
//                    urlBuilder_.Append("v1/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete product
//        /// </summary>
//        /// <remarks>
//        /// Deletes a product.
//        /// </remarks>
//        /// <param name="productCode">product's product code to be deleted</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> DeleteProductAsync(string productCode)
//        {
//            return DeleteProductAsync(productCode, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete product
//        /// </summary>
//        /// <remarks>
//        /// Deletes a product.
//        /// </remarks>
//        /// <param name="productCode">product's product code to be deleted</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> DeleteProductAsync(string productCode, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/products/{productCode}"
//                    urlBuilder_.Append("v1/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Add product image
//        /// </summary>
//        /// <remarks>
//        /// First, a product has to be created using```POST /products```, the response contain a product object upon a successful creation. Use the product code to for the add/delete images URLs.
//        /// <br/>
//        /// <br/>Use a standard file upload request (multipart form data) with a file attachment, parameter name is `file` as the call payload, and also a mandatory filename. If you have multiple images, you need to make one separate call for each image.
//        /// <br/>
//        /// <br/>A successful response contains generated image URLs including different image dimension and the image Id. Use the image Id to delete the image, if you want to remove it from the product.
//        /// <br/>
//        /// <br/>### Request example
//        /// <br/>
//        /// <br/>File has to be specified either in the attachment, part of the form-data parameter 'file', or in the attachment, as a form-data parameter 'filename', which is common format for PHP frameworks, which are sending an array of attachments.
//        /// <br/>
//        /// <br/>Request:
//        /// <br/>```
//        /// <br/>POST https://api.rezdy.com/latest/products/P12345/images?apiKey=123456789XYZ
//        /// <br/>```
//        /// <br/>content-type=[multipart/form-data; boundary=----WebKitFormBoundarymDtt4W0lhmAsKFkZ]
//        /// <br/>
//        /// <br/>```
//        /// <br/>------WebKitFormBoundarymDtt4W0lhmAsKFkZ
//        /// <br/>Content-Disposition: form-data; name="file"; filename="myImage.png"
//        /// <br/>Content-Type: image/png
//        /// <br/>...
//        /// <br/>IMAGE BINARY DATA
//        /// <br/>...
//        /// <br/>------WebKitFormBoundarymDtt4W0lhmAsKFkZ--
//        /// <br/>```
//        /// </remarks>
//        /// <param name="productCode">product to add the image to</param>
//        /// <param name="file">Image file to be uploaded</param>
//        /// <param name="filename">Optional image name override</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseImage> AddProductImageAsync(string productCode, object file, string filename)
//        {
//            return AddProductImageAsync(productCode, file, filename, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Add product image
//        /// </summary>
//        /// <remarks>
//        /// First, a product has to be created using```POST /products```, the response contain a product object upon a successful creation. Use the product code to for the add/delete images URLs.
//        /// <br/>
//        /// <br/>Use a standard file upload request (multipart form data) with a file attachment, parameter name is `file` as the call payload, and also a mandatory filename. If you have multiple images, you need to make one separate call for each image.
//        /// <br/>
//        /// <br/>A successful response contains generated image URLs including different image dimension and the image Id. Use the image Id to delete the image, if you want to remove it from the product.
//        /// <br/>
//        /// <br/>### Request example
//        /// <br/>
//        /// <br/>File has to be specified either in the attachment, part of the form-data parameter 'file', or in the attachment, as a form-data parameter 'filename', which is common format for PHP frameworks, which are sending an array of attachments.
//        /// <br/>
//        /// <br/>Request:
//        /// <br/>```
//        /// <br/>POST https://api.rezdy.com/latest/products/P12345/images?apiKey=123456789XYZ
//        /// <br/>```
//        /// <br/>content-type=[multipart/form-data; boundary=----WebKitFormBoundarymDtt4W0lhmAsKFkZ]
//        /// <br/>
//        /// <br/>```
//        /// <br/>------WebKitFormBoundarymDtt4W0lhmAsKFkZ
//        /// <br/>Content-Disposition: form-data; name="file"; filename="myImage.png"
//        /// <br/>Content-Type: image/png
//        /// <br/>...
//        /// <br/>IMAGE BINARY DATA
//        /// <br/>...
//        /// <br/>------WebKitFormBoundarymDtt4W0lhmAsKFkZ--
//        /// <br/>```
//        /// </remarks>
//        /// <param name="productCode">product to add the image to</param>
//        /// <param name="file">Image file to be uploaded</param>
//        /// <param name="filename">Optional image name override</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseImage> AddProductImageAsync(string productCode, object file, string filename, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var boundary_ = System.Guid.NewGuid().ToString();
//                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
//                    content_.Headers.Remove("Content-Type");
//                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

//                    if (file == null)
//                        throw new System.ArgumentNullException("file");
//                    else
//                    {
//                        var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(file, JsonSerializerSettings);
//                        content_.Add(new System.Net.Http.StringContent(json_, System.Text.Encoding.UTF8, "application/json"), "file");
//                    }

//                    if (filename == null)
//                        throw new System.ArgumentNullException("filename");
//                    else
//                    {
//                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
//                    }
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/products/{productCode}/images"
//                    urlBuilder_.Append("v1/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/images");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseImage>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Remove product Image
//        /// </summary>
//        /// <remarks>
//        /// Removes product Image. Filename is mandatory. It has to be specified either in the attachment, part of the form-data parameter 'file', or in the attachment, as a form-data parameter 'filename', which is common format for PHP frameworks, which are sending an array of attachments.
//        /// </remarks>
//        /// <param name="productCode">product's product code for the image to be uploaded to</param>
//        /// <param name="mediaId">image's id to be uploaded</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseNoData> DeleteProductImageAsync(string productCode, long mediaId)
//        {
//            return DeleteProductImageAsync(productCode, mediaId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove product Image
//        /// </summary>
//        /// <remarks>
//        /// Removes product Image. Filename is mandatory. It has to be specified either in the attachment, part of the form-data parameter 'file', or in the attachment, as a form-data parameter 'filename', which is common format for PHP frameworks, which are sending an array of attachments.
//        /// </remarks>
//        /// <param name="productCode">product's product code for the image to be uploaded to</param>
//        /// <param name="mediaId">image's id to be uploaded</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseNoData> DeleteProductImageAsync(string productCode, long mediaId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            if (mediaId == null)
//                throw new System.ArgumentNullException("mediaId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/products/{productCode}/images/{mediaId}"
//                    urlBuilder_.Append("v1/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/images/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mediaId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseNoData>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get product pickups
//        /// </summary>
//        /// <remarks>
//        /// Gets a list of pickup locations configured for this product.
//        /// </remarks>
//        /// <param name="productCode">productCode Product Code to search for</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponsePickupLocationList> GetProductPickupLocationsAsync(string productCode, int? limit, int? offset)
//        {
//            return GetProductPickupLocationsAsync(productCode, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get product pickups
//        /// </summary>
//        /// <remarks>
//        /// Gets a list of pickup locations configured for this product.
//        /// </remarks>
//        /// <param name="productCode">productCode Product Code to search for</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponsePickupLocationList> GetProductPickupLocationsAsync(string productCode, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/products/{productCode}/pickups"
//                    urlBuilder_.Append("v1/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/pickups");
//                    urlBuilder_.Append('?');
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponsePickupLocationList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Search rates
//        /// </summary>
//        /// <remarks>
//        /// Searches rates based on rate name and product code. If rateName and productCode are not specified, then it will return all rates belonging to the supplier
//        /// </remarks>
//        /// <param name="rateName">Rate name</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseRateList> SearchRatesByNameAndProductCodeAsync(string rateName, string productCode)
//        {
//            return SearchRatesByNameAndProductCodeAsync(rateName, productCode, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search rates
//        /// </summary>
//        /// <remarks>
//        /// Searches rates based on rate name and product code. If rateName and productCode are not specified, then it will return all rates belonging to the supplier
//        /// </remarks>
//        /// <param name="rateName">Rate name</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseRateList> SearchRatesByNameAndProductCodeAsync(string rateName, string productCode, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/rates/search"
//                    urlBuilder_.Append("v1/rates/search");
//                    urlBuilder_.Append('?');
//                    if (rateName != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("rateName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(rateName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (productCode != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("productCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseRateList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get rate
//        /// </summary>
//        /// <remarks>
//        /// Retrieves a rate based on its ID
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseRate> GetRatesByIdAsync(long rateId)
//        {
//            return GetRatesByIdAsync(rateId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get rate
//        /// </summary>
//        /// <remarks>
//        /// Retrieves a rate based on its ID
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseRate> GetRatesByIdAsync(long rateId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (rateId == null)
//                throw new System.ArgumentNullException("rateId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/rates/{rateId}"
//                    urlBuilder_.Append("v1/rates/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(rateId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Add product
//        /// </summary>
//        /// <remarks>
//        /// Adds a product to the specified rate
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseRate> AddProductAsync(long rateId, string productCode, ProductRate body)
//        {
//            return AddProductAsync(rateId, productCode, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Add product
//        /// </summary>
//        /// <remarks>
//        /// Adds a product to the specified rate
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseRate> AddProductAsync(long rateId, string productCode, ProductRate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (rateId == null)
//                throw new System.ArgumentNullException("rateId");

//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/rates/{rateId}/products/{productCode}"
//                    urlBuilder_.Append("v1/rates/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(rateId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Remove product
//        /// </summary>
//        /// <remarks>
//        /// Removes a product from the specified rate
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseRate> RemoveProductAsync(long rateId, string productCode)
//        {
//            return RemoveProductAsync(rateId, productCode, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove product
//        /// </summary>
//        /// <remarks>
//        /// Removes a product from the specified rate
//        /// </remarks>
//        /// <param name="rateId">Rate ID</param>
//        /// <param name="productCode">Product's product code</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseRate> RemoveProductAsync(long rateId, string productCode, System.Threading.CancellationToken cancellationToken)
//        {
//            if (rateId == null)
//                throw new System.ArgumentNullException("rateId");

//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/rates/{rateId}/products/{productCode}"
//                    urlBuilder_.Append("v1/rates/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(rateId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// List resources
//        /// </summary>
//        /// <remarks>
//        /// Retrieve all supplier resources. Pagination using limit and offset is applied to the result list.
//        /// </remarks>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseResourceList> GetAllSupplierResourcesAsync(int? limit, int? offset)
//        {
//            return GetAllSupplierResourcesAsync(limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// List resources
//        /// </summary>
//        /// <remarks>
//        /// Retrieve all supplier resources. Pagination using limit and offset is applied to the result list.
//        /// </remarks>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseResourceList> GetAllSupplierResourcesAsync(int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/resources"
//                    urlBuilder_.Append("v1/resources");
//                    urlBuilder_.Append('?');
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseResourceList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get session resources
//        /// </summary>
//        /// <remarks>
//        /// Retrieve resources assigned to the session. Session has to be specified either by sessionId or by product code and start time (or start time local).
//        /// </remarks>
//        /// <param name="sessionId">Session ID</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseResourceList> GetResourcesForSessionAsync(long? sessionId, string productCode, string startTime, string startTimeLocal, int? limit, int? offset)
//        {
//            return GetResourcesForSessionAsync(sessionId, productCode, startTime, startTimeLocal, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get session resources
//        /// </summary>
//        /// <remarks>
//        /// Retrieve resources assigned to the session. Session has to be specified either by sessionId or by product code and start time (or start time local).
//        /// </remarks>
//        /// <param name="sessionId">Session ID</param>
//        /// <param name="productCode">Product code in format P12345.</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="limit">How many results are returned per request. Maximum is 100, which also a default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseResourceList> GetResourcesForSessionAsync(long? sessionId, string productCode, string startTime, string startTimeLocal, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/resources/session"
//                    urlBuilder_.Append("v1/resources/session");
//                    urlBuilder_.Append('?');
//                    if (sessionId != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("sessionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sessionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (productCode != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("productCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseResourceList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Add session resource
//        /// </summary>
//        /// <remarks>
//        /// Add the resource to the session.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="sessionId">Session ID</param>
//        /// <param name="resourceOrder">Order of the resource in the session. Optional, if not specified, will by calculated by the system to fill the first gap if gap is found, or the highest number among existing resources.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseResource> AddToSessionAsync(long resourceId, long sessionId, int? resourceOrder)
//        {
//            return AddToSessionAsync(resourceId, sessionId, resourceOrder, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Add session resource
//        /// </summary>
//        /// <remarks>
//        /// Add the resource to the session.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="sessionId">Session ID</param>
//        /// <param name="resourceOrder">Order of the resource in the session. Optional, if not specified, will by calculated by the system to fill the first gap if gap is found, or the highest number among existing resources.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseResource> AddToSessionAsync(long resourceId, long sessionId, int? resourceOrder, System.Threading.CancellationToken cancellationToken)
//        {
//            if (resourceId == null)
//                throw new System.ArgumentNullException("resourceId");

//            if (sessionId == null)
//                throw new System.ArgumentNullException("sessionId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/resources/{resourceId}/session/{sessionId}"
//                    urlBuilder_.Append("v1/resources/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/session/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(sessionId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append('?');
//                    if (resourceOrder != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("resourceOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resourceOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseResource>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Remove session resource
//        /// </summary>
//        /// <remarks>
//        /// Removes the resource from the session.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="sessionId">Session ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseResource> RemoveFromSessionAsync(long resourceId, long sessionId)
//        {
//            return RemoveFromSessionAsync(resourceId, sessionId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove session resource
//        /// </summary>
//        /// <remarks>
//        /// Removes the resource from the session.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="sessionId">Session ID</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseResource> RemoveFromSessionAsync(long resourceId, long sessionId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (resourceId == null)
//                throw new System.ArgumentNullException("resourceId");

//            if (sessionId == null)
//                throw new System.ArgumentNullException("sessionId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/resources/{resourceId}/session/{sessionId}"
//                    urlBuilder_.Append("v1/resources/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/session/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(sessionId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseResource>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get resource sessions
//        /// </summary>
//        /// <remarks>
//        /// Retrieves all sessions for the specified resource within the start/end datetime range. Pagination using limit and offset is applied to the result list.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="endTime">Session end time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="endTimeLocal">Session end time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseSessionList> GetSessionsForResourceAsync(long resourceId, string startTime, string endTime, string startTimeLocal, string endTimeLocal, int? limit, int? offset)
//        {
//            return GetSessionsForResourceAsync(resourceId, startTime, endTime, startTimeLocal, endTimeLocal, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get resource sessions
//        /// </summary>
//        /// <remarks>
//        /// Retrieves all sessions for the specified resource within the start/end datetime range. Pagination using limit and offset is applied to the result list.
//        /// </remarks>
//        /// <param name="resourceId">Resource ID</param>
//        /// <param name="startTime">Session start time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="endTime">Session end time in ISO 8601 format, e.g. 2014-03-01T00:00:00Z</param>
//        /// <param name="startTimeLocal">Session start time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="endTimeLocal">Session end time in supplier's local timezone, format is yyyy-MM-dd HH:mm:ss, e.g. 2014-03-01 00:00:00</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseSessionList> GetSessionsForResourceAsync(long resourceId, string startTime, string endTime, string startTimeLocal, string endTimeLocal, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            if (resourceId == null)
//                throw new System.ArgumentNullException("resourceId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/resources/{resourceId}/sessions"
//                    urlBuilder_.Append("v1/resources/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/sessions");
//                    urlBuilder_.Append('?');
//                    if (startTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (endTime != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("endTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (startTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (endTimeLocal != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("endTimeLocal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endTimeLocal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseSessionList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Search vouchers
//        /// </summary>
//        /// <remarks>
//        /// Search vouchers in your account
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in voucher codes</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseVoucherList> SearchVouchersAsync(string search, int? limit, int? offset)
//        {
//            return SearchVouchersAsync(search, limit, offset, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Search vouchers
//        /// </summary>
//        /// <remarks>
//        /// Search vouchers in your account
//        /// </remarks>
//        /// <param name="search">String to search for. It will be searched in voucher codes</param>
//        /// <param name="limit">limit how many results are returned per request. Maximum is 100, which is also the default, when not specified.</param>
//        /// <param name="offset">Offset of the first result to return. Default to 0.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseVoucherList> SearchVouchersAsync(string search, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/vouchers"
//                    urlBuilder_.Append("v1/vouchers");
//                    urlBuilder_.Append('?');
//                    if (search != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (limit != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    if (offset != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseVoucherList>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get voucher
//        /// </summary>
//        /// <remarks>
//        /// Load an existing voucher by Voucher Code
//        /// </remarks>
//        /// <param name="voucherCode">Voucher code to search for.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseVoucher> GetVoucherAsync(string voucherCode)
//        {
//            return GetVoucherAsync(voucherCode, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get voucher
//        /// </summary>
//        /// <remarks>
//        /// Load an existing voucher by Voucher Code
//        /// </remarks>
//        /// <param name="voucherCode">Voucher code to search for.</param>
//        /// <returns>default response</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseVoucher> GetVoucherAsync(string voucherCode, System.Threading.CancellationToken cancellationToken)
//        {
//            if (voucherCode == null)
//                throw new System.ArgumentNullException("voucherCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/vouchers/{voucherCode}"
//                    urlBuilder_.Append("v1/vouchers/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(voucherCode, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseVoucher>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool) 
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[]) value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial interface IAddProductClient
//    {
//        /// <summary>
//        /// Add product to category
//        /// </summary>
//        /// <remarks>
//        /// Adds a product to an existing category
//        /// </remarks>
//        /// <returns>Add product to category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> IAsync(long categoryId, string productCode);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Add product to category
//        /// </summary>
//        /// <remarks>
//        /// Adds a product to an existing category
//        /// </remarks>
//        /// <returns>Add product to category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> IAsync(long categoryId, string productCode, System.Threading.CancellationToken cancellationToken);

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class AddProductClient : IAddProductClient
//    {
//        #pragma warning disable 8618
//        private string _baseUrl;
//        #pragma warning restore 8618

//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public AddProductClient(System.Net.Http.HttpClient httpClient)
//    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            BaseUrl = "https://api.rezdy.com";
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        public string BaseUrl
//        {
//            get { return _baseUrl; }
//            set
//            {
//                _baseUrl = value;
//                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                    _baseUrl += '/';
//            }
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Add product to category
//        /// </summary>
//        /// <remarks>
//        /// Adds a product to an existing category
//        /// </remarks>
//        /// <returns>Add product to category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseRate> IAsync(long categoryId, string productCode)
//        {
//            return IAsync(categoryId, productCode, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Add product to category
//        /// </summary>
//        /// <remarks>
//        /// Adds a product to an existing category
//        /// </remarks>
//        /// <returns>Add product to category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseRate> IAsync(long categoryId, string productCode, System.Threading.CancellationToken cancellationToken)
//        {
//            if (categoryId == null)
//                throw new System.ArgumentNullException("categoryId");

//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/categories/{categoryId}/products/{productCode}"
//                    urlBuilder_.Append("v1/categories/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool) 
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[]) value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial interface IRemoveProductClient
//    {
//        /// <summary>
//        /// Remove product from category
//        /// </summary>
//        /// <remarks>
//        /// Removes a product from an existing category
//        /// </remarks>
//        /// <returns>Remove product from category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> IAsync(long categoryId, string productCode);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove product from category
//        /// </summary>
//        /// <remarks>
//        /// Removes a product from an existing category
//        /// </remarks>
//        /// <returns>Remove product from category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<ResponseRate> IAsync(long categoryId, string productCode, System.Threading.CancellationToken cancellationToken);

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RemoveProductClient : IRemoveProductClient
//    {
//        #pragma warning disable 8618
//        private string _baseUrl;
//        #pragma warning restore 8618

//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public RemoveProductClient(System.Net.Http.HttpClient httpClient)
//    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            BaseUrl = "https://api.rezdy.com";
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        public string BaseUrl
//        {
//            get { return _baseUrl; }
//            set
//            {
//                _baseUrl = value;
//                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
//                    _baseUrl += '/';
//            }
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Remove product from category
//        /// </summary>
//        /// <remarks>
//        /// Removes a product from an existing category
//        /// </remarks>
//        /// <returns>Remove product from category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ResponseRate> IAsync(long categoryId, string productCode)
//        {
//            return IAsync(categoryId, productCode, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Remove product from category
//        /// </summary>
//        /// <remarks>
//        /// Removes a product from an existing category
//        /// </remarks>
//        /// <returns>Remove product from category</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ResponseRate> IAsync(long categoryId, string productCode, System.Threading.CancellationToken cancellationToken)
//        {
//            if (categoryId == null)
//                throw new System.ArgumentNullException("categoryId");

//            if (productCode == null)
//                throw new System.ArgumentNullException("productCode");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    var urlBuilder_ = new System.Text.StringBuilder();
//                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
//                    // Operation Path: "v1/categories/{categoryId}/products/{productCode}"
//                    urlBuilder_.Append("v1/categories/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/products/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResponseRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool) 
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[]) value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Error
//    {
//        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string ErrorCode { get; set; }

//        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ErrorMessage { get; set; }

//        [Newtonsoft.Json.JsonProperty("seatsAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int SeatsAvailable { get; set; }

//        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<SrcErrFieldsParameter> Fields { get; set; }

//        [Newtonsoft.Json.JsonProperty("quantityRequiredMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int QuantityRequiredMin { get; set; }

//        [Newtonsoft.Json.JsonProperty("quantityRequiredMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int QuantityRequiredMax { get; set; }

//        [Newtonsoft.Json.JsonProperty("priceOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<SrcErrPriceOptionsParameter> PriceOptions { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RequestStatus
//    {
//        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
//        public bool Success { get; set; }

//        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Error Error { get; set; }

//        [Newtonsoft.Json.JsonProperty("warning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Warning Warning { get; set; }

//        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Version { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Supplier resource - e.g. raft, bus, tour guide, venue which has a limited capacity. The resources can be shared between different supplier's products. If the resource does not have any spare availability, the booking of any of the product sessions, where the resource is used will not be possible.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Resource
//    {
//        /// <summary>
//        /// Rezdy internal id of the resource.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Resource name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Resource type
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ResourceType Type { get; set; }

//        /// <summary>
//        /// Availability of the resource
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int Seats { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseResource
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Resource Resource { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SrcErrFieldsParameter
//    {
//        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Reason { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SrcErrPriceOptionsParameter
//    {
//        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int Min { get; set; }

//        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int Max { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Warning
//    {
//        [Newtonsoft.Json.JsonProperty("warningMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string WarningMessage { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A Product with its associated price options net rates
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class NetRate
//    {
//        /// <summary>
//        /// Label of the price option e.g. Adult, Child etc
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceOptionLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string PriceOptionLabel { get; set; }

//        /// <summary>
//        /// Value of the rate for the given price option label
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("netPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float NetPrice { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A ProductRate is used to map a product and its associated value commission
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductRate
//    {
//        /// <summary>
//        /// Product's product code
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProductCode { get; set; }

//        /// <summary>
//        /// Commission type: PERCENTAGE, NET_RATE
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("commissionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductRateCommissionType CommissionType { get; set; }

//        /// <summary>
//        /// Percentage value of the commission. This should be mandatory if Commission Type is PERCENTAGE
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("percentageCommission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float PercentageCommission { get; set; }

//        /// <summary>
//        /// Includes extras, This is mandatory if Commission Type is PERCENTAGE. If true, the product's extras will be included in the agent commission, otherwise the commission will be calculated based on the product price only.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("percentageIncludeExtras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool PercentageIncludeExtras { get; set; }

//        /// <summary>
//        /// List of Net rates with its associated price option label e.g. Adult $20, Child $10 etc. This is mandatory if Commission Type is NET_RATE
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("netRates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<NetRate> NetRates { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A Rate is used to group products with its corresponding shared rate
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Rate
//    {
//        /// <summary>
//        /// Rate ID
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("rateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long RateId { get; set; }

//        /// <summary>
//        /// Rate name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Products associated with this Rate (Catalog)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productRates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ProductRate> ProductRates { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseRate
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Rate Rate { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// An information about a booking or a participant.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class BookingFieldCreate
//    {
//        /// <summary>
//        /// Field label that can be shown to customers
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        /// <summary>
//        /// true if this field must be populated for each participant. It should be in Booking.BookingItem.Participant.fields.&lt;p&gt;&lt;i&gt;Currently, required fields are not validated when a booking is created though public API, however it's a good practice to support them on in your client code. &lt;b&gt;However, soon the required fields will be enforced for public API booking.&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("requiredPerParticipant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool RequiredPerParticipant { get; set; }

//        /// <summary>
//        /// true if this field must be populated once per booking, regardless of the number of items or participants. It should be in Booking.fields&lt;p&gt;&lt;i&gt;Currently, required fields are not validated when a booking is created though public API, however it's a good practice to support them on in your client code &lt;b&gt;However, soon the required fields will be enforced for public API booking.&lt;/b&gt;.&lt;/i&gt;&lt;/p&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("requiredPerBooking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool RequiredPerBooking { get; set; }

//        /// <summary>
//        /// true if this field should be asked for each participant when doing a booking. It should be in Booking.BookingItem.Participant.fields.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("visiblePerParticipant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool VisiblePerParticipant { get; set; }

//        /// <summary>
//        /// true if this field should be asked once per booking, regardless of the number of items or participants. It should be in Booking.fields
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("visiblePerBooking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool VisiblePerBooking { get; set; }

//        /// <summary>
//        /// Type of a custom booking field. This type does not apply on the Rezdy build-in booking fields. See the section &lt;a href="/guides/API%20Related%20Articles/Create%20products"&gt;Product booking fields&lt;/a&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingFieldCreateFieldType FieldType { get; set; }

//        /// <summary>
//        /// If this field only allows limited values to be selected from a list, they'll be included in this string, separated by \r\n
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("listOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ListOptions { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A Price Option belongs to a product or products session. It holds the price details for a specific price type.Products can have one or many price options (I.e. Adult, Child, Family, etc.)
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PriceOptionCreate
//    {
//        /// <summary>
//        /// Price amount (I.e. "200.00")
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Price { get; set; }

//        /// <summary>
//        /// Label for this price (I.e. "Adult", "Child")
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        /// <summary>
//        /// How many seats one quantity of this price willuse. Used for availability calculations. For example 1 quantity of "Family of 4" will use 4 seats.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seatsUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int SeatsUsed { get; set; }

//        /// <summary>
//        /// Min booking quantity for the product price option. Can be specified, if the price option is fixed or a group type. For a successful booking of the product, the number of participants for this price option have to be greater or equal than this value.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("minQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int MinQuantity { get; set; }

//        /// <summary>
//        /// Max booking quantity for the product price option. Can be specified, if the price option is fixed or a grouptype. For a successful booking of the product, the number of participants for this price option have to be lesser or equal than this value.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("maxQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int MaxQuantity { get; set; }

//        /// <summary>
//        /// If this price is for a group, is the price for the whole group (TOTAL) or per quantity (EACH)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceGroupType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public PriceOptionCreatePriceGroupType PriceGroupType { get; set; }

//        /// <summary>
//        /// Product code to which the price options belongs to. Since Rezdy introduced shared availability option for products, the product sessions can contain price overrides for all of the products, which share the sessions. Therefore it is necessary to filer only the price options matching the chosen product code on the client side, when processing /availability service responses.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProductCode { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// updated product
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductUpdateRequest
//    {
//        /// <summary>
//        /// Product name 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Product description is between 15 and 240 characters.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string ShortDescription { get; set; }

//        /// <summary>
//        /// Long product description, is between 100 and 15000 characters.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string Description { get; set; }

//        /// <summary>
//        /// General price indication for this product. It represents a display price only, therefore it does not affect a real booking price, which is calculated based on the price options.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("advertisedPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float AdvertisedPrice { get; set; }

//        /// <summary>
//        /// Specific terms and conditions for this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Terms { get; set; }

//        /// <summary>
//        /// Confirmation mode. Determines if bookings are automatically confirmed or it they are pending.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("confirmMode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductUpdateRequestConfirmMode ConfirmMode { get; set; }

//        /// <summary>
//        /// If confirmMode is MANUAL_THEN_AUTO or AUTO_THEN_MANUAL, determines the minimum number of participants per booking to trigger the change.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("confirmModeMinParticipants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int ConfirmModeMinParticipants { get; set; }

//        /// <summary>
//        /// Minimum book ahead interval for he product in minutes.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("minimumNoticeMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long MinimumNoticeMinutes { get; set; }

//        /// <summary>
//        /// Duration of the product in minutes.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("durationMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long DurationMinutes { get; set; }

//        /// <summary>
//        /// Pickup ID for this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("pickupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long PickupId { get; set; }

//        /// <summary>
//        /// List of booking fields required for this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("bookingFields", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public System.Collections.Generic.ICollection<BookingFieldCreate> BookingFields { get; set; } = new System.Collections.ObjectModel.Collection<BookingFieldCreate>();

//        /// <summary>
//        /// List of price options for this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<PriceOptionCreate> PriceOptions { get; set; }

//        /// <summary>
//        /// Supplier-defined product code, used internally by the supplier.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("internalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string InternalCode { get; set; }

//        /// <summary>
//        /// Specifies how to output the barcodes when this product is booked. Valid types are:&lt;br&gt;&lt;li&gt;PARTICIPANT: Barcodes will be generated by rezdy for each participant when an booking is created for this product&lt;/li&gt;&lt;li&gt;ORDER: Barcodes will be generated by rezdy per booking&lt;/li&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("barcodeOutputType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductUpdateRequestBarcodeOutputType BarcodeOutputType { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Address of a company, customer or product location.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Address
//    {
//        /// <summary>
//        /// Address line 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AddressLine { get; set; }

//        /// <summary>
//        /// Address line 2
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AddressLine2 { get; set; }

//        /// <summary>
//        /// Post Code
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string PostCode { get; set; }

//        /// <summary>
//        /// City name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string City { get; set; }

//        /// <summary>
//        /// State name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string State { get; set; }

//        /// <summary>
//        /// Country code
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CountryCode { get; set; }

//        /// <summary>
//        /// Geolocation - latitude
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public double Latitude { get; set; }

//        /// <summary>
//        /// Geolocation - longitude
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public double Longitude { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// An information about a booking or a participant, based on context - either nested in a booking or a participant object (I.e. "First Name", "Dietary requirements", "Hotel Pickup").&lt;p&gt;&lt;ul&gt;How to handle the booking fields:	&lt;li&gt;requiredPerXXX is true: the fields is mandatory for the booking, a booking with missing required field will fail&lt;/li&gt; 	&lt;li&gt;visiblePerXXX is true: the fields is optional, a customer should be asked to fill it up, but the booking will not fail if it's empty or not sent&lt;/li&gt;	&lt;li&gt;visiblePerXXX is false AND requiredPerXXX is false: the field for this product is not visible, nor required, you can skip it - do not display it to a user&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;How to send the booking fields in a booking request:	&lt;li&gt;fields XXXperParticipant are sent for each pax in the participants array, as "fields"&lt;/li&gt; 	&lt;li&gt;fields XXXperBooking are sent only once, in the root booking object, as "fields"&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class BookingField
//    {
//        /// <summary>
//        /// Field label that can be shown to customers
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        /// <summary>
//        /// Value entered by the customer for this field
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Value { get; set; }

//        /// <summary>
//        /// true if this field must be populated for each participant. It should be in Booking.BookingItem.Participant.fields.&lt;p&gt;&lt;i&gt;Currently, required fields are not validated when a booking is created through public API, however, it's a good practice to support them in your client code. &lt;b&gt;However, soon the required fields will be enforced for public API booking.&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("requiredPerParticipant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool RequiredPerParticipant { get; set; }

//        /// <summary>
//        /// true if this field must be populated once per booking, regardless of the number of items or participants. It should be in Booking.fields&lt;p&gt;&lt;i&gt;Currently, required fields are not validated when a booking is created though public API, however, it's a good practice to support them in your client code &lt;b&gt;However, soon the required fields will be enforced for public API booking.&lt;/b&gt;.&lt;/i&gt;&lt;/p&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("requiredPerBooking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool RequiredPerBooking { get; set; }

//        /// <summary>
//        /// true if this field should be asked for each participant when doing a booking. It should be in Booking.BookingItem.Participant.fields.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("visiblePerParticipant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool VisiblePerParticipant { get; set; }

//        /// <summary>
//        /// true if this field should be asked once per booking, regardless of the number of items or participants. It should be in Booking.fields
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("visiblePerBooking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool VisiblePerBooking { get; set; }

//        /// <summary>
//        /// If this field only allows limited values to be selected from a list, they'll be included in this string, separated by \r\n
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("listOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ListOptions { get; set; }

//        /// <summary>
//        /// Booking field type which determines its format. See &lt;a href="/guides/API%20Related%20Articles/Booking%20Fields%20Format"&gt;Booking Fields Format&lt;/a&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingFieldFieldType FieldType { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Optional service or item that can be purchased when booking a specific product
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Extra
//    {
//        /// <summary>
//        /// ID of the extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Name of the extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Description of the extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Description { get; set; }

//        /// <summary>
//        /// Price for a single quantity of this extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Price { get; set; }

//        /// <summary>
//        /// Price type for this extra. Defines what quantities are allowed and how their price is calculated
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("extraPriceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ExtraPriceType ExtraPriceType { get; set; }

//        /// <summary>
//        /// Quantity booked
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int Quantity { get; set; }

//        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Image Image { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Image links.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Image
//    {
//        /// <summary>
//        /// Id of the image. Can be used for DELETE /{productCode}/image/{mediaId} service
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Full size image link
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("itemUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ItemUrl { get; set; }

//        /// <summary>
//        /// Thumbnail image link (240px)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("thumbnailUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ThumbnailUrl { get; set; }

//        /// <summary>
//        /// Medium size image link (480px)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("mediumSizeUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string MediumSizeUrl { get; set; }

//        /// <summary>
//        /// Large size image link (1280px)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("largeSizeUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string LargeSizeUrl { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A Price Option belongs to a product or products session. It holds the price details for a specific price type.Products can have one or many price options (I.e. Adult, Child, Family, etc.)
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PriceOption
//    {
//        /// <summary>
//        /// Price amount (I.e. "200.00")
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Price { get; set; }

//        /// <summary>
//        /// Label for this price (I.e. "Adult", "Child")
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [System.Obsolete]
//        public long Id { get; set; }

//        /// <summary>
//        /// How many seats one quantity of this price willuse. Used for availability calculations. For example 1 quantity of "Family of 4" will use 4 seats.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seatsUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int SeatsUsed { get; set; }

//        /// <summary>
//        /// Min booking quantity for the product price option. Can be specified, if the price option is fixed or a group type. For a successful booking of the product, the number of participants for this price option have to be greater or equal than this value.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("minQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int MinQuantity { get; set; }

//        /// <summary>
//        /// Max booking quantity for the product price option. Can be specified, if the price option is fixed or a grouptype. For a successful booking of the product, the number of participants for this price option have to be lesser or equal than this value.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("maxQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int MaxQuantity { get; set; }

//        /// <summary>
//        /// If this price is for a group, is the price for the whole group (TOTAL) or per quantity (EACH)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceGroupType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public PriceOptionPriceGroupType PriceGroupType { get; set; }

//        /// <summary>
//        /// Product code to which the price options belongs to. Since Rezdy introduced shared availability option for products, the product sessions can contain price overrides for all of the products, which share the sessions. Therefore it is necessary to filer only the price options matching the chosen product code on the client side, when processing /availability service responses.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProductCode { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Product object. Holds general details and settings of a specific tour, activity or event.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Product
//    {
//        /// <summary>
//        /// Type of this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductType ProductType { get; set; }

//        /// <summary>
//        /// Product name 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Product description is between 15 and 240 characters 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string ShortDescription { get; set; }

//        /// <summary>
//        /// Long product description, is between 100 and 15000 characters 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string Description { get; set; }

//        /// <summary>
//        /// Rezdy-generated unique Product code. Used by agents and for API calls
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string ProductCode { get; set; }

//        /// <summary>
//        /// Supplier-defined product code, used internally by the ther supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("internalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string InternalCode { get; set; }

//        /// <summary>
//        /// Rezdy internal ID of the company supplying this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("supplierId", Required = Newtonsoft.Json.Required.Always)]
//        public long SupplierId { get; set; }

//        /// <summary>
//        /// Alias of the company supplying this product. Company alias is a unique key and should be used to retrieve company details or in filters
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("supplierAlias", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SupplierAlias { get; set; }

//        /// <summary>
//        /// Name of the company supplying this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("supplierName", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string SupplierName { get; set; }

//        /// <summary>
//        /// Timezone used by this product and supplier. All Times must be converted to this timezone before being displayed to customers
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string Timezone { get; set; }

//        /// <summary>
//        /// General price indication for this product. It represents a display price only, therefore it does not affect a real booking price, which is calculated based on the price options.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("advertisedPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float AdvertisedPrice { get; set; }

//        /// <summary>
//        /// List of price options belonging to this product. 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceOptions", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public System.Collections.Generic.ICollection<PriceOption> PriceOptions { get; set; } = new System.Collections.ObjectModel.Collection<PriceOption>();

//        /// <summary>
//        /// Product prices Currency
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductCurrency Currency { get; set; }

//        /// <summary>
//        /// What a quantity for this product is. It can be people (I.e. participant, passenger, diver) or objects (Kayak, Helicopter, etc.)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("unitLabel", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string UnitLabel { get; set; }

//        /// <summary>
//        /// Plural version of unitLabel 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("unitLabelPlural", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string UnitLabelPlural { get; set; }

//        /// <summary>
//        /// Does this product require a quantity to be booked? True for most products. Can be false if the supplier can only provide one quantity at any single time. (I.e. private charters)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantityRequired", Required = Newtonsoft.Json.Required.Always)]
//        public bool QuantityRequired { get; set; }

//        /// <summary>
//        /// Represent the min booking quantity for the product. It can be setup for a supplier product. For a successful booking of the product, the total number of participants (regardless of pricing options), per booking item in the booking request, have to be greater or equal than this value.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantityRequiredMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int QuantityRequiredMin { get; set; }

//        /// <summary>
//        /// Represent the max booking quantity for the product. It can be setup for a supplier product. For a successful booking of the product, the total number of participants (regardless of pricing options), per booking item in the booking request, have to be lesser or equal than this value.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantityRequiredMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int QuantityRequiredMax { get; set; }

//        /// <summary>
//        /// List of images showcasing this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Image> Images { get; set; }

//        /// <summary>
//        /// &lt;p&gt;List of videos showcasing this product &lt;br/&gt;Videos will only be returned when a single product is loaded.&lt;/p&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("videos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Video> Videos { get; set; }

//        /// <summary>
//        /// Booking mode. Determines if this product needs availability or can be booked for any date.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("bookingMode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductBookingMode BookingMode { get; set; }

//        /// <summary>
//        /// A charter product means each session can only have a single booking, whatever the number of seats booked.  
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("charter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool Charter { get; set; }

//        /// <summary>
//        /// Specific terms and conditions for this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Terms { get; set; }

//        /// <summary>
//        /// General terms and conditions for all products from this supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("generalTerms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string GeneralTerms { get; set; }

//        /// <summary>
//        /// List of extras that can be booked with this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Extra> Extras { get; set; }

//        /// <summary>
//        /// List of booking fields required for this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("bookingFields", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public System.Collections.Generic.ICollection<BookingField> BookingFields { get; set; } = new System.Collections.ObjectModel.Collection<BookingField>();

//        /// <summary>
//        /// Supplier Xero account for this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("xeroAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string XeroAccount { get; set; }

//        /// <summary>
//        /// Confirmation mode. Determines if bookings are automatically confirmed or it they are pending
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("confirmMode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductConfirmMode ConfirmMode { get; set; }

//        /// <summary>
//        /// If confirmMode is MANUAL_THEN_AUTO or AUTO_THEN_MANUAL, determines the minimum number of participants per booking to trigger the change
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("confirmModeMinParticipants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int ConfirmModeMinParticipants { get; set; }

//        /// <summary>
//        /// If you are an agent, payment rules setup by the supplier for you to book this product 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("agentPaymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductAgentPaymentType AgentPaymentType { get; set; }

//        /// <summary>
//        /// Maximum commission % you can receive as an agent, when the supplier setup a percentage (Automated payments Rezdy fee is not included in the amount)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("maxCommissionPercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float MaxCommissionPercent { get; set; }

//        /// <summary>
//        /// Maximum commission amount you can receive as an agent, when the supplier setup a net rate (Automated payments Rezdy fee is not included in the amount)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("maxCommissionNetRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float MaxCommissionNetRate { get; set; }

//        /// <summary>
//        /// True if agent receive commission from extras, false otherwise.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("commissionIncludesExtras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool CommissionIncludesExtras { get; set; }

//        /// <summary>
//        ///  Supplier's Cancellation policy. Number of days before the tour a cancellation is allowed with full refund.&lt;br&gt;This is only used for automated payments (PAYOUTS) bookings
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("cancellationPolicyDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int CancellationPolicyDays { get; set; }

//        /// <summary>
//        /// The product creation date
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DateCreated { get; set; }

//        /// <summary>
//        /// * Minimum book ahead internal before session start time in minutes.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("minimumNoticeMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long MinimumNoticeMinutes { get; set; }

//        /// <summary>
//        /// * Duration of the product in minutes. 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("durationMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long DurationMinutes { get; set; }

//        /// <summary>
//        /// * The date of the last product update
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("dateUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DateUpdated { get; set; }

//        /// <summary>
//        /// * If pickups are configured for this product, the field will contain the id of the pickup location list created by the supplier.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("pickupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long PickupId { get; set; }

//        [Newtonsoft.Json.JsonProperty("locationAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Address LocationAddress { get; set; }

//        /// <summary>
//        /// Additional information for the product, that should be sent after a booking is completed (i.e. by email) to the customer. Useful for integration, when manual control of the entire customer booking experience is wanted, and the automatic confirmation e-mail from Rezdy had been suppressed.  
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AdditionalInformation { get; set; }

//        /// <summary>
//        /// List of product languages. The format of the language is ISO 639 two-letter code with BCP 47 language variants, separated by underscore e.g. en_au.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Languages { get; set; }

//        /// <summary>
//        /// List of tags related to the product. The format is [TAG_TYPE]:[TAG_VALUE] e.g. TYPE:ACTIVITY, CATEGORY:ABSEILING, INTENSITY:RELAXED, ACCESSIBILITY:VISION_IMPAIRED
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Tags { get; set; }

//        /// <summary>
//        /// List of taxes/fees associated with the product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Tax> Taxes { get; set; }

//        /// <summary>
//        /// This will store product meta data such as title and description
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productSeoTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ProductSeoTag> ProductSeoTags { get; set; }

//        /// <summary>
//        /// Signifies that customers will still be able to book this product even when there is not enough availability. Orders will have "On Hold" status, and no payment will be processed
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("waitListingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool WaitListingEnabled { get; set; }

//        /// <summary>
//        /// Specifies the method how QR Codes will be generated for this product. Valid types are:&lt;br&gt;&lt;li&gt;INTERNAL: QR Codes will be generated by rezdy for each participant when an order is created for this product&lt;/li&gt;&lt;li&gt;EXTERNAL: QR Codes will be randomly taken from a list of imported QR Codes&lt;/li&gt;&lt;p&gt;If nothing is specified, then no QR Codes will be generated when an order is created for this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("qrCodeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductQrCodeType QrCodeType { get; set; }

//        /// <summary>
//        /// Specifies how to output the barcodes when this product is booked. Valid types are:&lt;br&gt;&lt;li&gt;PARTICIPANT: Barcodes will be generated by rezdy for each participant when an booking is created for this product&lt;/li&gt;&lt;li&gt;ORDER: Barcodes will be generated by rezdy per booking&lt;/li&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("barcodeOutputType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductBarcodeOutputType BarcodeOutputType { get; set; }

//        /// <summary>
//        /// The URL for booking this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("bookingUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string BookingUrl { get; set; }

//        [Newtonsoft.Json.JsonProperty("apiBookingSupported", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool ApiBookingSupported { get; set; }

//        [Newtonsoft.Json.JsonProperty("multiProductBookingSupported", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool MultiProductBookingSupported { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Product Seo tags.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductSeoTag
//    {
//        /// <summary>
//        /// ID of Tag
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Type of Tag
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("metaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductSeoTagMetaType MetaType { get; set; }

//        /// <summary>
//        /// Value to put in the "key" attribute (depending on type it could be name, property or rel)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("attrKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AttrKey { get; set; }

//        /// <summary>
//        /// Value to put in the "value" attribute (depending on type it could be content or href)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("attrValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AttrValue { get; set; }

//        /// <summary>
//        /// Product's code this seo tag belongs to
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProductCode { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseProduct
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Product Product { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Tax object. Holds information such as the tax amount applied to an order
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Tax
//    {
//        /// <summary>
//        /// Rezdy internal ID of the company applying this tax
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("supplierId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long SupplierId { get; set; }

//        /// <summary>
//        /// Name/description of the tax
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        /// <summary>
//        /// Indicate Fee or Tax
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("taxFeeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public TaxFeeType TaxFeeType { get; set; }

//        /// <summary>
//        /// &lt;b&gt;PERCENT: &lt;/b&gt;The tax will be a percentage of the order total.&lt;br&gt;&lt;b&gt;FIXED_PER_QUANTITY: &lt;/b&gt;The tax will be a fixed amount e.g. $10 per quantity.&lt;br&gt;&lt;b&gt;FIXED_PER_ORDER: &lt;/b&gt;The tax will be a fixed amount e.g. $10 per booking item.&lt;br&gt;&lt;b&gt;FIXED_PER_DURATION: &lt;/b&gt;The tax will be a fixed amount e.g. $10 per duration unit.&lt;br&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public TaxType TaxType { get; set; }

//        /// <summary>
//        /// Percentage value of the fee/tax. This field will only contain a value if the taxType is PERCENT
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("taxPercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float TaxPercent { get; set; }

//        /// <summary>
//        /// The tax amount. This field will only contain a value if the taxType is one of the following: FIXED_PER_QUANTITY, FIXED_PER_ORDER, FIXED_PER_DURATION
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float TaxAmount { get; set; }

//        /// <summary>
//        /// Whether the tax is included in the price or not. This field will be displayed if the taxType is PERCENT &lt;br&gt;E.g. A $100 item with price INCLUSIVE tax of 10% will result in a $10 tax as part of the $100. A $100 item with price EXCLUSIVE tax of 10% will result in a $10 tax on top of the $100.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceInclusive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool PriceInclusive { get; set; }

//        /// <summary>
//        /// Whether a stacked tax with the specified percent is applied. &lt;br&gt; e.g. A $100 item with an exclusive tax of %10 will result in the price being $110. If compound is true, then an addition %10 of $110 will be added as tax.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("compound", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool Compound { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Video links.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Video
//    {
//        /// <summary>
//        /// video id
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        /// <summary>
//        /// Video platform (youtube, vimeo, etc …)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Platform { get; set; }

//        /// <summary>
//        /// Video url
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Url { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// PickupList object. Contains a list of pickup locations.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PickupList
//    {
//        /// <summary>
//        /// ID of this pickup
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Name of the pickup location list
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Global additional instructions for this pick up list
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("additionalNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AdditionalNotes { get; set; }

//        /// <summary>
//        /// Instructions for other locations that are not available in the pickupLocations list. E.g. For customer pick up location requests, a sample instruction for this field would be: 'We will contact you to confirm your pickup location'
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("otherLocationInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string OtherLocationInstructions { get; set; }

//        /// <summary>
//        /// List of all associated pickup locations for this list
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("pickupLocations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<PickupLocation> PickupLocations { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// PickupLocation object. Holds information about the a pickup location from the pickup list configured for the product.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PickupLocation
//    {
//        /// <summary>
//        /// &lt;p&gt;Pickup location name - free text name for the location.&lt;/p&gt;In a booking item object, it represents customer's pickup location name (if configured on product). It can be one name from pickup locations list of the booked product, or free text in case of the other pickup location option.&lt;p&gt;The value will be ignored, if the product does not allow pickups or if the location name does not match one of the product's pickup locations and 'other' pickup option is not enabled for the product pickup.&lt;/p&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string LocationName { get; set; }

//        /// <summary>
//        /// Address of the pickup location&lt;br&gt;In a booking item object, it represents a chosen pickup address for the booked item.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Address { get; set; }

//        /// <summary>
//        /// google maps calculated latitude of the pickup address
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public double Latitude { get; set; }

//        /// <summary>
//        /// google maps calculated latitude of the pickup address
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public double Longitude { get; set; }

//        /// <summary>
//        /// Pickup time in minutes, prior to the tour start time.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("minutesPrior", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int MinutesPrior { get; set; }

//        /// <summary>
//        /// Additional instructions for the pickup location.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("additionalInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AdditionalInstructions { get; set; }

//        /// <summary>
//        /// &lt;p&gt;Present only in booking service response&lt;/p&gt;In a booking item object, it represents a calculated pickup time, in supplier's local timezone. Shown when the pickup was chosen for the booked item and pickup location contains duration.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("pickupTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string PickupTime { get; set; }

//        /// <summary>
//        /// &lt;p&gt;Present only in booking service response&lt;/p&gt;Chosen pickup instructions (general and location specific). Shown when the pickup was chosen for the booked item.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("pickupInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string PickupInstructions { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponsePickupList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("pickupList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public PickupList PickupList { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseNoData
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Partial optional service or item that can be purchased when booking a specific product
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ExtraRequest
//    {
//        /// <summary>
//        /// ID of the extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Name of the extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Description of the extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Description { get; set; }

//        /// <summary>
//        /// Price for a single quantity of this extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Price { get; set; }

//        /// <summary>
//        /// Price type for this extra. Defines what quantities are allowed and how their price is calculated
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("extraPriceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ExtraRequestExtraPriceType ExtraPriceType { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseExtra
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("extra", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public ExtraRequest Extra { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Booking update object used to update a booking in Rezdy's system.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class BookingUpdate
//    {
//        /// <summary>
//        /// Order number. This is the number you should give to customers and print on booking confirmations. Order number is generated by the system, therefore, even if it is specified in the booking request, it will be overwritten.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string OrderNumber { get; set; }

//        /// <summary>
//        /// Status of this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingUpdateStatus Status { get; set; }

//        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public User CreatedBy { get; set; }

//        /// <summary>
//        /// Rezdy internal ID of the agent company attached to this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long ResellerId { get; set; }

//        [Newtonsoft.Json.JsonProperty("resellerUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public User ResellerUser { get; set; }

//        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Customer Customer { get; set; }

//        /// <summary>
//        /// List of items in this booking. A booking can contain multiple products. Each BookingItem is a separate product with its own set of quantities and participant details.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingItemCreate> Items { get; set; }

//        /// <summary>
//        /// Comments only visible internally by the supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("internalNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string InternalNotes { get; set; }

//        /// <summary>
//        /// List of custom fields that are required "once per booking" by all the products in this booking 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingField> Fields { get; set; }

//        /// <summary>
//        /// External reseller reference, can be used to pass internal booking number. This reference will be shown to a supplier, also it will appear on reports and can be used to filter orders. Maxiumum number of characters is 30
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ResellerReference { get; set; }

//        /// <summary>
//        /// Comments only visible by the agent and the supplier. This should be used by the agent to send voucher numbers/redemption codes to suppliers.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerComments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ResellerComments { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// An item inside a booking request to specify a unique product/startTime combination
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class BookingItemCreate
//    {
//        /// <summary>
//        /// Unique Rezdy code of the product in this BookingItem
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProductCode { get; set; }

//        /// <summary>
//        /// Start time of the session for this BookingItem
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset StartTime { get; set; }

//        /// <summary>
//        /// End time of the session for this BookingItem
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset EndTime { get; set; }

//        /// <summary>
//        /// Start time of the session for this BookingItem in supplier's local timezone.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string StartTimeLocal { get; set; }

//        /// <summary>
//        /// End time of the session for this BookingItem in supplier's local timezone.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string EndTimeLocal { get; set; }

//        /// <summary>
//        /// List of quantities booked by this item. Each Quantity must be linked to a Product price option via its label or ID.If the product only has one price option, only 'Quantity.value' is required.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Quantity> Quantities { get; set; }

//        /// <summary>
//        /// Amount charged for this BookingItem. This is automatically generated based on quantities, but you can override the amount by entering a value. If automated payment method is used for the booked product, the Amount of the booked item&lt;br&gt;has to be grater than Net Rate sum of the booked quantities and Rezdy processing fee.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Amount { get; set; }

//        /// <summary>
//        /// List of Extras booked with this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Extra> Extras { get; set; }

//        /// <summary>
//        /// List of participants. Each participant object contains all the booking fields for a single participant. 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("participants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Participant> Participants { get; set; }

//        /// <summary>
//        /// Subtotal is the BookingItem.amount plus extras costs plus taxes and fees
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("subtotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Subtotal { get; set; }

//        [Newtonsoft.Json.JsonProperty("pickupLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public PickupLocation PickupLocation { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// The customer is the person making the booking, and most of the time paying for it.&lt;br&gt;It differs from Participants, who are the people attending a tour
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Customer
//    {
//        /// <summary>
//        /// Rezdy internal ID of the customer
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// First name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string FirstName { get; set; }

//        /// <summary>
//        /// Middle name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string MiddleName { get; set; }

//        /// <summary>
//        /// Last Name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string LastName { get; set; }

//        /// <summary>
//        /// Full name - generated from first/middle/last names
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Email
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Email { get; set; }

//        /// <summary>
//        /// Company name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CompanyName { get; set; }

//        /// <summary>
//        /// Preferred Phone number
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Phone { get; set; }

//        /// <summary>
//        /// Mobile phone number
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Mobile { get; set; }

//        /// <summary>
//        /// Fax number
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Fax { get; set; }

//        /// <summary>
//        /// Skype alias
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("skype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Skype { get; set; }

//        /// <summary>
//        /// Date of birth
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("dob", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset Dob { get; set; }

//        /// <summary>
//        /// Preferred language. Should be a 2 letter ISO country code
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("preferredLanguage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string PreferredLanguage { get; set; }

//        /// <summary>
//        /// Subscribe to the newsletter
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("newsletter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool Newsletter { get; set; }

//        /// <summary>
//        /// Agree to receive marketing emails
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("marketing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool Marketing { get; set; }

//        /// <summary>
//        /// How did you hear about us?
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("aboutUs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AboutUs { get; set; }

//        /// <summary>
//        /// Title
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public CustomerTitle Title { get; set; }

//        /// <summary>
//        /// Gender: MALE or FEMALE
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public CustomerGender Gender { get; set; }

//        /// <summary>
//        /// Address
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AddressLine { get; set; }

//        /// <summary>
//        /// Extended Address
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AddressLine2 { get; set; }

//        /// <summary>
//        /// Postcode / ZIP
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string PostCode { get; set; }

//        /// <summary>
//        /// City/Town/Suburb
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string City { get; set; }

//        /// <summary>
//        /// State/County/Region
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string State { get; set; }

//        /// <summary>
//        /// 2 letter ISO country code
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CountryCode { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Details about a single participant for a single BookingItem.&lt;br&gt;The participant is a person attending a tour. It differs from the Customer, who is the person making the booking and most of the time paying for it. 
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Participant
//    {
//        /// <summary>
//        /// List of BookingField for this participant
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingField> Fields { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Quantity of a single price option attached to a BookingItem.&lt;ul&gt;&lt;li&gt;If the product only has 1 price option, only "Quantity.value" is required.&lt;/li&gt;&lt;li&gt;If the product has multiple price options, "Quantity.optionLabel" is also required.&lt;/li&gt;&lt;li&gt;It is recommended to use "Quantity.optionLabel" and optionally "Quantity.optionPrice" instead of "Quantity.optionId" because the latter can vary depending on the session booked.&lt;/li&gt;&lt;/ul&gt;I.e. enter optionLabel = "Adult", optionPrice = 100 and value = "2" to book for 2 x Adults ticket for 100
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Quantity
//    {
//        /// <summary>
//        /// Price option ID
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("optionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long OptionId { get; set; }

//        /// <summary>
//        /// Price option label
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("optionLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string OptionLabel { get; set; }

//        /// <summary>
//        /// Price option price for a single quantity
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("optionPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float OptionPrice { get; set; }

//        /// <summary>
//        /// Quantity actually booked
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
//        public int Value { get; set; }

//        /// <summary>
//        /// Commission type used for this booking item quantity
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("commissionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public QuantityCommissionType CommissionType { get; set; }

//        /// <summary>
//        /// If commissionType is NET, commissionValue is net amount, if commissionType is COMMISSION, commissionValue is percentage commission
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("commissionValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float CommissionValue { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Internal Rezdy user details. This is a Rezdy application user who belongs to a Rezdy agent or supplier company.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class User
//    {
//        /// <summary>
//        /// Unique Rezdy user code
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Code { get; set; }

//        /// <summary>
//        /// First name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string FirstName { get; set; }

//        /// <summary>
//        /// Last name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string LastName { get; set; }

//        /// <summary>
//        /// Email
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Email { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Booking object. Lists all the possible fields for all product types and scenarios. Most of them are not required when sending a new booking.&lt;br&gt;A single Booking can be used to book multiple products, each of them being a BookingItem. All the products of one booking have to be from the same supplier.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Booking
//    {
//        /// <summary>
//        /// Order number. This is the number you should give to customers and print on booking confirmations. Order number is generated by the system, therefore, even if it is specified in the booking request, it will be overwritten.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string OrderNumber { get; set; }

//        /// <summary>
//        /// Status of this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingStatus Status { get; set; }

//        /// <summary>
//        /// Rezdy internal ID of the company supplying this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("supplierId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long SupplierId { get; set; }

//        /// <summary>
//        /// Name of the company supplying this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("supplierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SupplierName { get; set; }

//        /// <summary>
//        /// Alias of the company supplying this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("supplierAlias", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SupplierAlias { get; set; }

//        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public User CreatedBy { get; set; }

//        /// <summary>
//        /// Rezdy internal ID of the agent company attached to this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long ResellerId { get; set; }

//        /// <summary>
//        /// Name of the agent company attached to this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ResellerName { get; set; }

//        /// <summary>
//        /// Alias of the agent company attached to this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerAlias", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ResellerAlias { get; set; }

//        [Newtonsoft.Json.JsonProperty("resellerUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public User ResellerUser { get; set; }

//        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Customer Customer { get; set; }

//        /// <summary>
//        /// List of items in this booking. A booking can contain multiple products. Each BookingItem is a separate product with its own set of quantities and participant details.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingItem> Items { get; set; }

//        /// <summary>
//        /// Total booking amount
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float TotalAmount { get; set; }

//        /// <summary>
//        /// Booking Currency
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("totalCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingTotalCurrency TotalCurrency { get; set; }

//        /// <summary>
//        /// Amount already paid
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("totalPaid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float TotalPaid { get; set; }

//        /// <summary>
//        /// Amount still due for this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("totalDue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float TotalDue { get; set; }

//        /// <summary>
//        /// Date this booking was created
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DateCreated { get; set; }

//        /// <summary>
//        /// Date this booking was last updated
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("dateUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DateUpdated { get; set; }

//        /// <summary>
//        /// Date this booking was confirmed
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("dateConfirmed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DateConfirmed { get; set; }

//        /// <summary>
//        /// Date this booking was fully paid
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("datePaid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DatePaid { get; set; }

//        /// <summary>
//        /// Date this booking was reconciled with the agent
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("dateReconciled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DateReconciled { get; set; }

//        /// <summary>
//        /// Special requirements entered by the customer. Visible to both customer and supplier.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Comments { get; set; }

//        /// <summary>
//        /// Comments only visible internally by the supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("internalNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string InternalNotes { get; set; }

//        /// <summary>
//        /// List of payments recorded for this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingPayment> Payments { get; set; }

//        [Newtonsoft.Json.JsonProperty("creditCard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public CreditCard CreditCard { get; set; }

//        /// <summary>
//        /// List of custom fields that are required "once per booking" by all the products in this booking 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingField> Fields { get; set; }

//        /// <summary>
//        /// Source of this booking viewed from the supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingSource Source { get; set; }

//        /// <summary>
//        /// Referrer code 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("sourceReferrer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SourceReferrer { get; set; }

//        /// <summary>
//        /// Source of this booking viewed from the agent
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingResellerSource ResellerSource { get; set; }

//        /// <summary>
//        /// Agent code defined by the supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("sourceChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SourceChannel { get; set; }

//        /// <summary>
//        /// Comments only visible by the agent and the supplier. This should be used by the agent to send voucher numbers/redemption codes to suppliers.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerComments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ResellerComments { get; set; }

//        /// <summary>
//        /// Credit card surcharge calculated for this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("surcharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Surcharge { get; set; }

//        /// <summary>
//        /// Calculated commission that the agent should receive for this booking 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Commission { get; set; }

//        /// <summary>
//        /// List of vouchers (Gift cards) that have been redeemed to pay for this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("vouchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Vouchers { get; set; }

//        /// <summary>
//        /// Promo code that has been applied to this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("coupon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Coupon { get; set; }

//        /// <summary>
//        /// Payment option selected by the customer when making an online booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("paymentOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingPaymentOption PaymentOption { get; set; }

//        /// <summary>
//        /// Flag to control if a booking confirmation email should be send to the customer after this booking is created.&lt;br&gt;This will also send other types of customer notifications when setup by the supplier (I.e. SMS, Gift cards) 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("sendNotifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool SendNotifications { get; set; } = true;

//        /// <summary>
//        /// External reseller reference, can be used to pass internal booking number. This reference will be shown to a supplier, also it will appear on reports and can be used to filter orders. Maxiumum number of characters is 30
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ResellerReference { get; set; }

//        /// <summary>
//        /// Declares the redemption code format customers will receive if the booking was created with barcodes.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("barcodeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingBarcodeType BarcodeType { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A BookingItem is a unique product/startTime combination in a booking
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class BookingItem
//    {
//        /// <summary>
//        /// Name of the product in this BookingItem 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProductName { get; set; }

//        /// <summary>
//        /// Unique Rezdy code of the product in this BookingItem
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProductCode { get; set; }

//        /// <summary>
//        /// Start time of the session for this BookingItem
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset StartTime { get; set; }

//        /// <summary>
//        /// End time of the session for this BookingItem
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset EndTime { get; set; }

//        /// <summary>
//        /// Start time of the session for this BookingItem in supplier's local timezone.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string StartTimeLocal { get; set; }

//        /// <summary>
//        /// End time of the session for this BookingItem in supplier's local timezone.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string EndTimeLocal { get; set; }

//        /// <summary>
//        /// List of quantities booked by this item. Each Quantity must be linked to a Product price option via its label or ID.If the product only has one price option, only 'Quantity.value' is required.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Quantity> Quantities { get; set; }

//        /// <summary>
//        /// Total quantity booked by all the Quantity. For example if the booking is for 2 Adults and 1 Child, totalQuantity will be 3.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int TotalQuantity { get; set; }

//        /// <summary>
//        /// Amount charged for this BookingItem. This is automatically generated based on quantities, but you can override the amount by entering a value. If automated payment method is used for the booked product, the Amount of the booked item&lt;br&gt;has to be grater than Net Rate sum of the booked quantities and Rezdy processing fee.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Amount { get; set; }

//        /// <summary>
//        /// List of Extras booked with this product
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Extra> Extras { get; set; }

//        /// <summary>
//        /// List of participants. Each participant object contains all the booking fields for a single participant. 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("participants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Participant> Participants { get; set; }

//        /// <summary>
//        /// From location. Only used by Shuttle and Transfer products
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("transferFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string TransferFrom { get; set; }

//        /// <summary>
//        /// To location. Only used by Shuttle and Transfer products
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("transferTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string TransferTo { get; set; }

//        /// <summary>
//        /// Is this a one-way (false) or a return trip (true)? Only used by Shuttle and Transfer products
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("transferReturn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool TransferReturn { get; set; }

//        /// <summary>
//        /// Subtotal is the BookingItem.amount plus extras costs plus taxes and fees
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("subtotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Subtotal { get; set; }

//        [Newtonsoft.Json.JsonProperty("pickupLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public PickupLocation PickupLocation { get; set; }

//        /// <summary>
//        /// List of vouchers created by this booking item - when the product is bought as a gift or is a gift card
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("vouchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Voucher> Vouchers { get; set; }

//        /// <summary>
//        /// Total tax applied to this booking item.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("totalItemTax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float TotalItemTax { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Record of an already processed payment.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class BookingPayment
//    {
//        /// <summary>
//        /// Type of payment
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingPaymentType Type { get; set; }

//        /// <summary>
//        /// Payment amount
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Amount { get; set; }

//        /// <summary>
//        /// Currency for this payment&lt;br&gt;Payments must be in the same currency than the order's totalCurrency.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingPaymentCurrency Currency { get; set; }

//        /// <summary>
//        /// Date this payment was processed
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset Date { get; set; }

//        /// <summary>
//        /// Reference or transaction code
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        /// <summary>
//        /// Payment recipient.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingPaymentRecipient Recipient { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    ///  Credit card details.&lt;p&gt;Used to send payment details for a booking&lt;/p&gt;
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreditCard
//    {
//        /// <summary>
//        /// Full name on the credit card
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("cardName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CardName { get; set; }

//        /// <summary>
//        /// Type of card
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("cardType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public CreditCardCardType CardType { get; set; }

//        /// <summary>
//        /// &lt;ul&gt;Expiry month of the card&lt;li&gt;01 : January&lt;/li&gt;&lt;li&gt;02 : February&lt;/li&gt;&lt;li&gt;03 : March&lt;/li&gt;&lt;li&gt;04 : April&lt;/li&gt;&lt;li&gt;05 : May&lt;/li&gt;&lt;li&gt;06 : June&lt;/li&gt;&lt;li&gt;07 : July&lt;/li&gt;&lt;li&gt;08 : August&lt;/li&gt;&lt;li&gt;09 : September&lt;/li&gt;&lt;li&gt;10 : October&lt;/li&gt;&lt;li&gt;11 : November&lt;/li&gt;&lt;li&gt;12 : December&lt;/li&gt;&lt;/ul&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("expiryMonth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ExpiryMonth { get; set; }

//        /// <summary>
//        /// Expiry year of the card in 4 digits&lt;br&gt;(i.e 2015 / 2016 ...)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("expiryYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ExpiryYear { get; set; }

//        /// <summary>
//        /// Full Credit card number, no spaces or special characters
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("cardNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CardNumber { get; set; }

//        /// <summary>
//        /// Credit Card CVV / CVN
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("cardSecurityNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CardSecurityNumber { get; set; }

//        /// <summary>
//        ///  Credit card Token generated by client libraries. Use instead of other card attributes for supported gateways.&lt;br&gt;For example when using Stripe.js, only send the cardToken attribute. Do not send cardNumber or any other attribute.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("cardToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CardToken { get; set; }

//        [Newtonsoft.Json.JsonProperty("cardCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CardCountry { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseBooking
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("booking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Booking Booking { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A Voucher is a gift card that can be used to pay for a booking.&lt;br&gt;It can also be generated by a booking when a customer buys a Gift Card.&lt;br&gt;This is not a "confirmation voucher", you should use Booking.orderNumber as a confirmation code to show to customers.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Voucher
//    {
//        /// <summary>
//        /// Unique voucher code
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Code { get; set; }

//        /// <summary>
//        /// Current voucher status
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public VoucherStatus Status { get; set; }

//        /// <summary>
//        /// Agent code attached to this vouche
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("internalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string InternalReference { get; set; }

//        /// <summary>
//        /// Internal notes only visible by the supplier of this voucher
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("internalNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string InternalNotes { get; set; }

//        /// <summary>
//        /// Date this voucher was created
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset IssueDate { get; set; }

//        /// <summary>
//        /// Date this voucher will expire
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset ExpiryDate { get; set; }

//        /// <summary>
//        /// The value of the voucher. There are different representations of the value - nominal, percentage or empty - in case of the payment for the whole product, see valueType
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Value { get; set; }

//        /// <summary>
//        /// &lt;dl&gt;&lt;dt&gt;VALUE_LIMITPRODUCT&lt;/dt&gt;&lt;dd&gt;Voucher nominal value discount, limited to a certain product&lt;/dd&gt;&lt;dt&gt;VALUE&lt;/dt&gt;&lt;dd&gt;Voucher nominal value discount for any product&lt;/dd&gt;&lt;dt&gt;VALUE_LIMITCATALOG&lt;/dt&gt;&lt;dd&gt;Voucher nominal value discount, limited to a certain product category&lt;/dd&gt;&lt;dt&gt;PERCENT_LIMITPRODUCT&lt;/dt&gt;&lt;dd&gt;Voucher percentage value discount, limited to a certain product&lt;/dd&gt;&lt;dt&gt;PERCENT&lt;/dt&gt;&lt;dd&gt;Voucher percentage value discount for any product&lt;/dd&gt;&lt;dt&gt;PERCENT_LIMITCATALOG&lt;/dt&gt;&lt;dd&gt;Voucher percentage value discount, limited to a certain product category&lt;/dd&gt;&lt;dt&gt;PRODUCT&lt;/dt&gt;&lt;dd&gt;Voucher can be used as a payment method for a specific product&lt;/dd&gt;&lt;/dl&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("valueType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public VoucherValueType ValueType { get; set; }

//        /// <summary>
//        /// If the voucher was generated from an order - by purchasing a gift card or product as a gift card, it will contain the orderNumber which created the voucher. Null for vouchers manually created by user.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("sourceOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SourceOrder { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Updates session request data.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SessionUpdateRequest
//    {
//        /// <summary>
//        /// Update the total number of seats for this session. The total seats does not change after a booking is made. The total number of seats can not be less than 0.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int Seats { get; set; }

//        /// <summary>
//        /// List of price options, which will override the product level price. Price options have to be a subset of the product price options, thus you can not create new price options, use product update service to do so.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<PriceOption> PriceOptions { get; set; }

//        /// <summary>
//        /// Update the current availability for this session. The session total number of seats after updating the seats available can not be less than 0.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seatsAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int SeatsAvailable { get; set; }

//        /// <summary>
//        /// If true, this session lasts all day and no time should be shown to customers. Technically the session will be from midnight to midnight.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("allDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool AllDay { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseSession
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("session", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Session Session { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A Session holds availability for a unique product / start time combination and also the rates for the session booking.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Session
//    {
//        /// <summary>
//        /// Rezdy internal ID for this session
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Rezdy unique productCode linked to this session
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProductCode { get; set; }

//        /// <summary>
//        /// Start Time of this session. This time should be used when showing customers the booking date/time. It should be sent in BookingItem.startTime when making new bookings 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset StartTime { get; set; }

//        /// <summary>
//        /// End time of this session. Used to show the customer how long that tour will last
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset EndTime { get; set; }

//        /// <summary>
//        /// Start Time of this session in supplier's local timezone. This time should be used when showing customers the booking date/time. It should be sent in BookingItem.startTimeLocal when making new bookings 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string StartTimeLocal { get; set; }

//        /// <summary>
//        /// End time of this session in supplier's local timezone. Used to show the customer how long that tour will last
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string EndTimeLocal { get; set; }

//        /// <summary>
//        /// If true, this session lasts all day and no time should be shown to customers. Technically the session will be from midnight to midnight.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("allDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool AllDay { get; set; }

//        /// <summary>
//        /// Total number of seats for this session. Does not change after a booking is made
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int Seats { get; set; }

//        /// <summary>
//        /// Current availability for this session.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seatsAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int SeatsAvailable { get; set; }

//        /// <summary>
//        /// List of price options attached to this session. Most of the time they'll match the product's price options, but they can be used to change the price of specific dates/times (I.e. high/low season, weekday/weekend, etc.)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<PriceOption> PriceOptions { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Data form for upload
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class FileUploadForm
//    {
//        /// <summary>
//        /// Image file to be uploaded
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public object File { get; set; } = new object();

//        /// <summary>
//        /// Optional image name override
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Filename { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseImage
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Image Img { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// new product
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductCreateRequest
//    {
//        /// <summary>
//        /// Product name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Product description is between 15 and 240 characters.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string ShortDescription { get; set; }

//        /// <summary>
//        /// Long product description, is between 100 and 15000 characters.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string Description { get; set; }

//        /// <summary>
//        /// General price indication for this product. It represents a display price only, therefore it does not affect a real booking price, which is calculated based on the price options.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("advertisedPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float AdvertisedPrice { get; set; }

//        /// <summary>
//        /// Specific terms and conditions for this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Terms { get; set; }

//        /// <summary>
//        /// List of booking fields required for this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("bookingFields", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public System.Collections.Generic.ICollection<BookingFieldCreate> BookingFields { get; set; } = new System.Collections.ObjectModel.Collection<BookingFieldCreate>();

//        /// <summary>
//        /// Type of this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductCreateRequestProductType ProductType { get; set; }

//        /// <summary>
//        /// Supplier-defined product code, used internally by the supplier.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("internalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string InternalCode { get; set; }

//        /// <summary>
//        /// List of price options belonging to this product. 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceOptions", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public System.Collections.Generic.ICollection<PriceOptionCreate> PriceOptions { get; set; } = new System.Collections.ObjectModel.Collection<PriceOptionCreate>();

//        /// <summary>
//        /// What a quantity for this product is. It can be people (I.e. participant, passenger, diver) or objects (Kayak, Helicopter, etc.)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("unitLabel", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string UnitLabel { get; set; }

//        /// <summary>
//        /// Plural version of unitLabel.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("unitLabelPlural", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string UnitLabelPlural { get; set; }

//        /// <summary>
//        /// Does this product require a quantity to be booked? True for most products. Can be false if the supplier can only provide one quantity at any single time (I.e. private charters) or a price of a booking is fixed regardless of quantity
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantityRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool QuantityRequired { get; set; }

//        /// <summary>
//        /// Represent the min booking quantity for the product. It can be setup for a supplier product. For a successful booking of the product, the total number of participants (regardless of pricing options), per booking item in the booking request, have to be greater or equal than this value.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantityRequiredMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int QuantityRequiredMin { get; set; }

//        /// <summary>
//        /// Represent the max booking quantity for the product. It can be setup for a supplier product. For a successful booking of the product, the total number of participants (regardless of pricing options), per booking item in the booking request, have to be lesser or equal than this value.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("quantityRequiredMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int QuantityRequiredMax { get; set; }

//        /// <summary>
//        /// Booking mode. Determines if this product needs availability or can be booked for any date.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("bookingMode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductCreateRequestBookingMode BookingMode { get; set; }

//        /// <summary>
//        /// A charter product means each session can only have a single booking, whatever the number of seats booked.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("charter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool Charter { get; set; }

//        /// <summary>
//        /// Supplier Xero account for this product.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("xeroAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string XeroAccount { get; set; }

//        /// <summary>
//        /// Confirmation mode. Determines if bookings are automatically confirmed or it they are pending.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("confirmMode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductCreateRequestConfirmMode ConfirmMode { get; set; }

//        /// <summary>
//        /// If confirmMode is MANUAL_THEN_AUTO or AUTO_THEN_MANUAL, determines the minimum number of participants per booking to trigger the change.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("confirmModeMinParticipants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int ConfirmModeMinParticipants { get; set; }

//        /// <summary>
//        /// Minimum book ahead interval for he product in minutes.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("minimumNoticeMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long MinimumNoticeMinutes { get; set; }

//        /// <summary>
//        /// Duration of the product in minutes.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("durationMinutes", Required = Newtonsoft.Json.Required.Always)]
//        public long DurationMinutes { get; set; }

//        /// <summary>
//        /// If pickups are configured for this product, the field will contain the id of the pickup location list created by the supplier.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("pickupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long PickupId { get; set; }

//        [Newtonsoft.Json.JsonProperty("locationAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Address LocationAddress { get; set; }

//        /// <summary>
//        /// Additional information for the product, that should be sent after a booking is completed (i.e. by email) to the customer. Useful for integration, when manual control of the entire customer booking experience is wanted, and the automatic confirmation e-mail from Rezdy had been suppressed.  
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AdditionalInformation { get; set; }

//        /// <summary>
//        /// List of product languages. The format of the language is ISO 639 two-letter code with BCP 47 language variants, separated by underscore e.g. en_au.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Languages { get; set; }

//        /// <summary>
//        /// List of extras IDs.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Extra> Extras { get; set; }

//        /// <summary>
//        /// Specifies how to output the barcodes when this product is booked. Valid types are:&lt;br&gt;&lt;li&gt;PARTICIPANT: Barcodes will be generated by rezdy for each participant when an booking is created for this product&lt;/li&gt;&lt;li&gt;ORDER: Barcodes will be generated by rezdy per booking&lt;/li&gt;
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("barcodeOutputType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ProductCreateRequestBarcodeOutputType BarcodeOutputType { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// New extra
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ExtraCreateRequest
//    {
//        /// <summary>
//        /// Name of the extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Description of the extra.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Description { get; set; }

//        /// <summary>
//        /// Price for a single quantity of this extra
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Price { get; set; }

//        /// <summary>
//        /// Price type for this extra. Defines what quantities are allowed and how their price is calculated
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("extraPriceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public ExtraCreateRequestExtraPriceType ExtraPriceType { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseCustomer
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Customer Customer { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Booking create object used to create a booking in Rezdy's system. Lists all the possible fields for all product types and scenarios. Most of them are not required when sending a new booking.&lt;br&gt;A single Booking can be used to book multiple products, each of them being a BookingItem. All the products of one booking have to be from the same supplier.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class BookingCreate
//    {
//        /// <summary>
//        /// Order number. This is the number you should give to customers and print on booking confirmations. Order number is generated by the system, therefore, even if it is specified in the booking request, it will be overwritten.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string OrderNumber { get; set; }

//        /// <summary>
//        /// Status of this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingCreateStatus Status { get; set; }

//        /// <summary>
//        /// Rezdy internal ID of the agent company attached to this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long ResellerId { get; set; }

//        [Newtonsoft.Json.JsonProperty("resellerUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public User ResellerUser { get; set; }

//        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Customer Customer { get; set; }

//        /// <summary>
//        /// List of items in this booking. A booking can contain multiple products. Each BookingItem is a separate product with its own set of quantities and participant details.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingItemCreate> Items { get; set; }

//        /// <summary>
//        /// Total booking amount
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float TotalAmount { get; set; }

//        /// <summary>
//        /// Date this booking was fully paid
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("datePaid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DatePaid { get; set; }

//        /// <summary>
//        /// Date this booking was reconciled with the agent
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("dateReconciled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset DateReconciled { get; set; }

//        /// <summary>
//        /// Special requirements entered by the customer. Visible to both customer and supplier.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Comments { get; set; }

//        /// <summary>
//        /// Comments only visible internally by the supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("internalNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string InternalNotes { get; set; }

//        /// <summary>
//        /// List of payments recorded for this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingPayment> Payments { get; set; }

//        [Newtonsoft.Json.JsonProperty("creditCard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public CreditCard CreditCard { get; set; }

//        /// <summary>
//        /// List of custom fields that are required "once per booking" by all the products in this booking 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<BookingField> Fields { get; set; }

//        /// <summary>
//        /// Source of this booking viewed from the supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingCreateSource Source { get; set; }

//        /// <summary>
//        /// Referrer code 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("sourceReferrer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SourceReferrer { get; set; }

//        /// <summary>
//        /// Source of this booking viewed from the agent
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingCreateResellerSource ResellerSource { get; set; }

//        /// <summary>
//        /// Agent code defined by the supplier
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("sourceChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SourceChannel { get; set; }

//        /// <summary>
//        /// Comments only visible by the agent and the supplier. This should be used by the agent to send voucher numbers/redemption codes to suppliers.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerComments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ResellerComments { get; set; }

//        /// <summary>
//        /// Credit card surcharge calculated for this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("surcharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public float Surcharge { get; set; }

//        /// <summary>
//        /// List of vouchers (Gift cards) that have been redeemed to pay for this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("vouchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Vouchers { get; set; }

//        /// <summary>
//        /// Promo code that has been applied to this booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("coupon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Coupon { get; set; }

//        /// <summary>
//        /// Payment option selected by the customer when making an online booking
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("paymentOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingCreatePaymentOption PaymentOption { get; set; }

//        /// <summary>
//        /// Flag to control if a booking confirmation email should be send to the customer after this booking is created.&lt;br&gt;This will also send other types of customer notifications when setup by the supplier (I.e. SMS, Gift cards) 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("sendNotifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool SendNotifications { get; set; } = true;

//        /// <summary>
//        /// External reseller reference, can be used to pass internal booking number. This reference will be shown to a supplier, also it will appear on reports and can be used to filter orders. Maxiumum number of characters is 30
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("resellerReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ResellerReference { get; set; }

//        /// <summary>
//        /// Declares the redemption code format customers will receive if the booking was created with barcodes.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("barcodeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public BookingCreateBarcodeType BarcodeType { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Session data must only include one of seats, seatsAvailable or price options.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SessionUpdateBatchRequest
//    {
//        /// <summary>
//        /// Update the total number of seats for this session. The total seats does not change after a booking is made. The total number of seats can not be less than 0.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int Seats { get; set; }

//        /// <summary>
//        /// List of price options, which will override the product level price. Price options have to be a subset of the product price options, thus you can not create new price options, use product update service to do so.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<PriceOption> PriceOptions { get; set; }

//        /// <summary>
//        /// Update the current availability for this session. The session total number of seats after updating the seats available can not be less than 0.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seatsAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int SeatsAvailable { get; set; }

//        /// <summary>
//        /// If true, this session lasts all day and no time should be shown to customers. Technically the session will be from midnight to midnight.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("allDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool AllDay { get; set; }

//        /// <summary>
//        /// Rezdy unique productCode linked to this session
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string ProductCode { get; set; }

//        /// <summary>
//        /// Batch update start interval
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset StartTime { get; set; }

//        /// <summary>
//        /// Batch update end interval
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset EndTime { get; set; }

//        /// <summary>
//        /// Batch update start interval in supplier's local timezone.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string StartTimeLocal { get; set; }

//        /// <summary>
//        /// Batch update end interval in supplier's local timezone.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string EndTimeLocal { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseSessionList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("sessions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Session> Sessions { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Create session request data.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SessionCreateRequest
//    {
//        /// <summary>
//        /// Rezdy unique productCode linked to this session
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string ProductCode { get; set; }

//        /// <summary>
//        /// Start Time of this session. This time should be used when showing customers the booking date/time. It should be sent in BookingItem.startTime when making new bookings 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset StartTime { get; set; }

//        /// <summary>
//        /// End time of this session. Used to show the customer how long that tour will last
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset EndTime { get; set; }

//        /// <summary>
//        /// Start Time of this session in supplier's local timezone. This time should be used when showing customers the booking date/time. It should be sent in BookingItem.startTimeLocal when making new bookings 
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("startTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string StartTimeLocal { get; set; }

//        /// <summary>
//        /// End time of this session in supplier's local timezone. Used to show the customer how long that tour will last
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("endTimeLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string EndTimeLocal { get; set; }

//        /// <summary>
//        /// Total number of seats for this session. Does not change after a booking is made
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("seats", Required = Newtonsoft.Json.Required.Always)]
//        public int Seats { get; set; }

//        /// <summary>
//        /// List of price options attached to this session. Most of the time they'll match the product's price options, but they can be used to change the price of specific dates/times (I.e. high/low season, weekday/weekend, etc.)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("priceOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<PriceOption> PriceOptions { get; set; }

//        /// <summary>
//        /// If true, this session lasts all day and no time should be shown to customers. Technically the session will be from midnight to midnight.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("allDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool AllDay { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseVoucher
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("voucher", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Voucher Voucher { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseVoucherList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("vouchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Voucher> Vouchers { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseResourceList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Resource> Resources { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseRateList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("rates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Rate> Rates { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponsePickupLocationList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("pickupLocations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<PickupLocation> PickupLocations { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseProductList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Product> Products { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponsePickupListList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("pickupListList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<PickupList> PickupListList { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Check-in information.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Checkin
//    {
//        /// <summary>
//        /// Check-in status. True if the specified order item / everyone in a session (based on the request query), was checked in, false otherwise.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("isCheckedIn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool IsCheckedIn { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseCheckIn
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("checkin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Checkin Checkin { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseExtraList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ExtraRequest> Extras { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseCustomerList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("customers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Customer> Customers { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Company object. Holds general details and information about a specific company.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Company
//    {
//        /// <summary>
//        /// Company alias. This is the unique identifier for this company
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Alias { get; set; }

//        /// <summary>
//        /// Company name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CompanyName { get; set; }

//        /// <summary>
//        /// First name of company representative
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string FirstName { get; set; }

//        /// <summary>
//        /// Last name of company representative
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string LastName { get; set; }

//        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Address Address { get; set; }

//        /// <summary>
//        /// Company destination. Name of the area.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("destinationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string DestinationName { get; set; }

//        /// <summary>
//        /// Company destination. Country code.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("destinationCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string DestinationCountryCode { get; set; }

//        /// <summary>
//        /// Company destination. Destination path.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("destinationPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string DestinationPath { get; set; }

//        /// <summary>
//        /// URL of the company logo.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("companyLogoUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CompanyLogoUrl { get; set; }

//        /// <summary>
//        /// Default currency used by this company.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Currency { get; set; }

//        /// <summary>
//        /// Locale of this company.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Locale { get; set; }

//        /// <summary>
//        /// Timezone of this company.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Timezone { get; set; }

//        /// <summary>
//        /// Company category
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Category { get; set; }

//        /// <summary>
//        /// Company description
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("companyDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string CompanyDescription { get; set; }

//        /// <summary>
//        /// Agent description, if the company is an agent.
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("agentDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AgentDescription { get; set; }

//        /// <summary>
//        /// Agent registration link, if the company is an agent
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("agentRegistrationLink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AgentRegistrationLink { get; set; }

//        /// <summary>
//        /// Company phone
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Phone { get; set; }

//        /// <summary>
//        /// Company mobile
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Mobile { get; set; }

//        /// <summary>
//        /// Company fax
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Fax { get; set; }

//        /// <summary>
//        /// Company skype
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("skype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Skype { get; set; }

//        /// <summary>
//        /// General terms and conditions
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Terms { get; set; }

//        /// <summary>
//        /// Privacy Policy
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("privacyPolicy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string PrivacyPolicy { get; set; }

//        /// <summary>
//        /// Company opening hours
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("openingHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string OpeningHours { get; set; }

//        /// <summary>
//        /// Company facebook page
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("facebookPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string FacebookPage { get; set; }

//        /// <summary>
//        /// Company google plus profile
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("googlePlus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string GooglePlus { get; set; }

//        /// <summary>
//        /// Company yelp profile
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("yelp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Yelp { get; set; }

//        /// <summary>
//        /// Company instagram profile
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("instagram", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Instagram { get; set; }

//        /// <summary>
//        /// Company pinterest profile
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("pinterest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Pinterest { get; set; }

//        /// <summary>
//        /// Company youtube channel
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("youtubeChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string YoutubeChannel { get; set; }

//        /// <summary>
//        /// Company trip advisor profile
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("tripAdvisor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string TripAdvisor { get; set; }

//        /// <summary>
//        /// Company facebook page id
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("fbPageId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string FbPageId { get; set; }

//        /// <summary>
//        /// Company trip twitter profile
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("twitter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Twitter { get; set; }

//        /// <summary>
//        /// Company website
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Website { get; set; }

//        /// <summary>
//        /// Company Booking System
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("bookingSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string BookingSystem { get; set; }

//        [Newtonsoft.Json.JsonProperty("video", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Video Video { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseCompany
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Company Company { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// A Category is used to group products
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Category
//    {
//        /// <summary>
//        /// Category ID
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Category name
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        /// <summary>
//        /// Category description
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Description { get; set; }

//        /// <summary>
//        /// Flag used to determine if the category is public or private.&lt;br&gt;Public categories appear as tabs on the company booking form
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool Visible { get; set; }

//        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Image Image { get; set; }

//        /// <summary>
//        /// This will store category meta data such as description
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("categorySeoTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<CategorySeoTag> CategorySeoTags { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    /// <summary>
//    /// Category Seo tags.
//    /// </summary>
//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CategorySeoTag
//    {
//        /// <summary>
//        /// ID of Tag
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long Id { get; set; }

//        /// <summary>
//        /// Type of Tag
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("metaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public CategorySeoTagMetaType MetaType { get; set; }

//        /// <summary>
//        /// Value to put in the "key" attribute (depending on type it could be name, property or rel)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("attrKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AttrKey { get; set; }

//        /// <summary>
//        /// Value to put in the "value" attribute (depending on type it could be content or href)
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("attrValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string AttrValue { get; set; }

//        /// <summary>
//        /// Category ID this seo tag belongs to
//        /// </summary>
//        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public long CategoryId { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseCategory
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public Category Category { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseCategoryList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Category> Categories { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResponseBookingList
//    {
//        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public RequestStatus RequestStatus { get; set; } = new RequestStatus();

//        [Newtonsoft.Json.JsonProperty("bookings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<Booking> Bookings { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [Newtonsoft.Json.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum OrderStatus
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
//        PROCESSING = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
//        NEW = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"ON_HOLD")]
//        ON_HOLD = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_SUPPLIER")]
//        PENDING_SUPPLIER = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_CUSTOMER")]
//        PENDING_CUSTOMER = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
//        CONFIRMED = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
//        CANCELLED = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"ABANDONED_CART")]
//        ABANDONED_CART = 7,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ResourceType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"RESOURCE")]
//        RESOURCE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"BUS")]
//        BUS = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"COACH")]
//        COACH = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"COASTER")]
//        COASTER = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"VAN")]
//        VAN = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"CAR")]
//        CAR = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"MOTORCYCLE")]
//        MOTORCYCLE = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"BOAT")]
//        BOAT = 7,

//        [System.Runtime.Serialization.EnumMember(Value = @"VEHICLE")]
//        VEHICLE = 8,

//        [System.Runtime.Serialization.EnumMember(Value = @"KAYAK")]
//        KAYAK = 9,

//        [System.Runtime.Serialization.EnumMember(Value = @"GUIDE")]
//        GUIDE = 10,

//        [System.Runtime.Serialization.EnumMember(Value = @"DRIVER")]
//        DRIVER = 11,

//        [System.Runtime.Serialization.EnumMember(Value = @"PILOT")]
//        PILOT = 12,

//        [System.Runtime.Serialization.EnumMember(Value = @"INSTRUCTOR")]
//        INSTRUCTOR = 13,

//        [System.Runtime.Serialization.EnumMember(Value = @"ROOM")]
//        ROOM = 14,

//        [System.Runtime.Serialization.EnumMember(Value = @"VENUE")]
//        VENUE = 15,

//        [System.Runtime.Serialization.EnumMember(Value = @"HORSE")]
//        HORSE = 16,

//        [System.Runtime.Serialization.EnumMember(Value = @"HELICOPTER")]
//        HELICOPTER = 17,

//        [System.Runtime.Serialization.EnumMember(Value = @"PLANE")]
//        PLANE = 18,

//        [System.Runtime.Serialization.EnumMember(Value = @"RAFT")]
//        RAFT = 19,

//        [System.Runtime.Serialization.EnumMember(Value = @"BALLOON")]
//        BALLOON = 20,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRACK")]
//        TRACK = 21,

//        [System.Runtime.Serialization.EnumMember(Value = @"FIELD")]
//        FIELD = 22,

//        [System.Runtime.Serialization.EnumMember(Value = @"RING")]
//        RING = 23,

//        [System.Runtime.Serialization.EnumMember(Value = @"CAMEL")]
//        CAMEL = 24,

//        [System.Runtime.Serialization.EnumMember(Value = @"BIKE")]
//        BIKE = 25,

//        [System.Runtime.Serialization.EnumMember(Value = @"SEGWAY")]
//        SEGWAY = 26,

//        [System.Runtime.Serialization.EnumMember(Value = @"SKI")]
//        SKI = 27,

//        [System.Runtime.Serialization.EnumMember(Value = @"SNOWBOARD")]
//        SNOWBOARD = 28,

//        [System.Runtime.Serialization.EnumMember(Value = @"PADDLEBOARD")]
//        PADDLEBOARD = 29,

//        [System.Runtime.Serialization.EnumMember(Value = @"EQUIPMENT")]
//        EQUIPMENT = 30,

//        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPER")]
//        SKIPPER = 31,

//        [System.Runtime.Serialization.EnumMember(Value = @"CREW")]
//        CREW = 32,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductRateCommissionType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"NET_RATE")]
//        NET_RATE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"PERCENT")]
//        PERCENT = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingFieldCreateFieldType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"String")]
//        String = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"List")]
//        List = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
//        Boolean = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"Hidden")]
//        Hidden = 3,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum PriceOptionCreatePriceGroupType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"EACH")]
//        EACH = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL")]
//        TOTAL = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductUpdateRequestConfirmMode
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
//        MANUAL = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUTOCONFIRM")]
//        AUTOCONFIRM = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL_THEN_AUTO")]
//        MANUAL_THEN_AUTO = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_THEN_MANUAL")]
//        AUTO_THEN_MANUAL = 3,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductUpdateRequestBarcodeOutputType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PARTICIPANT")]
//        PARTICIPANT = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"ORDER")]
//        ORDER = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingFieldFieldType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"String")]
//        String = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"List")]
//        List = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
//        Boolean = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"Phone")]
//        Phone = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
//        Date = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"Hidden")]
//        Hidden = 5,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ExtraPriceType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
//        ANY = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
//        FIXED = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"QUANTITY")]
//        QUANTITY = 2,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum PriceOptionPriceGroupType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"EACH")]
//        EACH = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL")]
//        TOTAL = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVITY")]
//        ACTIVITY = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"DAYTOUR")]
//        DAYTOUR = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"MULTIDAYTOUR")]
//        MULTIDAYTOUR = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"PRIVATE_TOUR")]
//        PRIVATE_TOUR = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"TICKET")]
//        TICKET = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"RENTAL")]
//        RENTAL = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"CHARTER")]
//        CHARTER = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"EVENT")]
//        EVENT = 7,

//        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
//        GIFT_CARD = 8,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFER")]
//        TRANSFER = 9,

//        [System.Runtime.Serialization.EnumMember(Value = @"LESSON")]
//        LESSON = 10,

//        [System.Runtime.Serialization.EnumMember(Value = @"MERCHANDISE")]
//        MERCHANDISE = 11,

//        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
//        CUSTOM = 12,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductCurrency
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
//        AED = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
//        ANG = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
//        ARS = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
//        AUD = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
//        AWG = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
//        AZN = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
//        BGN = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
//        BHD = 7,

//        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
//        BOB = 8,

//        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
//        BRL = 9,

//        [System.Runtime.Serialization.EnumMember(Value = @"BYR")]
//        BYR = 10,

//        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
//        CAD = 11,

//        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
//        CHF = 12,

//        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
//        CLP = 13,

//        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
//        CNY = 14,

//        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
//        COP = 15,

//        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
//        CZK = 16,

//        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
//        DKK = 17,

//        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
//        EGP = 18,

//        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
//        EUR = 19,

//        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
//        FJD = 20,

//        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
//        GBP = 21,

//        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
//        GEL = 22,

//        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
//        HKD = 23,

//        [System.Runtime.Serialization.EnumMember(Value = @"HRK")]
//        HRK = 24,

//        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
//        HUF = 25,

//        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
//        IDR = 26,

//        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
//        ILS = 27,

//        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
//        INR = 28,

//        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
//        ISK = 29,

//        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
//        JOD = 30,

//        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
//        JPY = 31,

//        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
//        KES = 32,

//        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
//        KRW = 33,

//        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
//        KWD = 34,

//        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
//        KZT = 35,

//        [System.Runtime.Serialization.EnumMember(Value = @"LTL")]
//        LTL = 36,

//        [System.Runtime.Serialization.EnumMember(Value = @"LVL")]
//        LVL = 37,

//        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
//        MAD = 38,

//        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
//        MKD = 39,

//        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
//        MUR = 40,

//        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
//        MXN = 41,

//        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
//        MYR = 42,

//        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
//        NGN = 43,

//        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
//        NOK = 44,

//        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
//        NZD = 45,

//        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
//        PGK = 46,

//        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
//        PHP = 47,

//        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
//        OMR = 48,

//        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
//        PEN = 49,

//        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
//        PLN = 50,

//        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
//        PYG = 51,

//        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
//        QAR = 52,

//        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
//        RON = 53,

//        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
//        RSD = 54,

//        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
//        RUB = 55,

//        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
//        SAR = 56,

//        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
//        SBD = 57,

//        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
//        SEK = 58,

//        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
//        SGD = 59,

//        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
//        SRD = 60,

//        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
//        SYP = 61,

//        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
//        THB = 62,

//        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
//        TOP = 63,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
//        TRY = 64,

//        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
//        TWD = 65,

//        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
//        UAH = 66,

//        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
//        USD = 67,

//        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
//        UYU = 68,

//        [System.Runtime.Serialization.EnumMember(Value = @"VEF")]
//        VEF = 69,

//        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
//        VUV = 70,

//        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
//        WST = 71,

//        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
//        XAF = 72,

//        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
//        XOF = 73,

//        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
//        XPF = 74,

//        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
//        YER = 75,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
//        ZAR = 76,

//        [System.Runtime.Serialization.EnumMember(Value = @"AFA")]
//        AFA = 77,

//        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
//        ALL = 78,

//        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
//        DZD = 79,

//        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
//        AMD = 80,

//        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
//        BSD = 81,

//        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
//        BDT = 82,

//        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
//        BBD = 83,

//        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
//        BZD = 84,

//        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
//        BMD = 85,

//        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
//        BWP = 86,

//        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
//        BND = 87,

//        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
//        BIF = 88,

//        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
//        KHR = 89,

//        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
//        CVE = 90,

//        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
//        KYD = 91,

//        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
//        KMF = 92,

//        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
//        BAM = 93,

//        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
//        CRC = 94,

//        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
//        CUP = 95,

//        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
//        CYP = 96,

//        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
//        DJF = 97,

//        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
//        DOP = 98,

//        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
//        XCD = 99,

//        [System.Runtime.Serialization.EnumMember(Value = @"ECS")]
//        ECS = 100,

//        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
//        SVC = 101,

//        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
//        ERN = 102,

//        [System.Runtime.Serialization.EnumMember(Value = @"EEK")]
//        EEK = 103,

//        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
//        ETB = 104,

//        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
//        FKP = 105,

//        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
//        CDF = 106,

//        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
//        GMD = 107,

//        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
//        GHS = 108,

//        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
//        GIP = 109,

//        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
//        GTQ = 110,

//        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
//        GNF = 111,

//        [System.Runtime.Serialization.EnumMember(Value = @"GWP")]
//        GWP = 112,

//        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
//        GYD = 113,

//        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
//        HTG = 114,

//        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
//        HNL = 115,

//        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
//        IRR = 116,

//        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
//        IQD = 117,

//        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
//        JMD = 118,

//        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
//        AOA = 119,

//        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
//        KGS = 120,

//        [System.Runtime.Serialization.EnumMember(Value = @"KIP")]
//        KIP = 121,

//        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
//        LAK = 122,

//        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
//        LBP = 123,

//        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
//        LRD = 124,

//        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
//        LYD = 125,

//        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
//        LSL = 126,

//        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
//        MOP = 127,

//        [System.Runtime.Serialization.EnumMember(Value = @"MGF")]
//        MGF = 128,

//        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
//        MGA = 129,

//        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
//        MWK = 130,

//        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
//        MVR = 131,

//        [System.Runtime.Serialization.EnumMember(Value = @"MTL")]
//        MTL = 132,

//        [System.Runtime.Serialization.EnumMember(Value = @"MRO")]
//        MRO = 133,

//        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
//        MDL = 134,

//        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
//        MNT = 135,

//        [System.Runtime.Serialization.EnumMember(Value = @"MZM")]
//        MZM = 136,

//        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
//        MMK = 137,

//        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
//        NAD = 138,

//        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
//        NPR = 139,

//        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
//        NIO = 140,

//        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
//        KPW = 141,

//        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
//        PKR = 142,

//        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
//        PAB = 143,

//        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
//        RWF = 144,

//        [System.Runtime.Serialization.EnumMember(Value = @"STD")]
//        STD = 145,

//        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
//        SCR = 146,

//        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
//        SLL = 147,

//        [System.Runtime.Serialization.EnumMember(Value = @"SKK")]
//        SKK = 148,

//        [System.Runtime.Serialization.EnumMember(Value = @"SIT")]
//        SIT = 149,

//        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
//        SOS = 150,

//        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
//        LKR = 151,

//        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
//        SHP = 152,

//        [System.Runtime.Serialization.EnumMember(Value = @"SDD")]
//        SDD = 153,

//        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
//        SZL = 154,

//        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
//        TJS = 155,

//        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
//        TZS = 156,

//        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
//        TTD = 157,

//        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
//        TND = 158,

//        [System.Runtime.Serialization.EnumMember(Value = @"TMM")]
//        TMM = 159,

//        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
//        UGX = 160,

//        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
//        UZS = 161,

//        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
//        VND = 162,

//        [System.Runtime.Serialization.EnumMember(Value = @"YUM")]
//        YUM = 163,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZMK")]
//        ZMK = 164,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZWD")]
//        ZWD = 165,

//        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
//        AFN = 166,

//        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
//        MZN = 167,

//        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
//        UYI = 168,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
//        ZMW = 169,

//        [System.Runtime.Serialization.EnumMember(Value = @"GHC")]
//        GHC = 170,

//        [System.Runtime.Serialization.EnumMember(Value = @"GGP")]
//        GGP = 171,

//        [System.Runtime.Serialization.EnumMember(Value = @"IMP")]
//        IMP = 172,

//        [System.Runtime.Serialization.EnumMember(Value = @"JEP")]
//        JEP = 173,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRL")]
//        TRL = 174,

//        [System.Runtime.Serialization.EnumMember(Value = @"TVD")]
//        TVD = 175,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductBookingMode
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"NO_DATE")]
//        NO_DATE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"DATE_ENQUIRY")]
//        DATE_ENQUIRY = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"INVENTORY")]
//        INVENTORY = 2,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductConfirmMode
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
//        MANUAL = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUTOCONFIRM")]
//        AUTOCONFIRM = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL_THEN_AUTO")]
//        MANUAL_THEN_AUTO = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_THEN_MANUAL")]
//        AUTO_THEN_MANUAL = 3,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductAgentPaymentType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUTS")]
//        PAYOUTS = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"FULL_AGENT")]
//        FULL_AGENT = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"DOWNPAYMENT")]
//        DOWNPAYMENT = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"FULL_SUPPLIER")]
//        FULL_SUPPLIER = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
//        NONE = 4,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductQrCodeType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL")]
//        INTERNAL = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"EXTERNAL")]
//        EXTERNAL = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductBarcodeOutputType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PARTICIPANT")]
//        PARTICIPANT = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"ORDER")]
//        ORDER = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductSeoTagMetaType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"META_NAME")]
//        META_NAME = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"META_PROPERTY")]
//        META_PROPERTY = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"LINK_REL")]
//        LINK_REL = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"TITLE")]
//        TITLE = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"NOINDEX")]
//        NOINDEX = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"REL_CANONICAL")]
//        REL_CANONICAL = 5,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum TaxFeeType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"TAX")]
//        TAX = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"FEE")]
//        FEE = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum TaxType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PERCENT")]
//        PERCENT = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_PER_QUANTITY")]
//        FIXED_PER_QUANTITY = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_PER_ORDER")]
//        FIXED_PER_ORDER = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_PER_DURATION")]
//        FIXED_PER_DURATION = 3,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ExtraRequestExtraPriceType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
//        ANY = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
//        FIXED = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"QUANTITY")]
//        QUANTITY = 2,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingUpdateStatus
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
//        PROCESSING = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
//        NEW = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"ON_HOLD")]
//        ON_HOLD = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_SUPPLIER")]
//        PENDING_SUPPLIER = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_CUSTOMER")]
//        PENDING_CUSTOMER = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
//        CONFIRMED = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
//        CANCELLED = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"ABANDONED_CART")]
//        ABANDONED_CART = 7,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum CustomerTitle
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
//        MR = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
//        MS = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"MRS")]
//        MRS = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"MISS")]
//        MISS = 3,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum CustomerGender
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
//        MALE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
//        FEMALE = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum QuantityCommissionType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"NET")]
//        NET = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
//        COMMISSION = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingStatus
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
//        PROCESSING = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
//        NEW = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"ON_HOLD")]
//        ON_HOLD = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_SUPPLIER")]
//        PENDING_SUPPLIER = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_CUSTOMER")]
//        PENDING_CUSTOMER = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
//        CONFIRMED = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
//        CANCELLED = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"ABANDONED_CART")]
//        ABANDONED_CART = 7,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingTotalCurrency
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
//        AED = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
//        ANG = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
//        ARS = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
//        AUD = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
//        AWG = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
//        AZN = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
//        BGN = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
//        BHD = 7,

//        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
//        BOB = 8,

//        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
//        BRL = 9,

//        [System.Runtime.Serialization.EnumMember(Value = @"BYR")]
//        BYR = 10,

//        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
//        CAD = 11,

//        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
//        CHF = 12,

//        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
//        CLP = 13,

//        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
//        CNY = 14,

//        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
//        COP = 15,

//        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
//        CZK = 16,

//        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
//        DKK = 17,

//        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
//        EGP = 18,

//        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
//        EUR = 19,

//        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
//        FJD = 20,

//        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
//        GBP = 21,

//        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
//        GEL = 22,

//        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
//        HKD = 23,

//        [System.Runtime.Serialization.EnumMember(Value = @"HRK")]
//        HRK = 24,

//        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
//        HUF = 25,

//        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
//        IDR = 26,

//        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
//        ILS = 27,

//        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
//        INR = 28,

//        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
//        ISK = 29,

//        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
//        JOD = 30,

//        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
//        JPY = 31,

//        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
//        KES = 32,

//        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
//        KRW = 33,

//        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
//        KWD = 34,

//        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
//        KZT = 35,

//        [System.Runtime.Serialization.EnumMember(Value = @"LTL")]
//        LTL = 36,

//        [System.Runtime.Serialization.EnumMember(Value = @"LVL")]
//        LVL = 37,

//        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
//        MAD = 38,

//        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
//        MKD = 39,

//        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
//        MUR = 40,

//        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
//        MXN = 41,

//        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
//        MYR = 42,

//        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
//        NGN = 43,

//        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
//        NOK = 44,

//        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
//        NZD = 45,

//        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
//        PGK = 46,

//        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
//        PHP = 47,

//        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
//        OMR = 48,

//        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
//        PEN = 49,

//        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
//        PLN = 50,

//        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
//        PYG = 51,

//        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
//        QAR = 52,

//        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
//        RON = 53,

//        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
//        RSD = 54,

//        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
//        RUB = 55,

//        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
//        SAR = 56,

//        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
//        SBD = 57,

//        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
//        SEK = 58,

//        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
//        SGD = 59,

//        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
//        SRD = 60,

//        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
//        SYP = 61,

//        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
//        THB = 62,

//        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
//        TOP = 63,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
//        TRY = 64,

//        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
//        TWD = 65,

//        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
//        UAH = 66,

//        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
//        USD = 67,

//        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
//        UYU = 68,

//        [System.Runtime.Serialization.EnumMember(Value = @"VEF")]
//        VEF = 69,

//        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
//        VUV = 70,

//        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
//        WST = 71,

//        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
//        XAF = 72,

//        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
//        XOF = 73,

//        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
//        XPF = 74,

//        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
//        YER = 75,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
//        ZAR = 76,

//        [System.Runtime.Serialization.EnumMember(Value = @"AFA")]
//        AFA = 77,

//        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
//        ALL = 78,

//        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
//        DZD = 79,

//        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
//        AMD = 80,

//        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
//        BSD = 81,

//        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
//        BDT = 82,

//        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
//        BBD = 83,

//        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
//        BZD = 84,

//        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
//        BMD = 85,

//        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
//        BWP = 86,

//        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
//        BND = 87,

//        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
//        BIF = 88,

//        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
//        KHR = 89,

//        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
//        CVE = 90,

//        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
//        KYD = 91,

//        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
//        KMF = 92,

//        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
//        BAM = 93,

//        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
//        CRC = 94,

//        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
//        CUP = 95,

//        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
//        CYP = 96,

//        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
//        DJF = 97,

//        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
//        DOP = 98,

//        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
//        XCD = 99,

//        [System.Runtime.Serialization.EnumMember(Value = @"ECS")]
//        ECS = 100,

//        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
//        SVC = 101,

//        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
//        ERN = 102,

//        [System.Runtime.Serialization.EnumMember(Value = @"EEK")]
//        EEK = 103,

//        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
//        ETB = 104,

//        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
//        FKP = 105,

//        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
//        CDF = 106,

//        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
//        GMD = 107,

//        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
//        GHS = 108,

//        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
//        GIP = 109,

//        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
//        GTQ = 110,

//        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
//        GNF = 111,

//        [System.Runtime.Serialization.EnumMember(Value = @"GWP")]
//        GWP = 112,

//        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
//        GYD = 113,

//        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
//        HTG = 114,

//        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
//        HNL = 115,

//        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
//        IRR = 116,

//        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
//        IQD = 117,

//        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
//        JMD = 118,

//        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
//        AOA = 119,

//        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
//        KGS = 120,

//        [System.Runtime.Serialization.EnumMember(Value = @"KIP")]
//        KIP = 121,

//        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
//        LAK = 122,

//        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
//        LBP = 123,

//        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
//        LRD = 124,

//        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
//        LYD = 125,

//        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
//        LSL = 126,

//        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
//        MOP = 127,

//        [System.Runtime.Serialization.EnumMember(Value = @"MGF")]
//        MGF = 128,

//        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
//        MGA = 129,

//        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
//        MWK = 130,

//        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
//        MVR = 131,

//        [System.Runtime.Serialization.EnumMember(Value = @"MTL")]
//        MTL = 132,

//        [System.Runtime.Serialization.EnumMember(Value = @"MRO")]
//        MRO = 133,

//        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
//        MDL = 134,

//        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
//        MNT = 135,

//        [System.Runtime.Serialization.EnumMember(Value = @"MZM")]
//        MZM = 136,

//        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
//        MMK = 137,

//        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
//        NAD = 138,

//        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
//        NPR = 139,

//        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
//        NIO = 140,

//        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
//        KPW = 141,

//        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
//        PKR = 142,

//        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
//        PAB = 143,

//        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
//        RWF = 144,

//        [System.Runtime.Serialization.EnumMember(Value = @"STD")]
//        STD = 145,

//        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
//        SCR = 146,

//        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
//        SLL = 147,

//        [System.Runtime.Serialization.EnumMember(Value = @"SKK")]
//        SKK = 148,

//        [System.Runtime.Serialization.EnumMember(Value = @"SIT")]
//        SIT = 149,

//        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
//        SOS = 150,

//        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
//        LKR = 151,

//        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
//        SHP = 152,

//        [System.Runtime.Serialization.EnumMember(Value = @"SDD")]
//        SDD = 153,

//        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
//        SZL = 154,

//        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
//        TJS = 155,

//        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
//        TZS = 156,

//        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
//        TTD = 157,

//        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
//        TND = 158,

//        [System.Runtime.Serialization.EnumMember(Value = @"TMM")]
//        TMM = 159,

//        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
//        UGX = 160,

//        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
//        UZS = 161,

//        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
//        VND = 162,

//        [System.Runtime.Serialization.EnumMember(Value = @"YUM")]
//        YUM = 163,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZMK")]
//        ZMK = 164,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZWD")]
//        ZWD = 165,

//        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
//        AFN = 166,

//        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
//        MZN = 167,

//        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
//        UYI = 168,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
//        ZMW = 169,

//        [System.Runtime.Serialization.EnumMember(Value = @"GHC")]
//        GHC = 170,

//        [System.Runtime.Serialization.EnumMember(Value = @"GGP")]
//        GGP = 171,

//        [System.Runtime.Serialization.EnumMember(Value = @"IMP")]
//        IMP = 172,

//        [System.Runtime.Serialization.EnumMember(Value = @"JEP")]
//        JEP = 173,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRL")]
//        TRL = 174,

//        [System.Runtime.Serialization.EnumMember(Value = @"TVD")]
//        TVD = 175,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingSource
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ONLINE")]
//        ONLINE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL")]
//        INTERNAL = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"PARTNERS")]
//        PARTNERS = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"COMMUNITY")]
//        COMMUNITY = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE")]
//        MARKETPLACE = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE_PREF_RATE")]
//        MARKETPLACE_PREF_RATE = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"API")]
//        API = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"GOOGLE")]
//        GOOGLE = 7,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingResellerSource
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ONLINE")]
//        ONLINE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL")]
//        INTERNAL = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"PARTNERS")]
//        PARTNERS = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"COMMUNITY")]
//        COMMUNITY = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE")]
//        MARKETPLACE = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE_PREF_RATE")]
//        MARKETPLACE_PREF_RATE = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"API")]
//        API = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"GOOGLE")]
//        GOOGLE = 7,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingPaymentOption
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"CREDITCARD")]
//        CREDITCARD = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"PAYPAL")]
//        PAYPAL = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"BANKTRANSFER")]
//        BANKTRANSFER = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
//        CASH = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE")]
//        INVOICE = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"EXTERNAL")]
//        EXTERNAL = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"ALIPAY")]
//        ALIPAY = 6,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingBarcodeType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
//        TEXT = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"CODE_39")]
//        CODE_39 = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"CODE_128")]
//        CODE_128 = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"QR_CODE")]
//        QR_CODE = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"EAN_8")]
//        EAN_8 = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"EAN_13")]
//        EAN_13 = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"ITF")]
//        ITF = 6,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingPaymentType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PAYPAL")]
//        PAYPAL = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
//        CASH = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"CREDITCARD")]
//        CREDITCARD = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"BANKTRANSFER")]
//        BANKTRANSFER = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"BANKCHEQUE")]
//        BANKCHEQUE = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
//        REFUND = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"VOUCHER")]
//        VOUCHER = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"PROMO_CODE")]
//        PROMO_CODE = 7,

//        [System.Runtime.Serialization.EnumMember(Value = @"FREE")]
//        FREE = 8,

//        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
//        OTHER = 9,

//        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE")]
//        INVOICE = 10,

//        [System.Runtime.Serialization.EnumMember(Value = @"REZDY_PAYOUTS")]
//        REZDY_PAYOUTS = 11,

//        [System.Runtime.Serialization.EnumMember(Value = @"ALIPAY")]
//        ALIPAY = 12,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingPaymentCurrency
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
//        AED = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
//        ANG = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
//        ARS = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
//        AUD = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
//        AWG = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
//        AZN = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
//        BGN = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
//        BHD = 7,

//        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
//        BOB = 8,

//        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
//        BRL = 9,

//        [System.Runtime.Serialization.EnumMember(Value = @"BYR")]
//        BYR = 10,

//        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
//        CAD = 11,

//        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
//        CHF = 12,

//        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
//        CLP = 13,

//        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
//        CNY = 14,

//        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
//        COP = 15,

//        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
//        CZK = 16,

//        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
//        DKK = 17,

//        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
//        EGP = 18,

//        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
//        EUR = 19,

//        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
//        FJD = 20,

//        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
//        GBP = 21,

//        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
//        GEL = 22,

//        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
//        HKD = 23,

//        [System.Runtime.Serialization.EnumMember(Value = @"HRK")]
//        HRK = 24,

//        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
//        HUF = 25,

//        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
//        IDR = 26,

//        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
//        ILS = 27,

//        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
//        INR = 28,

//        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
//        ISK = 29,

//        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
//        JOD = 30,

//        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
//        JPY = 31,

//        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
//        KES = 32,

//        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
//        KRW = 33,

//        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
//        KWD = 34,

//        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
//        KZT = 35,

//        [System.Runtime.Serialization.EnumMember(Value = @"LTL")]
//        LTL = 36,

//        [System.Runtime.Serialization.EnumMember(Value = @"LVL")]
//        LVL = 37,

//        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
//        MAD = 38,

//        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
//        MKD = 39,

//        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
//        MUR = 40,

//        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
//        MXN = 41,

//        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
//        MYR = 42,

//        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
//        NGN = 43,

//        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
//        NOK = 44,

//        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
//        NZD = 45,

//        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
//        PGK = 46,

//        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
//        PHP = 47,

//        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
//        OMR = 48,

//        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
//        PEN = 49,

//        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
//        PLN = 50,

//        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
//        PYG = 51,

//        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
//        QAR = 52,

//        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
//        RON = 53,

//        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
//        RSD = 54,

//        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
//        RUB = 55,

//        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
//        SAR = 56,

//        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
//        SBD = 57,

//        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
//        SEK = 58,

//        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
//        SGD = 59,

//        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
//        SRD = 60,

//        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
//        SYP = 61,

//        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
//        THB = 62,

//        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
//        TOP = 63,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
//        TRY = 64,

//        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
//        TWD = 65,

//        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
//        UAH = 66,

//        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
//        USD = 67,

//        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
//        UYU = 68,

//        [System.Runtime.Serialization.EnumMember(Value = @"VEF")]
//        VEF = 69,

//        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
//        VUV = 70,

//        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
//        WST = 71,

//        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
//        XAF = 72,

//        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
//        XOF = 73,

//        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
//        XPF = 74,

//        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
//        YER = 75,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
//        ZAR = 76,

//        [System.Runtime.Serialization.EnumMember(Value = @"AFA")]
//        AFA = 77,

//        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
//        ALL = 78,

//        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
//        DZD = 79,

//        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
//        AMD = 80,

//        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
//        BSD = 81,

//        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
//        BDT = 82,

//        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
//        BBD = 83,

//        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
//        BZD = 84,

//        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
//        BMD = 85,

//        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
//        BWP = 86,

//        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
//        BND = 87,

//        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
//        BIF = 88,

//        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
//        KHR = 89,

//        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
//        CVE = 90,

//        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
//        KYD = 91,

//        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
//        KMF = 92,

//        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
//        BAM = 93,

//        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
//        CRC = 94,

//        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
//        CUP = 95,

//        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
//        CYP = 96,

//        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
//        DJF = 97,

//        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
//        DOP = 98,

//        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
//        XCD = 99,

//        [System.Runtime.Serialization.EnumMember(Value = @"ECS")]
//        ECS = 100,

//        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
//        SVC = 101,

//        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
//        ERN = 102,

//        [System.Runtime.Serialization.EnumMember(Value = @"EEK")]
//        EEK = 103,

//        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
//        ETB = 104,

//        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
//        FKP = 105,

//        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
//        CDF = 106,

//        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
//        GMD = 107,

//        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
//        GHS = 108,

//        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
//        GIP = 109,

//        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
//        GTQ = 110,

//        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
//        GNF = 111,

//        [System.Runtime.Serialization.EnumMember(Value = @"GWP")]
//        GWP = 112,

//        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
//        GYD = 113,

//        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
//        HTG = 114,

//        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
//        HNL = 115,

//        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
//        IRR = 116,

//        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
//        IQD = 117,

//        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
//        JMD = 118,

//        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
//        AOA = 119,

//        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
//        KGS = 120,

//        [System.Runtime.Serialization.EnumMember(Value = @"KIP")]
//        KIP = 121,

//        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
//        LAK = 122,

//        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
//        LBP = 123,

//        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
//        LRD = 124,

//        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
//        LYD = 125,

//        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
//        LSL = 126,

//        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
//        MOP = 127,

//        [System.Runtime.Serialization.EnumMember(Value = @"MGF")]
//        MGF = 128,

//        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
//        MGA = 129,

//        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
//        MWK = 130,

//        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
//        MVR = 131,

//        [System.Runtime.Serialization.EnumMember(Value = @"MTL")]
//        MTL = 132,

//        [System.Runtime.Serialization.EnumMember(Value = @"MRO")]
//        MRO = 133,

//        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
//        MDL = 134,

//        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
//        MNT = 135,

//        [System.Runtime.Serialization.EnumMember(Value = @"MZM")]
//        MZM = 136,

//        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
//        MMK = 137,

//        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
//        NAD = 138,

//        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
//        NPR = 139,

//        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
//        NIO = 140,

//        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
//        KPW = 141,

//        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
//        PKR = 142,

//        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
//        PAB = 143,

//        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
//        RWF = 144,

//        [System.Runtime.Serialization.EnumMember(Value = @"STD")]
//        STD = 145,

//        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
//        SCR = 146,

//        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
//        SLL = 147,

//        [System.Runtime.Serialization.EnumMember(Value = @"SKK")]
//        SKK = 148,

//        [System.Runtime.Serialization.EnumMember(Value = @"SIT")]
//        SIT = 149,

//        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
//        SOS = 150,

//        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
//        LKR = 151,

//        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
//        SHP = 152,

//        [System.Runtime.Serialization.EnumMember(Value = @"SDD")]
//        SDD = 153,

//        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
//        SZL = 154,

//        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
//        TJS = 155,

//        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
//        TZS = 156,

//        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
//        TTD = 157,

//        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
//        TND = 158,

//        [System.Runtime.Serialization.EnumMember(Value = @"TMM")]
//        TMM = 159,

//        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
//        UGX = 160,

//        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
//        UZS = 161,

//        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
//        VND = 162,

//        [System.Runtime.Serialization.EnumMember(Value = @"YUM")]
//        YUM = 163,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZMK")]
//        ZMK = 164,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZWD")]
//        ZWD = 165,

//        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
//        AFN = 166,

//        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
//        MZN = 167,

//        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
//        UYI = 168,

//        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
//        ZMW = 169,

//        [System.Runtime.Serialization.EnumMember(Value = @"GHC")]
//        GHC = 170,

//        [System.Runtime.Serialization.EnumMember(Value = @"GGP")]
//        GGP = 171,

//        [System.Runtime.Serialization.EnumMember(Value = @"IMP")]
//        IMP = 172,

//        [System.Runtime.Serialization.EnumMember(Value = @"JEP")]
//        JEP = 173,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRL")]
//        TRL = 174,

//        [System.Runtime.Serialization.EnumMember(Value = @"TVD")]
//        TVD = 175,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingPaymentRecipient
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"SUPPLIER")]
//        SUPPLIER = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"RESELLER")]
//        RESELLER = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"REZDY")]
//        REZDY = 2,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum CreditCardCardType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
//        VISA = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"MASTERCARD")]
//        MASTERCARD = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"AMEX")]
//        AMEX = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"DINERS")]
//        DINERS = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"DISCOVER")]
//        DISCOVER = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"JCB")]
//        JCB = 5,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum VoucherStatus
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ISSUED")]
//        ISSUED = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"REDEEMED")]
//        REDEEMED = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"PARTIALLY_REDEEMED")]
//        PARTIALLY_REDEEMED = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
//        EXPIRED = 3,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum VoucherValueType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_LIMITPRODUCT")]
//        VALUE_LIMITPRODUCT = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"VALUE")]
//        VALUE = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_LIMITCATALOG")]
//        VALUE_LIMITCATALOG = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"PERCENT_LIMITPRODUCT")]
//        PERCENT_LIMITPRODUCT = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"PERCENT")]
//        PERCENT = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"PERCENT_LIMITCATALOG")]
//        PERCENT_LIMITCATALOG = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT")]
//        PRODUCT = 6,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductCreateRequestProductType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVITY")]
//        ACTIVITY = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"DAYTOUR")]
//        DAYTOUR = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"MULTIDAYTOUR")]
//        MULTIDAYTOUR = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"PRIVATE_TOUR")]
//        PRIVATE_TOUR = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"TICKET")]
//        TICKET = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"RENTAL")]
//        RENTAL = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"CHARTER")]
//        CHARTER = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"EVENT")]
//        EVENT = 7,

//        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
//        GIFT_CARD = 8,

//        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFER")]
//        TRANSFER = 9,

//        [System.Runtime.Serialization.EnumMember(Value = @"LESSON")]
//        LESSON = 10,

//        [System.Runtime.Serialization.EnumMember(Value = @"MERCHANDISE")]
//        MERCHANDISE = 11,

//        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
//        CUSTOM = 12,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductCreateRequestBookingMode
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"NO_DATE")]
//        NO_DATE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"DATE_ENQUIRY")]
//        DATE_ENQUIRY = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"INVENTORY")]
//        INVENTORY = 2,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductCreateRequestConfirmMode
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
//        MANUAL = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUTOCONFIRM")]
//        AUTOCONFIRM = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL_THEN_AUTO")]
//        MANUAL_THEN_AUTO = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_THEN_MANUAL")]
//        AUTO_THEN_MANUAL = 3,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProductCreateRequestBarcodeOutputType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PARTICIPANT")]
//        PARTICIPANT = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"ORDER")]
//        ORDER = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ExtraCreateRequestExtraPriceType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
//        ANY = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
//        FIXED = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"QUANTITY")]
//        QUANTITY = 2,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingCreateStatus
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
//        PROCESSING = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
//        NEW = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"ON_HOLD")]
//        ON_HOLD = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_SUPPLIER")]
//        PENDING_SUPPLIER = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_CUSTOMER")]
//        PENDING_CUSTOMER = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
//        CONFIRMED = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
//        CANCELLED = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"ABANDONED_CART")]
//        ABANDONED_CART = 7,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingCreateSource
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ONLINE")]
//        ONLINE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL")]
//        INTERNAL = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"PARTNERS")]
//        PARTNERS = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"COMMUNITY")]
//        COMMUNITY = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE")]
//        MARKETPLACE = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE_PREF_RATE")]
//        MARKETPLACE_PREF_RATE = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"API")]
//        API = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"GOOGLE")]
//        GOOGLE = 7,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingCreateResellerSource
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"ONLINE")]
//        ONLINE = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL")]
//        INTERNAL = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"PARTNERS")]
//        PARTNERS = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"COMMUNITY")]
//        COMMUNITY = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE")]
//        MARKETPLACE = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE_PREF_RATE")]
//        MARKETPLACE_PREF_RATE = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"API")]
//        API = 6,

//        [System.Runtime.Serialization.EnumMember(Value = @"GOOGLE")]
//        GOOGLE = 7,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingCreatePaymentOption
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"CREDITCARD")]
//        CREDITCARD = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"PAYPAL")]
//        PAYPAL = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"BANKTRANSFER")]
//        BANKTRANSFER = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
//        CASH = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE")]
//        INVOICE = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"EXTERNAL")]
//        EXTERNAL = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"ALIPAY")]
//        ALIPAY = 6,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum BookingCreateBarcodeType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
//        TEXT = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"CODE_39")]
//        CODE_39 = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"CODE_128")]
//        CODE_128 = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"QR_CODE")]
//        QR_CODE = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"EAN_8")]
//        EAN_8 = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"EAN_13")]
//        EAN_13 = 5,

//        [System.Runtime.Serialization.EnumMember(Value = @"ITF")]
//        ITF = 6,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum CategorySeoTagMetaType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"META_NAME")]
//        META_NAME = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"META_PROPERTY")]
//        META_PROPERTY = 1,

//        [System.Runtime.Serialization.EnumMember(Value = @"LINK_REL")]
//        LINK_REL = 2,

//        [System.Runtime.Serialization.EnumMember(Value = @"TITLE")]
//        TITLE = 3,

//        [System.Runtime.Serialization.EnumMember(Value = @"NOINDEX")]
//        NOINDEX = 4,

//        [System.Runtime.Serialization.EnumMember(Value = @"REL_CANONICAL")]
//        REL_CANONICAL = 5,

//    }



//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiException : System.Exception
//    {
//        public int StatusCode { get; private set; }

//        public string Response { get; private set; }

//        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
//            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
//        {
//            StatusCode = statusCode;
//            Response = response;
//            Headers = headers;
//        }

//        public override string ToString()
//        {
//            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiException<TResult> : ApiException
//    {
//        public TResult Result { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
//            : base(message, statusCode, response, headers, innerException)
//        {
//            Result = result;
//        }
//    }

//}

//#pragma warning restore  108
//#pragma warning restore  114
//#pragma warning restore  472
//#pragma warning restore  612
//#pragma warning restore 1573
//#pragma warning restore 1591
//#pragma warning restore 8073
//#pragma warning restore 3016
//#pragma warning restore 8600
//#pragma warning restore 8602
//#pragma warning restore 8603
//#pragma warning restore 8604
//#pragma warning restore 8625