@model IEnumerable<TourManagementApi.Models.ViewModels.ActivityBasicViewModel>

@{
    ViewData["Title"] = "Turlar";

    var categoryDict = new Dictionary<string, string> {
        { "1", "Walking/Hiking Tours" },
        { "2", "Watersports/Tours" },
        { "3", "Biking Tours" },
        { "4", "Attractions/Museums/Galleries/Aquariums" },
        { "5", "Adrenaline Activities" },
        { "6", "Airborne Experiences" },
        { "7", "Vehicle Tours" },
        { "8", "Events" },
        { "9", "Equipment/Gear Rental" },
        { "10", "Natural Attractions" },
        { "11", "Special Interest" },
        { "12", "Theme Parks" },
        { "13", "Family Experiences" },
        { "14", "Food/Wine Tours" },
        { "15", "Nightlife Experiences" },
        { "16", "Transportation" },
        { "17", "Miscellaneous" },
        { "18", "Sightseeing Tours" }
    };
}
<style>
    td img:hover {
        transform: scale(1.8);
        transition: 0.3s;
        z-index: 10;
        position: relative;
    }

    a.text-decoration-none:hover {
        text-decoration: underline;
        color: #0d6efd; /* Bootstrap primary */
    }
</style>
<h2>Turlar</h2>

<div class="mb-3 d-flex flex-wrap gap-2">
    <a asp-action="CreateBasic" class="btn btn-primary">Yeni Tur Ekle</a>
    <a asp-controller="Reservations" asp-action="Index" class="btn btn-secondary">Rezervasyon Listesi</a>
    <a asp-controller="Reports" asp-action="Index" class="btn btn-secondary">Raporlar</a>
    <a asp-controller="TourCompany" asp-action="Index" class="btn btn-secondary">Tedarikçi Yönetimi</a>
</div>

<table class="datatable2 table table-bordered">
    <thead>
        <tr>
            <th><input type="checkbox" id="selectAll" /></th>
            <th>ID</th>
            <th>Tedarikçi</th>
            <th>Başlık</th>
            <th>Görsel</th>
            <th>Kategori</th>
            <th>Seç.</th>
            @* <th>Rezervasyon</th> *@
             <th>Kap.</th>
            <th>Satış F.</th>
            <th>Oluş.</th>
            <th>Güncell.</th>
            @* <th>Rating</th> *@
    @*         <th>Ücretsiz İptal</th> *@
            <th>Lok.</th>
            <th>Durum</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            var activityId = item?.ActivityId ?? 0;
            var optionCount = item?.Options?.Count ?? 0;
            <tr>
                <td><input type="checkbox" name="selectedActivities" value="@item.ActivityId" /></td>
                <td>@item.ActivityId</td>
                <td>@(item?.TourCompany ?? "-")</td>
                <td>
                    @if (!string.IsNullOrEmpty(item?.Title))
                    {
                        <a asp-action="Preview" asp-route-id="@item.ActivityId" class="text-decoration-none">
                            @item.Title
                        </a>
                        <a asp-action="Preview2" asp-route-id="@item.ActivityId" title="Eksikler" class="btn btn-outline-secondary btn-sm">
                          Eksikler
                        </a>
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </td>

                <td>
                    @if (!string.IsNullOrEmpty(item.CoverImageUrl))
                    {
                        <img src="https://tour.hotelwidget.com@(item.CoverImageUrl)" alt="Kapak Görseli" width="80" height="60" style="object-fit: cover; border-radius: 4px;" />
                    }
                    else
                    {
                        <span class="text-muted">Yok</span>
                    }
                </td>
                <td>
                    @{
                        List<string> categoryIds = new List<string>();
                        try
                        {
                            categoryIds = System.Text.Json.JsonSerializer.Deserialize<List<string>>(item?.Category ?? "[]");
                        }
                        catch { }

                        if (categoryIds == null || !categoryIds.Any())
                        {
                            <span class="text-muted">-</span>
                        }
                        else
                        {
                            foreach (var catId in categoryIds)
                            {
                                <div>@(categoryDict.ContainsKey(catId) ? categoryDict[catId] : catId)</div>
                            }
                        }
                    }
                </td>
                <td>
                    <a asp-controller="Options"
                       asp-action="Index"
                       asp-route-activityId="@activityId">
                        @optionCount
                    </a>
                </td>
                @*                 <td>@(item.Reservations?.Count ?? 0)</td> *@
                <td>@(item.AvailabilitiesCount)</td>
                <td>
                    @{
                        var saleList = item.TicketCategoriesWithSalePrice ?? new List<TourManagementApi.Models.ViewModels.TicketCategorySaleVm>();
                        var count = saleList.Count;
                    }

                    @if (count > 0)
                    {
                        var popId = $"pop-{item.ActivityId}";
                        <button type="button"
                                class="btn btn-sm btn-outline-primary sale-pop"
                                data-pop="#@popId">
                            @count fiyat
                        </button>

                        <!-- Popover içeriği için gizli şablon -->
                        <div id="@popId" class="d-none">
                            @foreach (var group in saleList.GroupBy(x => x.OptionId))
                            {
                                <div class="mb-1">
                                    <div><strong>Option #@group.Key</strong></div>
                                    <ul class="mb-1 ps-3">
                                        @foreach (var tc in group)
                                        {
                                            <li>@tc.Name: @tc.SalePrice.ToString("0.##") @tc.Currency</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </td>
                <td>@(item.CreatedAt.HasValue? item.CreatedAt.Value.ToString("yyyy-MM-dd") : "-")</td>
                <td>@(item.UpdatedAt.HasValue? item.UpdatedAt.Value.ToString("yyyy-MM-dd") : "-")</td>

               @*  <td>
                    @if (item.Rating > 0)
                    {
                        <span class="badge bg-success">@item.Rating.Value.ToString("0.0")</span>
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </td> *@
@*                 <td>
                    @if (item.IsFreeCancellation == true)
                    {
                        <span class="badge bg-success">✔</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">✖</span>
                    }
                </td> *@
                <td>@item.DestinationName</td>

                <td>
                    <span class="badge @(item.Status == "active" ? "bg-success" : item.Status == "inactive" ? "bg-secondary" : "bg-warning") status-badge"
                          data-id="@item.ActivityId"
                          data-current="@item.Status"
                          style="cursor:pointer;">
                        @(item.Status == "draft" ? "Taslak" : item.Status == "inactive" ? "Pasif" : "Aktif")
                    </span>
                </td>
                <td>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            İşlemler
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" asp-action="CreateBasic" asp-route-id="@(item?.ActivityId ?? 0)">Temel Bilgi</a></li>
                            <li><a class="dropdown-item" asp-action="CreateLocation" asp-route-id="@(item?.ActivityId ?? 0)">Lokasyon</a></li>
                            <li><a class="dropdown-item" asp-controller="Options" asp-action="Index" asp-route-activityId="@(item?.ActivityId ?? 0)">Seçenekler</a></li>
                            <li><a class="dropdown-item" asp-action="CreateAddons" asp-route-id="@item.ActivityId">Ek Ürünler</a></li>
                            <li><a class="dropdown-item" asp-controller="Activities" asp-action="Availabilities" asp-route-activityId="@item.ActivityId">Kapasite Tanımları</a></li>
                            <li><a class="dropdown-item" asp-action="ManageLanguages" asp-route-id="@(item?.ActivityId ?? 0)">Dil Yönetimi</a></li>
                            <li><a class="dropdown-item" asp-action="PricingYield" asp-route-id="@item.ActivityId">Fiyatlandırma</a></li>
                            <li>
                                <form asp-action="DeleteActivity" asp-controller="Activities" method="post" onsubmit="return confirm('Bu tur ve tüm alt verileri silinecek. Emin misiniz?');">
                                    <input type="hidden" name="id" value="@item.ActivityId" />
                                    <button type="submit" class="dropdown-item text-danger">Sil</button>
                                </form>
                            </li>
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@ViewBag.Count

@section Scripts {
    <script type="text/javascript">

            document.addEventListener('DOMContentLoaded', function () {
            // Her buton için, yanındaki gizli div'den içeriği alıp popover olarak bağla
            document.querySelectorAll('.sale-pop').forEach(function (btn) {
                const contentEl = document.querySelector(btn.getAttribute('data-pop'));
                if (!contentEl) return;

                new bootstrap.Popover(btn, {
                    content: contentEl.innerHTML,
                    html: true,
                    trigger: 'hover focus',   // hover ve klavye odağında aç
                    placement: 'auto',
                    container: 'body'
                });
            });
        });






        // Select all checkbox
        $('#selectAll').click(function () {
            $('input[name="selectedActivities"]').prop('checked', this.checked);
        });

        // Status badge inline edit
        $(document).on('click', '.status-badge', function(){
            const badge = $(this);
            const currentStatus = badge.data('current');
            const id = badge.data('id');

            const select = $('<select class="form-select form-select-sm"></select>');
            select.append(`<option value="draft" ${currentStatus == "draft" ? "selected" : ""}>Taslak</option>`);
            select.append(`<option value="inactive" ${currentStatus == "inactive" ? "selected" : ""}>Pasif</option>`);
            select.append(`<option value="active" ${currentStatus == "active" ? "selected" : ""}>Aktif</option>`);

            badge.replaceWith(select);
            select.focus();

            select.on('change blur', function(){
                const newStatus = select.val();
                updateStatus(id, newStatus);
                const newBadge = $(`<span class="badge ${newStatus == "active" ? "bg-success" : newStatus == "inactive" ? "bg-secondary" : "bg-warning"} status-badge" data-id="${id}" data-current="${newStatus}" style="cursor:pointer;">${newStatus == "draft" ? "Taslak" : newStatus == "inactive" ? "Pasif" : "Aktif"}</span>`);
                select.replaceWith(newBadge);
            });
        });

        function updateStatus(id, newStatus) {
            fetch(`/Activities/UpdateStatus/${id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ status: newStatus })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Durum güncellenemedi.');
                }
            })
            .catch(error => {
                alert('Hata: ' + error.message);
            });
        }
    </script>
}
