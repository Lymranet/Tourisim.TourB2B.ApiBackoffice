@model TourManagementApi.Models.ViewModels.FiyatlandirmaViewModel
@{
    ViewData["Title"] = Model.ActivityTitle;
}
<h2>@Model.ActivityTitle - Fiyatlandırma</h2>
<div class="mb-3">
    <a asp-action="Index" class="btn btn-secondary">← Turlara Dön</a>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<form id="pricingForm">

    <div class="d-flex flex-wrap gap-2 mb-3">
        <label for="satisYuzde" style="font-weight:bold" class="form-label">Satış Fiyatı Yüzdesi</label>

        <input type="number" style="width:150px;font-size:20px; background-color:green;font-weight:bold;" id="satisYuzde" class="form-control" value="@Model.Options.FirstOrDefault().SalePercentage" min="0" max="500" step="1" />

        @*<button type="button" class="btn btn-primary" onclick="hesaplaTumunu()">Hesapla</button>*@

        <button type="button" class="btn btn-success" onclick="kaydetActivityPricing()">Kaydet</button>

        <input type="hidden" id="activityId" value="@Model.ActivityId" />
    </div>

    @foreach (var option in Model.Options)
    {
        <h4>@option.OptionName</h4>
        <table class="datatable2 table-bordered">
            <thead>
                <tr>
                    <th>Ticket Kategorisi</th>
                    <th>Para Birimi</th>
                    <th>Taşeron Alış</th>
                    <th>Satış Yüzdesi</th>
                    <th>Satış Fiyatı</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tc in option.TicketCategories)
                {
                    <tr>
                        <td>@tc.TicketCategoryName</td>
                        <td>@tc.Currency</td>
                        <td>@tc.SupplierCost.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-GB"))</td>
                        <td>@tc.SalePercentage</td>
                        <td><b>@tc.SalePrice.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-GB"))</b></td>

                    </tr>
                }
            </tbody>
        </table>
    }

    <div class="row mt-5">
        <div class="col-md-6" style="height:400px">
            <h5>Gelir Dağılımı</h5>
            <canvas id="gelirChart"></canvas>
        </div>
        <div class="col-md-6" style="height:400px">
            <h5>Maliyet Oranı</h5>
            <canvas id="maliyetChart"></canvas>
        </div>
    </div>
</form>

<script>
    let gelirChart, maliyetChart;
    function guncelleGrafikler(optionId, labels, values, maliyetLabels, maliyetValues) {
        // GELİR CHART (bar)
        if (gelirChart) gelirChart.destroy();
        gelirChart = new Chart(document.getElementById('gelirChart'), {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: `Gelir Dağılımı (${optionId})`,
                    data: values,
                    backgroundColor: ['#4CAF50', '#FFC107', '#2196F3', '#E91E63']
                }]
            }
        });

        // MALİYET CHART (pie)
        if (maliyetChart) maliyetChart.destroy();
        maliyetChart = new Chart(document.getElementById('maliyetChart'), {
            type: 'pie',
            data: {
                labels: maliyetLabels,
                datasets: [{
                    label: 'Maliyet Dağılımı',
                    data: maliyetValues,
                    backgroundColor: ['#f44336', '#9c27b0', '#3f51b5', '#00bcd4', '#ff9800', '#4caf50']
                }]
            }
        });
    }

    function parseCurrencyGeneral(val) {
        if (!val) return 0;
        const cleaned = val.replace(/[^\d.,-]/g, '');
        if (cleaned.indexOf(',') > -1 && cleaned.indexOf('.') > -1) {
            if (cleaned.lastIndexOf('.') < cleaned.lastIndexOf(',')) {
                return parseFloat(cleaned.replace(/\./g, '').replace(',', '.')) || 0;
            } else {
                return parseFloat(cleaned.replace(/,/g, '')) || 0;
            }
        }
        if (cleaned.indexOf(',') > -1) {
            return parseFloat(cleaned.replace(',', '.')) || 0;
        }
        return parseFloat(cleaned) || 0;
    }

    function hesaplaTumunu() {
        const satisYuzdeInput = document.getElementById('satisYuzde');
        const satisYuzde = parseFloat(satisYuzdeInput?.value) || 50;

        document.querySelectorAll('[id^="maliyet_"]').forEach((span) => {
            const id = span.id.split('_')[1];


            const currencyCode = document.querySelector(`#toplamSatis_${id}`)?.getAttribute("data-currency") || "GBP";
            const arac = parseFloat(document.querySelector(`[name='arac_${id}']`)?.value) || 0;
            const top = parseFloat(document.querySelector(`[name='top_${id}']`)?.value) || 0;
            const bonus = parseFloat(document.querySelector(`[name='bonus_${id}']`)?.value) || 0;
            const orani = parseFloat(document.querySelector(`[name='orani_${id}']`)?.value) || 0.3;



            const ticketRows = span.closest('table').previousElementSibling.querySelectorAll('tbody tr');
            let toplamSatisValue = 0;
            let tasaronToplam = 0;

            ticketRows.forEach(row => {
                const supplierText = row.children[3]?.textContent || "0";
                const supplierCost = parseCurrencyGeneral(supplierText);
                const satisFiyati = supplierCost * (1 + satisYuzde / 100);

                toplamSatisValue += satisFiyati;
                tasaronToplam += supplierCost;
            });

            // Toplam Satış inputunu güncelle
            const toplamSatisInput = document.querySelector(`#toplamSatis_${id}`);
            if (toplamSatisInput) {
                toplamSatisInput.value = toplamSatisValue.toLocaleString('en-GB', { style: 'currency', currency: currencyCode });
            }

            // Taşeron Toplam inputunu güncelle
            const tasaronInput = document.querySelector(`#tasaronToplam_${id}`);
            if (tasaronInput) {
                tasaronInput.value = tasaronToplam.toLocaleString('en-GB', { style: 'currency', currency: currencyCode });
            }

            const yeniKomisyonMaliyeti = toplamSatisValue * orani;
            document.querySelector(`#komisyon_${id}`).value = yeniKomisyonMaliyeti.toFixed(2);
            document.querySelector(`[name='platkom_${id}']`).value = yeniKomisyonMaliyeti.toFixed(2);

            const kalanTutar = toplamSatisValue - yeniKomisyonMaliyeti - tasaronToplam;
            const vergi = kalanTutar * 0.20;
            document.querySelector(`[name='vergi_${id}']`).value = vergi.toFixed(2);

            const toplamMaliyet = arac + top + yeniKomisyonMaliyeti + vergi + tasaronToplam;
            const satis = (toplamMaliyet + yeniKomisyonMaliyeti + bonus) / (1 - orani);
            const netKalan = kalanTutar - vergi;
            const ppCost = toplamMaliyet / (ticketRows.length || 1);

            const karlilik = toplamSatisValue > 0 ? ((toplamSatisValue - toplamMaliyet) / toplamSatisValue) * 100 : 0;

            document.querySelector(`#karlilik_${id}`).value = karlilik.toFixed(2) + ' %';

            document.querySelector(`#maliyet_${id}`).innerText = toplamMaliyet.toLocaleString('en-GB', { style: 'currency', currency: currencyCode });
            document.querySelector(`#satis_${id}`).innerText = satis.toLocaleString('en-GB', { style: 'currency', currency: currencyCode });
            document.querySelector(`#kalan_${id}`).innerText = kalanTutar.toLocaleString('en-GB', { style: 'currency', currency: currencyCode });
            document.querySelector(`#netkalan_${id}`).innerText = netKalan.toLocaleString('en-GB', { style: 'currency', currency: currencyCode });
            document.querySelector(`#ppcost_${id}`).value = ppCost.toFixed(2);
            if (!window.grafikCizildi) {
                guncelleGrafikler(
                    id,
                    ['Toplam Satış', 'Toplam Maliyet', 'Kalan Tutar', 'Net Kalan'],
                    [toplamSatisValue, toplamMaliyet, kalanTutar, netKalan],
                    ['Araç', 'Top', 'Bonus', 'Komisyon', 'Vergi', 'Taşeron'],
                    [arac, top, bonus, yeniKomisyonMaliyeti, vergi, tasaronToplam]
                );
                window.grafikCizildi = true;
            }
        });
    }

    function kaydetTumunu() {
        const percentage = parseInt(document.getElementById('satisYuzde').value) || 0;

        document.querySelectorAll('[id^="maliyet_"]').forEach(span => {
            const optionId = parseInt(span.id.split('_')[1]);

            const model = {
                optionId: optionId,
                percentage: percentage
            };

            fetch('/Activities/SavePricing', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(model)
            })
                .then(async res => {
                    const contentType = res.headers.get("content-type");

                    if (res.ok && contentType && contentType.includes("application/json")) {
                        const data = await res.json();
                        if (data.success) {
                            console.log(`Option ${optionId} başarıyla kaydedildi.`);
                        } else {
                            console.error(`Hata (Option ${optionId}):`, data.message);
                        }
                    } else {
                        const text = await res.text(); // hata mesajı HTML olabilir
                        console.error(`Hata (Option ${optionId}): Response JSON değil:\n${text}`);
                    }
                })
                .catch(err => {
                    console.error(`Hata (Option ${optionId}):`, err);
                });
        });

        alert("Tüm seçenekler için fiyat güncelleme işlemi başlatıldı.");
    }

function kaydetActivityPricing() {
    const activityId = parseInt(document.getElementById('activityId')?.value || '0');
    const percentage = parseInt(document.getElementById('satisYuzde')?.value || '0');

    if (!activityId) {
        alert("ActivityId bulunamadı.");
        return;
    }

    fetch('@Url.Action("SaveActivityPricing","Activities")', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ activityId, percentage })
    })
    .then(async res => {
        const ct = res.headers.get("content-type") || "";
        const payload = ct.includes("application/json") ? await res.json() : { success:false, message: await res.text() };

        if (res.ok && payload.success) {
            alert(payload.message || "Güncelleme başarılı.");
            location.reload();   // ✅ Alertten sonra sayfa yeniden yüklenecek
        } else {
            console.error("Hata:", payload);
            alert(payload.message || "Güncelleme sırasında hata oluştu.");
        }
    })
    .catch(err => {
        console.error("Hata:", err);
        alert("İstek gönderilirken hata oluştu.");
    });
}


</script>


