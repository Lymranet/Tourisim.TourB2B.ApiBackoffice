@model TourManagementApi.Models.ViewModels.ActivityMeetingPointsViewModel

@{
    ViewData["Title"] = "Buluşma Noktaları";
}

<h2>Buluşma Noktaları</h2>
@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<form asp-action="CreateMeetingPoints" method="post" autocomplete="off">
    <input type="hidden" asp-for="ActivityId" />
    <div class="mb-3">
        <button type="button" class="btn btn-primary" id="addMeetingPointBtn">Buluşma Noktası Ekle</button>
    </div>
    <div id="meetingPointsList">
        @for (int i = 0; i < Model.MeetingPoints.Count; i++)
        {
            <div class="card mb-2 meeting-point-item">
                <div class="card-body row">
                    <div class="col-md-3"><strong>@Model.MeetingPoints[i].Name</strong></div>
                    <div class="col-md-4">@Model.MeetingPoints[i].Address</div>
                    <div class="col-md-3">@Model.MeetingPoints[i].Latitude, @Model.MeetingPoints[i].Longitude</div>
                    <div class="col-md-2 text-end">
                        <button type="button" class="btn btn-danger btn-sm remove-meeting-point">Sil</button>
                    </div>
                    <input type="hidden" name="MeetingPoints[@i].Name" value="@Model.MeetingPoints[i].Name" />
                    <input type="hidden" name="MeetingPoints[@i].Address" value="@Model.MeetingPoints[i].Address" />
                    <input type="hidden" name="MeetingPoints[@i].Latitude" value="@Model.MeetingPoints[i].Latitude" />
                    <input type="hidden" name="MeetingPoints[@i].Longitude" value="@Model.MeetingPoints[i].Longitude" />
                </div>
            </div>
        }
    </div>
    <button type="submit" class="btn btn-primary">Kaydet</button>
    <a asp-action="Index" asp-route-id="@Model.ActivityId" class="btn btn-secondary">İptal</a>
</form>

<!-- Modal -->
<div class="modal" tabindex="-1" id="meetingPointModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Buluşma Noktası Ekle</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-2">
            <label>Adres Ara</label>
            <div class="input-group mb-2">
                <input type="text" class="form-control" id="addressSearch" placeholder="Aramak istediğiniz adresi girin...">
                <button type="button" class="btn btn-primary" id="searchAddressBtn">Ara</button>
            </div>
        </div>
        <div id="map" style="height: 300px;"></div>
        <div class="mt-3">
            <label>Buluşma Noktası Adı</label>
            <input type="text" class="form-control" id="meetingPointName" />
        </div>
        <div class="mt-2">
            <label>Adres</label>
            <input type="text" class="form-control" id="meetingPointAddress" />
        </div>
        <input type="hidden" id="meetingPointLat" />
        <input type="hidden" id="meetingPointLng" />
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
        <button type="button" class="btn btn-primary" id="saveMeetingPointBtn">Kaydet</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let map, marker;
        function initMap() {
            map = L.map('map').setView([39.93, 32.85], 6);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
            map.on('click', function(e) {
                setMarker(e.latlng.lat, e.latlng.lng, true);
            });
        }
        function setMarker(lat, lng, doReverseGeocode = false) {
            if (marker) map.removeLayer(marker);
            marker = L.marker([lat, lng]).addTo(map);
            document.getElementById('meetingPointLat').value = lat;
            document.getElementById('meetingPointLng').value = lng;
            if (doReverseGeocode) {
                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data && data.display_name) {
                            document.getElementById('meetingPointAddress').value = data.display_name;
                        }
                    });
            }
        }
        document.getElementById('addMeetingPointBtn').onclick = function () {
            document.getElementById('meetingPointName').value = '';
            document.getElementById('meetingPointAddress').value = '';
            document.getElementById('meetingPointLat').value = '';
            document.getElementById('meetingPointLng').value = '';
            setTimeout(() => {
                initMap();
            }, 200);
            var modal = new bootstrap.Modal(document.getElementById('meetingPointModal'));
            modal.show();
        };
        document.getElementById('searchAddressBtn').onclick = function () {
            const query = document.getElementById('addressSearch').value;
            if (!query) return;
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
                .then(res => res.json())
                .then(data => {
                    if (data && data.length > 0) {
                        const place = data[0];
                        setMarker(place.lat, place.lon, false);
                        map.setView([place.lat, place.lon], 15);
                        document.getElementById('meetingPointAddress').value = place.display_name;
                    }
                });
        };
        document.getElementById('saveMeetingPointBtn').onclick = function () {
            const name = document.getElementById('meetingPointName').value;
            const address = document.getElementById('meetingPointAddress').value;
            const lat = document.getElementById('meetingPointLat').value;
            const lng = document.getElementById('meetingPointLng').value;
            if (!name || !address || !lat || !lng) {
                alert('Lütfen tüm alanları doldurun ve haritadan konum seçin.');
                return;
            }
            // Listeye ekle
            const container = document.getElementById('meetingPointsList');
            const idx = container.querySelectorAll('.meeting-point-item').length;
            const html = `<div class='card mb-2 meeting-point-item'><div class='card-body row'><div class='col-md-3'><strong>${name}</strong></div><div class='col-md-4'>${address}</div><div class='col-md-3'>${lat}, ${lng}</div><div class='col-md-2 text-end'><button type='button' class='btn btn-danger btn-sm remove-meeting-point'>Sil</button></div><input type='hidden' name='MeetingPoints[${idx}].Name' value='${name}' /><input type='hidden' name='MeetingPoints[${idx}].Address' value='${address}' /><input type='hidden' name='MeetingPoints[${idx}].Latitude' value='${lat}' /><input type='hidden' name='MeetingPoints[${idx}].Longitude' value='${lng}' /></div></div>`;
            container.insertAdjacentHTML('beforeend', html);
            var modal = bootstrap.Modal.getInstance(document.getElementById('meetingPointModal'));
            modal.hide();
        };
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('remove-meeting-point')) {
                e.target.closest('.meeting-point-item').remove();
            }
        });
    </script>
} 