@model TourManagementApi.Models.ViewModels.ActivityBasicViewModel

@{
    ViewData["Title"] = Model.ActivityId.HasValue ? "Tur Düzenle - Temel Bilgiler" : "Yeni Tur Ekle - Temel Bilgiler";
    var categories = new[] {
        new { Value = "Adventure", Text = "Adventure", Subcategories = new[] { "Hiking", "Rock Climbing", "Rafting", "Kayaking", "Camping", "Zip-lining", "Paragliding" } },
        new { Value = "Cultural", Text = "Cultural", Subcategories = new[] { "Museum", "Historical Site", "Art Tour" } },
        new { Value = "Nature", Text = "Nature", Subcategories = new[] { "Wildlife", "Botanical", "Eco Tour" } },
        new { Value = "Sports", Text = "Sports", Subcategories = new[] { "Football", "Basketball", "Tennis" } },
        new { Value = "Food", Text = "Food & Drink", Subcategories = new[] { "Wine Tasting", "Cooking Class", "Street Food" } },
        new { Value = "Wellness", Text = "Wellness", Subcategories = new[] { "Spa", "Yoga", "Retreat" } }
    };
    var roles = new[] { "Guide", "Tour Operator", "Manager", "Tour Coordinator", "Tour Assistant" };
    var cities = new[] {
        new { Code = "TR-01", Name = "Adana" },
        new { Code = "TR-06", Name = "Ankara" },
        new { Code = "TR-07", Name = "Antalya" },
        new { Code = "TR-09", Name = "Aydın" },
        new { Code = "TR-16", Name = "Bursa" },
        new { Code = "TR-20", Name = "Denizli" },
        new { Code = "TR-34", Name = "İstanbul" },
        new { Code = "TR-35", Name = "İzmir" },
        new { Code = "TR-48", Name = "Muğla" },
        new { Code = "TR-50", Name = "Nevşehir" }
    };
}
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<style>
    .gallery-thumb {
        transition: transform 0.3s ease-in-out;
        cursor: pointer;
    }

        .gallery-thumb:hover {
            transform: scale(1.3);
            z-index: 10;
        }

    .gallery-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .gallery-item {
        position: relative;
        width: 180px;
        height: 180px;
        overflow: hidden;
    }

        .gallery-item:hover {
            z-index: 999;
        }

        .gallery-item .btn {
            padding: 0.2rem 0.4rem;
            font-size: 0.75rem;
            position: absolute;
            top: 0;
            right: 0;
            z-index: 20;
        }
</style>


<h2>@ViewData["Title"]</h2>
@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<form asp-action="CreateBasic" method="post" enctype="multipart/form-data" autocomplete="off">
    @if (Model.ActivityId.HasValue)
    {
        <input type="hidden" name="ActivityId" id="ActivityId" value="@Model.ActivityId" />
    }

    <div class="card mb-4">
        <div class="card-header">Temel Bilgiler</div>
        <div class="card-body">
            <div class="mb-3">
                <label asp-for="Title" class="form-label">Başlık</label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Category" class="form-label">Kategori</label>
                    <select asp-for="Category" class="form-control" id="categorySelect" onchange="updateSubcategories(this.value)">
                        <option value="">Kategori seçin</option>
                        @foreach (var cat in categories)
                        {
                            <option value="@cat.Value">@cat.Text</option>
                        }
                    </select>
                    <span asp-validation-for="Category" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="Subcategory" class="form-label">Alt Kategori</label>
                    <select asp-for="Subcategory" class="form-control" id="subcategorySelect">
                        <option value="">Önce kategori seçin</option>
                    </select>
                    <span asp-validation-for="Subcategory" class="text-danger"></span>
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="Description" class="form-label">Açıklama</label>
                <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">Medya</div>
        <div class="card-body">
            <div class="alert alert-info">
                <h6 class="mb-2">Görsel Yükleme Kuralları:</h6>
                <ul class="mb-0">
                    <li>En az 1280 piksel genişliğinde manzara görselleri.</li>
                    <li>JPG, JPEG, PNG veya GIF dosya türleri (maksimum 7 MB).</li>
                    <li>Fotoğrafçı imzası, logolar veya okunabilir plakalar bulunmamalıdır.</li>
                    <li>Yapay zeka tarafından oluşturulan görsellerden, basit haritaların fotoğraflarından ve markalı otobüs güzergahlarından kaçının.</li>
                    <li>Portre/dikey format, özçekim veya siyah beyaz fotoğraflar olmamalıdır.</li>
                </ul>
            </div>

            <div class="row mb-4">
                <div class="col-md-2">
                    <label class="form-label">Kapak Fotoğrafı</label>
                    @if (!string.IsNullOrEmpty(Model.CoverImageUrl))
                    {
                        <div class="mb-2 position-relative">
                            <img src="@Model.CoverImageUrl" alt="Kapak" class="img-thumbnail" style="max-height: 150px;" />
                            <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 delete-cover-or-preview" data-type="cover">
                                <i class="fa-solid fa-xmark">X</i>
                            </button>
                        </div>
                    }
                    <input asp-for="CoverImage" type="file" accept="image/*" class="form-control" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Önizleme Fotoğrafı</label>
                    @if (!string.IsNullOrEmpty(Model.PreviewImageUrl))
                    {
                        <div class="mb-2 position-relative">
                            <img src="@Model.PreviewImageUrl" alt="Önizleme" class="img-thumbnail" style="max-height: 150px;" />
                            <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 delete-cover-or-preview" data-type="preview">
                                <i class="fa-solid fa-xmark">X</i>
                            </button>
                        </div>
                    }
                    <input asp-for="PreviewImage" type="file" accept="image/*" class="form-control" />
                </div>

                @foreach (var img in Model.ExistingGalleryImages)
                {
                    <input type="hidden" name="ExistingGalleryImages" value="@img" />
                }

                <div class="col-md-8">

                    @if (Model.ExistingGalleryImages != null && Model.ExistingGalleryImages.Any())
                    {
                        <div class="gallery-container">
                            @foreach (var imgPath in Model.ExistingGalleryImages)
                            {
                                var fileName = System.IO.Path.GetFileName(imgPath);
                                <div class="gallery-item" data-image="@imgPath">
                                    <img src="/uploads/gallery/@fileName"
                                         class="img-thumbnail gallery-thumb"
                                         data-bs-toggle="modal"
                                         data-bs-target="#imagePreviewModal"
                                         data-img="/uploads/gallery/@fileName"
                                         style="width: 100%; height: 100%; object-fit: cover; cursor: zoom-in;" />
                                    <button type="button" class="btn btn-sm btn-danger delete-gallery-image" data-image="@imgPath">✕</button>
                                </div>
                            }
                        </div>
                    }
                    <div class="modal fade" id="imagePreviewModal" tabindex="-1" aria-labelledby="imagePreviewLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered modal-xl">
                            <div class="modal-content">
                                <div class="modal-body p-0">
                                    <img id="previewModalImage" src="" alt="Preview" class="img-fluid w-100" />
                                </div>
                            </div>
                        </div>
                    </div>

                   @*  @if (Model.ExistingGalleryImages != null && Model.ExistingGalleryImages.Any())
                    {
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var imgPath in Model.ExistingGalleryImages)
                            {
                                var fileName = System.IO.Path.GetFileName(imgPath);
                                <div class="position-relative" data-image="@imgPath" style="width: 170px; height: 170px;">
                                    <img src="/uploads/gallery/@fileName"
                                         class="img-thumbnail"
                                         style="width: 100%; height: 100%; object-fit: cover;" />
                                    <button type="button"
                                            class="btn btn-sm btn-danger position-absolute top-0 end-0 delete-gallery-image"
                                            data-image="@imgPath"
                                            style="padding: 0.2rem 0.4rem; font-size: 0.75rem;">
                                        ✕
                                    </button>
                                </div>
                            }
                        </div>
                    } *@

                    <input asp-for="GalleryImages" type="file" accept="image/*" class="form-control" multiple />
                </div>
            </div>

        </div>

        <div class="mb-3">
            <label class="form-label">Video URL'leri (En fazla 3 adet)</label>
            <div id="videoUrlsContainer">
                @if (Model.VideoUrls != null && Model.VideoUrls.Any())
                {
                    @foreach (var url in Model.VideoUrls)
                    {
                        <div class="input-group mb-2">
                            <input type="url" name="VideoUrls" class="form-control" value="@url" placeholder="https://..." />
                            <button type="button" class="btn btn-danger" onclick="removeVideoUrl(this)">Kaldır</button>
                        </div>
                    }
                }
                else
                {
                    <div class="input-group mb-2">
                        <input type="url" name="VideoUrls" class="form-control" placeholder="https://..." />
                        <button type="button" class="btn btn-danger" onclick="removeVideoUrl(this)">Kaldır</button>
                    </div>
                }
            </div>
            <button type="button" class="btn btn-secondary btn-sm" onclick="addVideoUrl()">Video URL Ekle</button>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">Detaylı Bilgiler</div>
        <div class="card-body">
            <div class="mb-3">
                <label asp-for="Highlights" class="form-label">Öne Çıkanlar</label>
                <textarea asp-for="Highlights" class="form-control" rows="4"></textarea>
            </div>

            <div class="mb-3">
                <label asp-for="Itinerary" class="form-label">Program Akışı</label>
                <textarea asp-for="Itinerary" class="form-control" rows="6"></textarea>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label asp-for="Inclusions" class="form-label">Dahil Olanlar</label>
                    <div class="inclusion-container">
                        @if (Model.Inclusions != null && Model.Inclusions.Any())
                        {
                            @foreach (var item in Model.Inclusions)
                            {
                                <div class="input-group mb-2">
                                    <input type="text" name="Inclusions" class="form-control" value="@item" />
                                    <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="input-group mb-2">
                                <input type="text" name="Inclusions" class="form-control" placeholder="Örn: Öğle yemeği" />
                                <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
                            </div>
                        }
                    </div>
                    <button type="button" class="btn btn-secondary btn-sm" onclick="addInclusion()">Dahil Olan Ekle</button>
                </div>

                <div class="col-md-4 mb-3">
                    <label asp-for="Exclusions" class="form-label">Dahil Olmayanlar</label>
                    <div class="exclusion-container">
                        @if (Model.Exclusions != null && Model.Exclusions.Any())
                        {
                            @foreach (var item in Model.Exclusions)
                            {
                                <div class="input-group mb-2">
                                    <input type="text" name="Exclusions" class="form-control" value="@item" />
                                    <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="input-group mb-2">
                                <input type="text" name="Exclusions" class="form-control" placeholder="Örn: Öğle yemeği" />
                                <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
                            </div>
                        }
                    </div>
                    <button type="button" class="btn btn-secondary btn-sm" onclick="addExclusion()">Dahil Olmayan Ekle</button>
                </div>

                <div class="col-md-4 mb-3">
                    <label asp-for="ImportantInfo" class="form-label">Önemli Bilgiler</label>
                    <div class="important-info-container">
                        @if (Model.ImportantInfo != null && Model.ImportantInfo.Any())
                        {
                            @foreach (var info in Model.ImportantInfo)
                            {
                                <div class="input-group mb-2">
                                    <input type="text" name="ImportantInfo" class="form-control" value="@info" />
                                    <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="input-group mb-2">
                                <input type="text" name="ImportantInfo" class="form-control" placeholder="Örn: 18 yaşından küçüklere alkol servisi yapılmamaktadır" />
                                <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
                            </div>
                        }
                    </div>
                    <button type="button" class="btn btn-secondary btn-sm" onclick="addImportantInfo()">Önemli Bilgi Ekle</button>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">Destinasyon</div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Ülke</label>
                    <select class="form-control" id="countrySelect" onchange="updateCities(this.value)">
                        <option value="">Ülke seçin</option>
                        <option value="TR" selected>Türkiye</option>
                    </select>
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Şehir</label>
                    <select class="form-control" id="citySelect" onchange="updateDestination(this)">
                        <option value="">Şehir seçin</option>
                        @foreach (var city in cities)
                        {
                            <option value="@city.Code"
                                    data-name="@city.Name"
                                    selected="@(city.Code == Model.DestinationCode)">
                                @city.Name
                            </option>
                        }
                    </select>
                </div>
            </div>
            <input type="hidden" asp-for="CountryCode" id="countryCode" />
            <input type="hidden" asp-for="DestinationCode" id="destinationCode" />
            <input type="hidden" asp-for="DestinationName" id="destinationName" />
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">İletişim Bilgileri</div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="ContactInfo.Name" class="form-label">İletişim Kişisi</label>
                    <input asp-for="ContactInfo.Name" class="form-control" />
                    <span asp-validation-for="ContactInfo.Name" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="ContactInfo.Role" class="form-label">Görevi</label>
                    <select asp-for="ContactInfo.Role" class="form-control">
                        <option value="">Görev seçin</option>
                        @foreach (var role in roles)
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                    <span asp-validation-for="ContactInfo.Role" class="text-danger"></span>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="ContactInfo.Email" class="form-label">E-posta</label>
                    <input asp-for="ContactInfo.Email" class="form-control" type="email" />
                    <span asp-validation-for="ContactInfo.Email" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="ContactInfo.Phone" class="form-label">Telefon</label>
                    <input asp-for="ContactInfo.Phone" class="form-control" type="tel" />
                    <span asp-validation-for="ContactInfo.Phone" class="text-danger"></span>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">@(Model.ActivityId.HasValue ? "Güncelle" : "Kaydet")</button>
        <a asp-action="Index" class="btn btn-secondary">İptal</a>
    </div>
</form>

@section Scripts {
    <script>
        // Alt kategori güncelleme
               function updateSubcategories(category, selectedSubcategory = null) {
                const subcats = @Html.Raw(Json.Serialize(categories.ToDictionary(c => c.Value, c => c.Subcategories)));
                const select = document.getElementById('subcategorySelect');
                select.innerHTML = '<option value="">Alt kategori seçin</option>';

                if (category && subcats[category]) {
                    subcats[category].forEach(sub => {
                        const option = document.createElement('option');
                        option.value = sub;
                        option.textContent = sub;
                        if (sub === selectedSubcategory) {
                            option.selected = true;
                        }
                        select.appendChild(option);
                    });
                }
            }
                   const modal = document.getElementById('imagePreviewModal');
        modal.addEventListener('show.bs.modal', function (event) {
            const triggerImage = event.relatedTarget;
            const imgSrc = triggerImage.getAttribute('data-img');
            const modalImage = document.getElementById('previewModalImage');
            modalImage.src = imgSrc;
        });
           document.addEventListener('click', async function (e) {
                    if (e.target.classList.contains('delete-cover-or-preview') || e.target.closest('.delete-cover-or-preview')) {
                        const button = e.target.closest('.delete-cover-or-preview');
                        const imageType = button.getAttribute('data-type');

                        if (!confirm("Bu görseli silmek istediğinize emin misiniz?")) return;

                        try {
                            const activityId = document.getElementById("ActivityId").value;
                            const response = await fetch('/ActivitiesWizard/DeleteCoverOrPreviewImage', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                },
                                body: JSON.stringify({ imageType: imageType, activityId: parseInt(activityId) })
                            });

                            const result = await response.json();
                            if (result.success) {
                                button.parentElement.remove(); // img ve button kapsayıcısını kaldır
                            } else {
                                alert("Silme işlemi başarısız: " + result.message);
                            }
                        } catch (error) {
                            alert("Hata oluştu: " + error.message);
                        }
                    }
                });

         document.addEventListener('click', async function (e) {
            if (e.target.classList.contains('delete-gallery-image') || e.target.closest('.delete-gallery-image')) {
                const button = e.target.closest('.delete-gallery-image');
                const imagePath = button.getAttribute('data-image');

                if (!confirm("Bu görseli silmek istediğinize emin misiniz?")) return;

                try {
                    const activityId = document.getElementById("ActivityId").value;
                    const response = await fetch('/ActivitiesWizard/DeleteGalleryImage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ imagePath: imagePath, activityId: parseInt(activityId) })
                    });

                    const result = await response.json();

                    if (result.success) {
                        const item = document.querySelector(`[data-image="${imagePath}"]`);
                        if (item) item.remove();
                    } else {
                        alert("Silme işlemi başarısız: " + result.message);
                    }
                } catch (error) {
                    alert("Hata oluştu: " + error.message);
                }
            }
        });

        // Şehir seçimi güncelleme
        function updateCities(countryCode) {
            const citySelect = document.getElementById('citySelect');
            citySelect.disabled = !countryCode;
            if (countryCode) {
                updateDestination(citySelect);
            } else {
                document.getElementById('countryCode').value = '';
                document.getElementById('destinationCode').value = '';
                document.getElementById('destinationName').value = '';
            }
        }

        // Destinasyon güncelleme
        function updateDestination(select) {
            const option = select.options[select.selectedIndex];
            if (option && option.value) {
                document.getElementById('countryCode').value = document.getElementById('countrySelect').value;
                document.getElementById('destinationCode').value = option.value;
                document.getElementById('destinationName').value = option.dataset.name;
            }
        }

        // Video URL ekleme/kaldırma
        function addVideoUrl() {
            const container = document.getElementById('videoUrlsContainer');
            if (container.children.length < 3) {
                const div = document.createElement('div');
                div.className = 'input-group mb-2';
                div.innerHTML = `
                    <input type="url" name="VideoUrls" class="form-control" placeholder="https://..." />
                    <button type="button" class="btn btn-danger" onclick="removeVideoUrl(this)">Kaldır</button>
                `;
                container.appendChild(div);
            }
        }

        function removeVideoUrl(button) {
            button.closest('.input-group').remove();
        }

        // Dahil olan ekleme
        function addInclusion() {
            const container = document.querySelector('.inclusion-container');
            const div = document.createElement('div');
            div.className = 'input-group mb-2';
            div.innerHTML = `
                <input type="text" name="Inclusions" class="form-control" placeholder="Örn: Öğle yemeği" />
                <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
            `;
            container.appendChild(div);
        }

        // Dahil olmayan ekleme
        function addExclusion() {
            const container = document.querySelector('.exclusion-container');
            const div = document.createElement('div');
            div.className = 'input-group mb-2';
            div.innerHTML = `
                <input type="text" name="Exclusions" class="form-control" placeholder="Örn: Öğle yemeği" />
                <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
            `;
            container.appendChild(div);
        }

        // Önemli bilgi ekleme
        function addImportantInfo() {
            const container = document.querySelector('.important-info-container');
            const div = document.createElement('div');
            div.className = 'input-group mb-2';
            div.innerHTML = `
                <input type="text" name="ImportantInfo" class="form-control" placeholder="Örn: 18 yaşından küçüklere alkol servisi yapılmamaktadır" />
                <button type="button" class="btn btn-danger" onclick="removeItem(this)">Kaldır</button>
            `;
            container.appendChild(div);
        }

        // Genel öğe kaldırma
        function removeItem(button) {
            button.closest('.input-group').remove();
        }

        // Sayfa yüklendiğinde
                document.addEventListener('DOMContentLoaded', function () {
                const category = document.getElementById('categorySelect').value;
                const selectedSubcategory = '@Model.Subcategory';

                if (category) {
                    updateSubcategories(category, selectedSubcategory);
                }

                // ülke ve şehir seçimi için var olan kodun kalmasına izin veriyoruz
                const countrySelect = document.getElementById('countrySelect');
                const citySelect = document.getElementById('citySelect');
                if (countrySelect.value) {
                    updateCities(countrySelect.value);
                    if (citySelect.value) {
                        updateDestination(citySelect);
                    }
                }
            });

    </script>
}