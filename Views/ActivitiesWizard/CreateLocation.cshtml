@model TourManagementApi.Models.ViewModels.ActivityLocationViewModel

@{
    ViewData["Title"] = "Lokasyon Ekle/Düzenle";
}

<p>
    <h2>@ViewData["Title"]</h2>
    <a class="btn btn-secondary" asp-controller="ActivitiesWizard" asp-action="Index">← Turlara Dön</a>
</p>
@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<form asp-action="CreateLocation" method="post" autocomplete="off">
    <input type="hidden" asp-for="ActivityId" />

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span>Harita Üzerinde Konum Seç</span>
            <div>
                <button type="button" class="btn btn-sm btn-info" onclick="togglePointType('meeting')">Buluşma Noktası Modu</button>
                <button type="button" class="btn btn-sm btn-warning" onclick="togglePointType('route')">Rota Noktası Modu</button>
            </div>
        </div>
        <div class="card-body">
            <div class="input-group mb-2">
                <input type="text" id="addressSearch" class="form-control" placeholder="Adres veya yer arayın...">
                <button type="button" class="btn btn-primary" onclick="searchAddress()">Ara</button>
            </div>
            <div id="locationMap" style="height: 500px;"></div>
        </div>
    </div>

    <div class="row">
        <!-- Buluşma Noktaları -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Buluşma Noktaları</span>
                    <span class="badge bg-info" id="meetingPointCount">0</span>
                </div>
                <div class="card-body" id="meetingPointsContainer">
                    @for (var i = 0; i < Model.MeetingPoints.Count; i++)
                    {
                        <div class="meeting-point-item border rounded p-3 mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <h6>Buluşma Noktası #@(i + 1)</h6>
                                <button type="button" class="btn btn-sm btn-danger" onclick="removeMeetingPoint(this)">Sil</button>
                            </div>
                            <input type="hidden" asp-for="MeetingPoints[i].Name" />
                            <input type="hidden" asp-for="MeetingPoints[i].Latitude" />
                            <input type="hidden" asp-for="MeetingPoints[i].Longitude" />
                            <input type="hidden" asp-for="MeetingPoints[i].Address" />
                            <div class="row">
                                <div class="col-12">
                                    <div class="form-group mb-2">
                                        <label>Buluşma Noktası Adı</label>
                                        <input class="form-control name-input" value="@Model.MeetingPoints[i].Name" onchange="updateMeetingPointField(this, 'Name')" />
                                    </div>
                                    <div class="form-group">
                                        <label>Adres</label>
                                        <input class="form-control address-input" value="@Model.MeetingPoints[i].Address" readonly />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Rota Noktaları -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Rota Noktaları</span>
                    <span class="badge bg-warning" id="routePointCount">0</span>
                </div>
                <div class="card-body" id="routePointsContainer">
                    @for (var i = 0; i < Model.RoutePoints.Count; i++)
                    {
                        <div class="route-point-item border rounded p-3 mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <h6>Rota Noktası #@(i + 1)</h6>
                                <button type="button" class="btn btn-sm btn-danger" onclick="removeRoutePoint(this)">Sil</button>
                            </div>
                            <input type="hidden" asp-for="RoutePoints[i].Name" />
                            <input type="hidden" asp-for="RoutePoints[i].Latitude" />
                            <input type="hidden" asp-for="RoutePoints[i].Longitude" />
                            <div class="form-group mb-2">
                                <label>Rota Noktası Adı</label>
                                <input class="form-control name-input" value="@Model.RoutePoints[i].Name" onchange="updateRoutePointField(this, 'Name')" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Kaydet</button>
    <a asp-action="Index" class="btn btn-secondary">İptal</a>
</form>

<!-- Nokta Ekleme Modalı -->
<div class="modal fade" id="addPointModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPointModalTitle">Nokta Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label>Nokta Adı</label>
                    <input type="text" class="form-control" id="pointName">
                </div>
                <div class="form-group mb-3" id="addressGroup">
                    <label>Adres</label>
                    <input type="text" class="form-control" id="pointAddress" readonly>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="savePoint()">Ekle</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        let map, meetingPointMarkers = [], routePointMarkers = [], routeLine;
        let currentPointType = 'meeting'; // 'meeting' veya 'route'
        let tempLat, tempLng, tempAddress;

        const meetingPointIcon = L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34]
        });

        const routePointIcon = L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34]
        });

        function initMap() {
            map = L.map('locationMap').setView([39.9208, 32.8541], 6);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap'
            }).addTo(map);

            map.on('click', function(e) {
                const lat = e.latlng.lat;
                const lng = e.latlng.lng;
                tempLat = lat;
                tempLng = lng;

                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data && data.display_name) {
                            tempAddress = data.display_name;
                            const name = data.address.road || data.address.suburb || data.address.city_district || '';
                            showAddPointModal(name);
                        }
                    });
            });

            loadExistingPoints();
            updateCounters();
        }

        function togglePointType(type) {
            currentPointType = type;
            document.querySelectorAll('.btn-info, .btn-warning').forEach(btn => btn.classList.remove('active'));
            if (type === 'meeting') {
                document.querySelector('.btn-info').classList.add('active');
            } else {
                document.querySelector('.btn-warning').classList.add('active');
            }
        }

        function showAddPointModal(suggestedName) {
            const modal = new bootstrap.Modal(document.getElementById('addPointModal'));
            document.getElementById('pointName').value = suggestedName;
            
            if (currentPointType === 'meeting') {
                document.getElementById('addPointModalTitle').textContent = 'Buluşma Noktası Ekle';
                document.getElementById('addressGroup').style.display = 'block';
                document.getElementById('pointAddress').value = tempAddress;
            } else {
                document.getElementById('addPointModalTitle').textContent = 'Rota Noktası Ekle';
                document.getElementById('addressGroup').style.display = 'none';
            }
            
            modal.show();
        }

        function savePoint() {
            const name = document.getElementById('pointName').value;
            if (currentPointType === 'meeting') {
                addMeetingPoint(tempLat, tempLng, tempAddress, name);
            } else {
                addRoutePoint(tempLat, tempLng, name);
            }
            bootstrap.Modal.getInstance(document.getElementById('addPointModal')).hide();
            updateCounters();
        }

        function loadExistingPoints() {
            // Buluşma noktalarını yükle
            document.querySelectorAll('.meeting-point-item').forEach(item => {
                const lat = item.querySelector('input[name$=".Latitude"]').value;
                const lng = item.querySelector('input[name$=".Longitude"]').value;
                const name = item.querySelector('input[name$=".Name"]').value;
                const address = item.querySelector('input[name$=".Address"]').value;
                
                if (lat && lng) {
                    const marker = L.marker([lat, lng], { icon: meetingPointIcon })
                        .bindPopup(name)
                        .addTo(map);
                    meetingPointMarkers.push(marker);
                }
            });

            // Rota noktalarını yükle
            document.querySelectorAll('.route-point-item').forEach(item => {
                const lat = item.querySelector('input[name$=".Latitude"]').value;
                const lng = item.querySelector('input[name$=".Longitude"]').value;
                const name = item.querySelector('input[name$=".Name"]').value;
                
                if (lat && lng) {
                    const marker = L.marker([lat, lng], { icon: routePointIcon })
                        .bindPopup(name)
                        .addTo(map);
                    routePointMarkers.push(marker);
                }
            });

            // Haritayı noktaları kapsayacak şekilde ayarla
            if (meetingPointMarkers.length > 0 || routePointMarkers.length > 0) {
                const allMarkers = [...meetingPointMarkers, ...routePointMarkers];
                const bounds = L.latLngBounds(allMarkers.map(marker => marker.getLatLng()));
                map.fitBounds(bounds, { padding: [50, 50] });
            }

            updateRouteLine();
            updateCounters();
        }

        function addMeetingPoint(lat, lng, address, name) {
            const container = document.getElementById('meetingPointsContainer');
            const index = container.children.length;
            const html = `
                <div class="meeting-point-item border rounded p-3 mb-3">
                    <div class="d-flex justify-content-between mb-2">
                        <h6>Buluşma Noktası #${index + 1}</h6>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeMeetingPoint(this)">Sil</button>
                    </div>
                    <input type="hidden" name="MeetingPoints[${index}].Name" value="${name || ''}" />
                    <input type="hidden" name="MeetingPoints[${index}].Latitude" value="${lat || ''}" />
                    <input type="hidden" name="MeetingPoints[${index}].Longitude" value="${lng || ''}" />
                    <input type="hidden" name="MeetingPoints[${index}].Address" value="${address || ''}" />
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group mb-2">
                                <label>Buluşma Noktası Adı</label>
                                <input class="form-control name-input" value="${name || ''}" onchange="updateMeetingPointField(this, 'Name')" />
                            </div>
                            <div class="form-group">
                                <label>Adres</label>
                                <input class="form-control address-input" value="${address || ''}" readonly />
                            </div>
                        </div>
                    </div>
                </div>`;
            container.insertAdjacentHTML('beforeend', html);

            if (lat && lng) {
                const marker = L.marker([lat, lng], { icon: meetingPointIcon }).addTo(map);
                meetingPointMarkers.push(marker);
            }
            updateCounters();
        }

        function addRoutePoint(lat, lng, name) {
            const container = document.getElementById('routePointsContainer');
            const index = container.children.length;
            const html = `
                <div class="route-point-item border rounded p-3 mb-3">
                    <div class="d-flex justify-content-between mb-2">
                        <h6>Rota Noktası #${index + 1}</h6>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeRoutePoint(this)">Sil</button>
                    </div>
                    <input type="hidden" name="RoutePoints[${index}].Name" value="${name || ''}" />
                    <input type="hidden" name="RoutePoints[${index}].Latitude" value="${lat || ''}" />
                    <input type="hidden" name="RoutePoints[${index}].Longitude" value="${lng || ''}" />
                    <div class="form-group mb-2">
                        <label>Rota Noktası Adı</label>
                        <input class="form-control name-input" value="${name || ''}" onchange="updateRoutePointField(this, 'Name')" />
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', html);

            const marker = L.marker([lat, lng], { icon: routePointIcon }).addTo(map);
            routePointMarkers.push(marker);
            updateRouteLine();
            updateCounters();
        }

        function removeMeetingPoint(button) {
            const item = button.closest('.meeting-point-item');
            const index = Array.from(item.parentNode.children).indexOf(item);
            if (meetingPointMarkers[index]) {
                map.removeLayer(meetingPointMarkers[index]);
                meetingPointMarkers.splice(index, 1);
            }
            item.remove();
            reindexMeetingPoints();
            updateCounters();
        }

        function removeRoutePoint(button) {
            const item = button.closest('.route-point-item');
            const container = item.parentElement;
            const index = Array.from(container.children).indexOf(item);
            
            if (routePointMarkers[index]) {
                map.removeLayer(routePointMarkers[index]);
                routePointMarkers.splice(index, 1);
            }
            
            item.remove();
            
            // Kalan noktaların indekslerini güncelle
            container.querySelectorAll('.route-point-item').forEach((item, i) => {
                item.querySelector('h6').textContent = `Rota Noktası #${i + 1}`;
                item.querySelectorAll('input[type="hidden"]').forEach(input => {
                    const name = input.name.replace(/\[\d+\]/, `[${i}]`);
                    input.name = name;
                });
            });
            
            updateRouteLine();
            updateCounters();
        }

        function reindexMeetingPoints() {
            document.querySelectorAll('.meeting-point-item').forEach((item, index) => {
                item.querySelector('h6').textContent = `Buluşma Noktası #${index + 1}`;
                item.querySelectorAll('input[type="hidden"]').forEach(input => {
                    const fieldName = input.name.split('.')[1];
                    input.name = `MeetingPoints[${index}].${fieldName}`;
                });
            });
        }

        function reindexRoutePoints() {
            document.querySelectorAll('.route-point-item').forEach((item, index) => {
                item.querySelector('h6').textContent = `Rota Noktası #${index + 1}`;
                item.querySelectorAll('input[type="hidden"]').forEach(input => {
                    const fieldName = input.name.split('.')[1];
                    input.name = `RoutePoints[${index}].${fieldName}`;
                });
            });
        }

        function updateMeetingPointField(input, field) {
            const item = input.closest('.meeting-point-item');
            item.querySelector(`input[name$=".${field}"]`).value = input.value;
        }

        function updateRoutePointField(input, field) {
            const item = input.closest('.route-point-item');
            const hiddenInput = item.querySelector(`input[name$="].${field}"]`);
            if (hiddenInput) {
                hiddenInput.value = input.value;
            }
        }

        function updateRouteLine() {
            if (routeLine) {
                map.removeLayer(routeLine);
            }

            if (routePointMarkers.length > 1) {
                const coordinates = routePointMarkers.map(marker => marker.getLatLng());
                routeLine = L.polyline(coordinates, { color: 'red', weight: 3 }).addTo(map);
            }
        }

        function updateCounters() {
            const meetingPointCount = document.querySelectorAll('.meeting-point-item').length;
            const routePointCount = document.querySelectorAll('.route-point-item').length;
            
            document.getElementById('meetingPointCount').textContent = meetingPointCount.toString();
            document.getElementById('routePointCount').textContent = routePointCount.toString();
        }

        function searchAddress() {
            const query = document.getElementById('addressSearch').value;
            if (!query) return;
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
                .then(res => res.json())
                .then(data => {
                    if (data && data.length > 0) {
                        const place = data[0];
                        map.setView([place.lat, place.lon], 15);
                    }
                });
        }

        document.addEventListener('DOMContentLoaded', function() {
            initMap();
            togglePointType('meeting');
        });
    </script>
} 