// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourManagementApi.Data;

#nullable disable

namespace TourManagementApi.Migrations
{
    [DbContext(typeof(TourManagementDbContext))]
    [Migration("20250702122644_AddYourChangesMigration")]
    partial class AddYourChangesMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TourManagementApi.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("B2BAgencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfoEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactInfo_Email");

                    b.Property<bool?>("ContactInfoIsNull")
                        .HasColumnType("bit");

                    b.Property<string>("ContactInfoName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactInfo_Name");

                    b.Property<string>("ContactInfoPhone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactInfo_Phone");

                    b.Property<string>("ContactInfoRole")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactInfo_Role");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("DetailsUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Exclusions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExclusionsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("GalleryImages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestFields")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]");

                    b.Property<string>("GuestFieldsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Highlights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantInfo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]");

                    b.Property<string>("ImportantInfoJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Inclusions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]");

                    b.Property<string>("InclusionsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFreeCancellation")
                        .HasColumnType("bit");

                    b.Property<string>("Itinerary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("MediaVideos")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Media_Videos");

                    b.Property<string>("PartnerSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("PreviewImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalRatingCount")
                        .HasColumnType("int");

                    b.Property<int?>("TourCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TourCompanyId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("TourManagementApi.Models.ActivityLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id")
                        .HasName("PK_ActivityLanguage");

                    b.HasIndex(new[] { "ActivityId" }, "IX_ActivityLanguage_ActivityId");

                    b.ToTable("ActivityLanguages");
                });

            modelBuilder.Entity("TourManagementApi.Models.Addon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("TRY");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Addons__3214EC07FF36CB8D");

                    b.HasIndex("ActivityId");

                    b.ToTable("Addons");
                });

            modelBuilder.Entity("TourManagementApi.Models.AddonTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddonId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__AddonTra__3214EC07325ED02A");

                    b.HasIndex("AddonId");

                    b.ToTable("AddonTranslations");
                });

            modelBuilder.Entity("TourManagementApi.Models.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableCapacity")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("MaximumCapacity")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("PartnerSupplierId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("PK__Availabi__3214EC0722F78A97");

                    b.HasIndex("ActivityId");

                    b.HasIndex("OptionId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("TourManagementApi.Models.CancellationPolicyCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFreeCancellation")
                        .HasColumnType("bit");

                    b.Property<int>("MinDurationBeforeStartTimeSec")
                        .HasColumnType("int");

                    b.Property<int>("RefundPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Cancella__3214EC070325041F");

                    b.HasIndex("ActivityId");

                    b.ToTable("CancellationPolicyConditions");
                });

            modelBuilder.Entity("TourManagementApi.Models.MeetingPoint", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId", "Id");

                    b.ToTable("MeetingPoint", (string)null);
                });

            modelBuilder.Entity("TourManagementApi.Models.OpeningHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OptionId" }, "IX_OpeningHours_OptionId");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("TourManagementApi.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<bool>("CanBeBookedAfterStartTime")
                        .HasColumnType("bit");

                    b.Property<int>("CutOff")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("EndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UntilDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Weekdays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActivityId" }, "IX_Options_ActivityId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("TourManagementApi.Models.PriceCategory", b =>
                {
                    b.Property<int>("ActivityPricingActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<int?>("MinAge")
                        .HasColumnType("int");

                    b.Property<int?>("MinParticipants")
                        .HasColumnType("int");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityPricingActivityId", "Id");

                    b.ToTable("PriceCategory", (string)null);
                });

            modelBuilder.Entity("TourManagementApi.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("CancelNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienceBankBookingId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("");

                    b.Property<int>("GuestCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("MarketplaceBookingId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("MarketplaceId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("PartnerBookingId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("PartnerSupplierId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActivityId" }, "IX_Reservations_ActivityId");

                    b.HasIndex(new[] { "ExperienceBankBookingId" }, "IX_Reservations_ExperienceBankBookingId")
                        .IsUnique();

                    b.HasIndex(new[] { "OptionId" }, "IX_Reservations_OptionId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("TourManagementApi.Models.ReservationGuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalFieldsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("AddonsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("Occupancy")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("TicketCategory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReservationId" }, "IX_ReservationGuests_ReservationId");

                    b.ToTable("ReservationGuests");
                });

            modelBuilder.Entity("TourManagementApi.Models.RoutePoint", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId", "Id");

                    b.ToTable("RoutePoint", (string)null);
                });

            modelBuilder.Entity("TourManagementApi.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExperienceBankTicketId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalTicketId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketCodeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReservationId" }, "IX_Ticket_ReservationId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("TourManagementApi.Models.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MaxSeats")
                        .HasColumnType("int");

                    b.Property<int?>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("MinSeats")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OptionId" }, "IX_TicketCategories_OptionId");

                    b.ToTable("TicketCategories");
                });

            modelBuilder.Entity("TourManagementApi.Models.TicketCategoryCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityId")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("TicketCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TicketCa__3214EC07C98BD1B7");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("TicketCategoryId");

                    b.ToTable("TicketCategoryCapacities");
                });

            modelBuilder.Entity("TourManagementApi.Models.TimeSlot", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId", "Id");

                    b.ToTable("TimeSlot", (string)null);
                });

            modelBuilder.Entity("TourManagementApi.Models.TourCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AracD2belgesiPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("AracD2BelgesiPath");

                    b.Property<string>("AuthorizedPerson")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FaaliyetBelgesiPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HizmetDetayiPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImzaDocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OdaSicilKaydiPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SigortaBelgesiPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SportifFaaliyetBelgesiPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TicaretSicilGazetesiPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VergiLevhasıPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id")
                        .HasName("PK__TourComp__3214EC07A431D01F");

                    b.ToTable("TourCompanies");
                });

            modelBuilder.Entity("TourManagementApi.Models.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExclusionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Highlights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantInfoJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InclusionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Itinerary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Translat__3214EC07A96AFBF4");

                    b.HasIndex(new[] { "ActivityId", "Language" }, "UX_Translation_Activity_Language")
                        .IsUnique();

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("TourManagementApi.Models.Activity", b =>
                {
                    b.HasOne("TourManagementApi.Models.TourCompany", "TourCompany")
                        .WithMany("Activities")
                        .HasForeignKey("TourCompanyId")
                        .HasConstraintName("FK_Activities_TourCompanies");

                    b.Navigation("TourCompany");
                });

            modelBuilder.Entity("TourManagementApi.Models.ActivityLanguage", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("ActivityLanguages")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActivityLanguage_Activities_ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TourManagementApi.Models.Addon", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("Addons")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Addons_Activities");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TourManagementApi.Models.AddonTranslation", b =>
                {
                    b.HasOne("TourManagementApi.Models.Addon", "Addon")
                        .WithMany("AddonTranslations")
                        .HasForeignKey("AddonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AddonTranslations_Addons");

                    b.Navigation("Addon");
                });

            modelBuilder.Entity("TourManagementApi.Models.Availability", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("Availabilities")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Availabilities_Availabilities");

                    b.HasOne("TourManagementApi.Models.Option", "Option")
                        .WithMany("Availabilities")
                        .HasForeignKey("OptionId")
                        .IsRequired()
                        .HasConstraintName("FK_Availabilities_Options");

                    b.Navigation("Activity");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("TourManagementApi.Models.CancellationPolicyCondition", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("CancellationPolicyConditions")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CancellationPolicyConditions_Activity");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TourManagementApi.Models.MeetingPoint", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("MeetingPoints")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TourManagementApi.Models.OpeningHour", b =>
                {
                    b.HasOne("TourManagementApi.Models.Option", "Option")
                        .WithMany("OpeningHours")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("TourManagementApi.Models.Option", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("Options")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TourManagementApi.Models.PriceCategory", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "ActivityPricingActivity")
                        .WithMany("PriceCategories")
                        .HasForeignKey("ActivityPricingActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityPricingActivity");
                });

            modelBuilder.Entity("TourManagementApi.Models.Reservation", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("Reservations")
                        .HasForeignKey("ActivityId")
                        .IsRequired();

                    b.HasOne("TourManagementApi.Models.Option", "Option")
                        .WithMany("Reservations")
                        .HasForeignKey("OptionId")
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("TourManagementApi.Models.ReservationGuest", b =>
                {
                    b.HasOne("TourManagementApi.Models.Reservation", "Reservation")
                        .WithMany("ReservationGuests")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("TourManagementApi.Models.RoutePoint", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("RoutePoints")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TourManagementApi.Models.Ticket", b =>
                {
                    b.HasOne("TourManagementApi.Models.Reservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationId");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("TourManagementApi.Models.TicketCategory", b =>
                {
                    b.HasOne("TourManagementApi.Models.Option", "Option")
                        .WithMany("TicketCategories")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("TourManagementApi.Models.TicketCategoryCapacity", b =>
                {
                    b.HasOne("TourManagementApi.Models.Availability", "Availability")
                        .WithMany("TicketCategoryCapacities")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TicketCat__Avail__69FBBC1F");

                    b.HasOne("TourManagementApi.Models.TicketCategory", "TicketCategory")
                        .WithMany("TicketCategoryCapacities")
                        .HasForeignKey("TicketCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketCategoryCapacities_TicketCategories");

                    b.Navigation("Availability");

                    b.Navigation("TicketCategory");
                });

            modelBuilder.Entity("TourManagementApi.Models.TimeSlot", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TourManagementApi.Models.Translation", b =>
                {
                    b.HasOne("TourManagementApi.Models.Activity", "Activity")
                        .WithMany("Translations")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Translations_Activities");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TourManagementApi.Models.Activity", b =>
                {
                    b.Navigation("ActivityLanguages");

                    b.Navigation("Addons");

                    b.Navigation("Availabilities");

                    b.Navigation("CancellationPolicyConditions");

                    b.Navigation("MeetingPoints");

                    b.Navigation("Options");

                    b.Navigation("PriceCategories");

                    b.Navigation("Reservations");

                    b.Navigation("RoutePoints");

                    b.Navigation("TimeSlots");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TourManagementApi.Models.Addon", b =>
                {
                    b.Navigation("AddonTranslations");
                });

            modelBuilder.Entity("TourManagementApi.Models.Availability", b =>
                {
                    b.Navigation("TicketCategoryCapacities");
                });

            modelBuilder.Entity("TourManagementApi.Models.Option", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("OpeningHours");

                    b.Navigation("Reservations");

                    b.Navigation("TicketCategories");
                });

            modelBuilder.Entity("TourManagementApi.Models.Reservation", b =>
                {
                    b.Navigation("ReservationGuests");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TourManagementApi.Models.TicketCategory", b =>
                {
                    b.Navigation("TicketCategoryCapacities");
                });

            modelBuilder.Entity("TourManagementApi.Models.TourCompany", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
